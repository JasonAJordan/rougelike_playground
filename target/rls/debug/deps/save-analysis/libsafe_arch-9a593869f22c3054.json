{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2","program":"C:\\Users\\Jason\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","safe_arch","--edition=2018","C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck\"","--cfg","feature=\"default\"","-C","metadata=9a593869f22c3054","-C","extra-filename=-9a593869f22c3054","--out-dir","c:\\Users\\Jason\\Desktop\\codingall\\rust\\games\\rougelike_playground\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Jason\\Desktop\\codingall\\rust\\games\\rougelike_playground\\target\\rls\\debug\\deps","--extern","bytemuck=c:\\Users\\Jason\\Desktop\\codingall\\rust\\games\\rougelike_playground\\target\\rls\\debug\\deps\\libbytemuck-e4cc5bca71a06784.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Jason\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Jason\\Desktop\\codingall\\rust\\games\\rougelike_playground\\target\\rls\\debug\\deps\\libsafe_arch-9a593869f22c3054.rmeta"},"prelude":{"crate_id":{"name":"safe_arch","disambiguator":[14959983281459712726,400813391343494186]},"crate_root":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src","external_crates":[{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[3747384843019373223,13759942304014052535]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[11478482899240340583,17122159790357076854]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11061011275580665867,9276968084265305739]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","num":4,"id":{"name":"bytemuck","disambiguator":[3759513641402560042,7121816604344875063]}}],"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":0,"byte_end":12154,"line_start":1,"line_end":286,"column_start":1,"column_end":4}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":0,"byte_end":12154,"line_start":1,"line_end":286,"column_start":1,"column_end":4},"name":"","qualname":"::","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":91}],"decl_id":null,"docs":" A crate that safely exposes arch intrinsics via `#[cfg()]`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(unused_imports)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":34,"byte_end":59,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"allow(clippy :: transmute_ptr_to_ptr)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":60,"byte_end":99,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/ A crate that safely exposes arch intrinsics via `#[cfg()]`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":141,"byte_end":204,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":205,"byte_end":208,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ `safe_arch` lets you safely use CPU intrinsics. Those things in the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":209,"byte_end":280,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ [`core::arch`](core::arch) modules. It works purely via `#[cfg()]` and","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":281,"byte_end":355,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ compile time CPU feature declaration. If you want to check for a feature at","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":356,"byte_end":435,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ runtime and then call an intrinsic or use a fallback path based on that then","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":436,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ this crate is sadly not for you.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":517,"byte_end":553,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":554,"byte_end":557,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ SIMD register types are \"newtype'd\" so that better trait impls can be given","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":558,"byte_end":637,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ to them, but the inner value is a `pub` field so feel free to just grab it","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":638,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ out if you need to. Trait impls of the newtypes include: `Default` (zeroed),","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":717,"byte_end":797,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ `From`/`Into` of appropriate data types, and appropriate operator","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":798,"byte_end":867,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ overloading.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":868,"byte_end":884,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":885,"byte_end":888,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * Most intrinsics (like addition and multiplication) are totally safe to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":889,"byte_end":969,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/   as long as the CPU feature is available. In this case, what you get is 1:1","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":970,"byte_end":1050,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   with the actual intrinsic.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1051,"byte_end":1083,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics take a pointer of an assumed minimum alignment and","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1084,"byte_end":1156,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/   validity span. For these, the `safe_arch` function takes a reference of an","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1157,"byte_end":1237,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   appropriate type to uphold safety.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1238,"byte_end":1278,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/   * Try the [bytemuck](https://docs.rs/bytemuck) crate (and turn on the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1279,"byte_end":1354,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/     `bytemuck` feature of this crate) if you want help safely casting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1355,"byte_end":1428,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/     between reference types.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1429,"byte_end":1461,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics are not safe unless you're _very_ careful about how you","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1462,"byte_end":1539,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/   use them, such as the streaming operations requiring you to use them in","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1540,"byte_end":1617,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/   combination with an appropriate memory fence. Those operations aren't","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1618,"byte_end":1693,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/   exposed here.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1694,"byte_end":1713,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/ * Some intrinsics mess with the processor state, such as changing the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1714,"byte_end":1787,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/   floating point flags, saving and loading special register state, and so","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1788,"byte_end":1865,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/   on. LLVM doesn't really support you messing with that within a high level","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1866,"byte_end":1945,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/   language, so those operations aren't exposed here. Use assembly or","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1946,"byte_end":2018,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/   something if you want to do that.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2019,"byte_end":2058,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2059,"byte_end":2062,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## Naming Conventions","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2063,"byte_end":2088,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ The `safe_arch` crate does not simply use the \"official\" names for each","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2089,"byte_end":2164,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ intrinsic, because the official names are generally poor. Instead, the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2165,"byte_end":2239,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ operations have been given better names that makes things hopefully easier","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2240,"byte_end":2318,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to understand then you're reading the code.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2319,"byte_end":2366,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2367,"byte_end":2370,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ For a full explanation of the naming used, see the [Naming","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2371,"byte_end":2433,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ Conventions](crate::naming_conventions) page.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2434,"byte_end":2483,"line_start":47,"line_end":47,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2484,"byte_end":2487,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Current Support","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2488,"byte_end":2510,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/ * `x86` / `x86_64` (Intel, AMD, etc)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2511,"byte_end":2551,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/   * 128-bit: `sse`, `sse2`, `sse3`, `ssse3`, `sse4.1`, `sse4.2`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2552,"byte_end":2619,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/   * 256-bit: `avx`, `avx2`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2620,"byte_end":2650,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/   * Other: `adx`, `aes`, `bmi1`, `bmi2`, `fma`, `lzcnt`, `pclmulqdq`,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2651,"byte_end":2724,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     `popcnt`, `rdrand`, `rdseed`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2725,"byte_end":2761,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2762,"byte_end":2765,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Compile Time CPU Target Features","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2766,"byte_end":2805,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2806,"byte_end":2809,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ At the time of me writing this, Rust enables the `sse` and `sse2` CPU","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2810,"byte_end":2883,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ features by default for all `i686` (x86) and `x86_64` builds. Those CPU","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2884,"byte_end":2959,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ features are built into the design of `x86_64`, and you'd need a _super_ old","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2960,"byte_end":3040,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ `x86` CPU for it to not support at least `sse` and `sse2`, so they're a safe","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3041,"byte_end":3121,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ bet for the language to enable all the time. In fact, because the standard","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3122,"byte_end":3200,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ library is compiled with them enabled, simply trying to _disable_ those","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3201,"byte_end":3276,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ features would actually cause ABI issues and fill your program with UB","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3277,"byte_end":3351,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ ([link][rustc_docs]).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3352,"byte_end":3377,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3378,"byte_end":3381,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ If you want additional CPU features available at compile time you'll have to","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3382,"byte_end":3462,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ enable them with an additional arg to `rustc`. For a feature named `name`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3463,"byte_end":3540,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ you pass `-C target-feature=+name`, such as `-C target-feature=+sse3` for","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3541,"byte_end":3618,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ `sse3`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3619,"byte_end":3630,"line_start":70,"line_end":70,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3631,"byte_end":3634,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ You can alternately enable _all_ target features of the current CPU with `-C","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3635,"byte_end":3715,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ target-cpu=native`. This is primarily of use if you're building a program","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3716,"byte_end":3793,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ you'll only run on your own system.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3794,"byte_end":3833,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3834,"byte_end":3837,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ It's sometimes hard to know if your target platform will support a given","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3838,"byte_end":3914,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ feature set, but the [Steam Hardware Survey][steam-survey] is generally","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3915,"byte_end":3990,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ taken as a guide to what you can expect people to have available. If you","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3991,"byte_end":4067,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ click \"Other Settings\" it'll expand into a list of CPU target features and","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4068,"byte_end":4146,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ how common they are. These days, it seems that `sse3` can be safely assumed,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4147,"byte_end":4227,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ and `ssse3`, `sse4.1`, and `sse4.2` are pretty safe bets as well. The stuff","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4228,"byte_end":4307,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ above 128-bit isn't as common yet, give it another few years.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4308,"byte_end":4373,"line_start":82,"line_end":82,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4374,"byte_end":4377,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ **Please note that executing a program on a CPU that doesn't support the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4378,"byte_end":4454,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ target features it was compiles for is Undefined Behavior.**","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4455,"byte_end":4519,"line_start":85,"line_end":85,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4520,"byte_end":4523,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Currently, Rust doesn't actually support an easy way for you to check that a","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4524,"byte_end":4604,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ feature enabled at compile time is _actually_ available at runtime. There is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4605,"byte_end":4685,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ the \"[feature_detected][feature_detected]\" family of macros, but if you","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4686,"byte_end":4761,"line_start":89,"line_end":89,"column_start":1,"column_end":76}},{"value":"/ enable a feature they will evaluate to a constant `true` instead of actually","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4762,"byte_end":4842,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ deferring the check for the feature to runtime. This means that, if you","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4843,"byte_end":4918,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ _did_ want a check at the start of your program, to confirm that all the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4919,"byte_end":4995,"line_start":92,"line_end":92,"column_start":1,"column_end":77}},{"value":"/ assumed features are present and error out when the assumptions don't hold,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4996,"byte_end":5075,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ you can't use that macro. You gotta use CPUID and check manually. rip.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5076,"byte_end":5150,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ Hopefully we can make that process easier in a future version of this crate.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5151,"byte_end":5231,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5232,"byte_end":5235,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [steam-survey]:","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5236,"byte_end":5255,"line_start":97,"line_end":97,"column_start":1,"column_end":20}},{"value":"/ https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5256,"byte_end":5347,"line_start":98,"line_end":98,"column_start":1,"column_end":92}},{"value":"/ [feature_detected]:","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5348,"byte_end":5371,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/ https://doc.rust-lang.org/std/index.html?search=feature_detected","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5372,"byte_end":5440,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/ [rustc_docs]: https://doc.rust-lang.org/rustc/targets/known-issues.html","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5441,"byte_end":5516,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5517,"byte_end":5520,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ### A Note On Working With Cfg","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5521,"byte_end":5555,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5556,"byte_end":5559,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ There's two main ways to use `cfg`:","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5560,"byte_end":5599,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ * Via an attribute placed on an item, block, or expression:","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5600,"byte_end":5663,"line_start":106,"line_end":106,"column_start":1,"column_end":64}},{"value":"/   * `#[cfg(debug_assertions)] println!(\"hello\");`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5664,"byte_end":5717,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ * Via a macro used within an expression position:","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5718,"byte_end":5771,"line_start":108,"line_end":108,"column_start":1,"column_end":54}},{"value":"/   * `if cfg!(debug_assertions) { println!(\"hello\"); }`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5772,"byte_end":5830,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5831,"byte_end":5834,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The difference might seem small but it's actually very important:","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5835,"byte_end":5904,"line_start":111,"line_end":111,"column_start":1,"column_end":70}},{"value":"/ * The attribute form will include code or not _before_ deciding if all the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5905,"byte_end":5983,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/   items named and so forth really exist or not. This means that code that is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5984,"byte_end":6064,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   configured via attribute can safely name things that don't always exist as","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6065,"byte_end":6145,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/   long as the things they name do exist whenever that code is configured","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6146,"byte_end":6222,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/   into the build.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6223,"byte_end":6244,"line_start":116,"line_end":116,"column_start":1,"column_end":22}},{"value":"/ * The macro form will include the configured code _no matter what_, and then","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6245,"byte_end":6325,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/   the macro resolves to a constant `true` or `false` and the compiler uses","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6326,"byte_end":6404,"line_start":118,"line_end":118,"column_start":1,"column_end":79}},{"value":"/   dead code elimination to cut out the path not taken.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6405,"byte_end":6463,"line_start":119,"line_end":119,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6464,"byte_end":6467,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This crate uses `cfg` via the attribute, so the functions it exposes don't","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6468,"byte_end":6546,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ exist at all when the appropriate CPU target features aren't enabled.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6547,"byte_end":6620,"line_start":122,"line_end":122,"column_start":1,"column_end":74}},{"value":"/ Accordingly, if you plan to call this crate or not depending on what","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6621,"byte_end":6693,"line_start":123,"line_end":123,"column_start":1,"column_end":73}},{"value":"/ features are enabled in the build you'll also need to control your use of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6694,"byte_end":6771,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/ this crate via cfg attribute, not cfg macro.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6772,"byte_end":6820,"line_start":125,"line_end":125,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naming_conventions","qualname":"::naming_conventions","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","parent":null,"children":[],"decl_id":null,"docs":" An explanation of the crate's naming conventions.","sig":null,"attributes":[{"value":"/ An explanation of the crate's naming conventions.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12442,"byte_end":12495,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12496,"byte_end":12499,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate attempts to follow the general naming scheme of `verb_type` when","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12500,"byte_end":12579,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the operation is \"simple\", and `verb_description_words_type` when the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12580,"byte_end":12653,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ operation (op) needs to be more specific than normal. Like this:","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12654,"byte_end":12722,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ * `add_m128`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12723,"byte_end":12739,"line_start":6,"line_end":6,"column_start":1,"column_end":17}},{"value":"/ * `add_saturating_i8_m128i`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12740,"byte_end":12771,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12772,"byte_end":12775,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Types","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12776,"byte_end":12788,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ Currently, only `x86` and `x86_64` types are supported. Among those types:","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12789,"byte_end":12867,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ * `m128` and `m256` are always considered to hold `f32` lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12868,"byte_end":12934,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ * `m128d` and `m256d` are always considered to hold `f64` lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12935,"byte_end":13003,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ * `m128i` and `m256i` hold integer data, but each op specifies what lane","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13004,"byte_end":13080,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/   width of integers the operation uses.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13081,"byte_end":13124,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ * If the type has `_s` on the end then it's a \"scalar\" operation that","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13125,"byte_end":13198,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/   affects just the lowest lane. The other lanes are generally copied forward","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13199,"byte_end":13279,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/   from one of the inputs, though the details there vary from op to op.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13280,"byte_end":13354,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ * The SIMD types are often referred to as \"registers\" because each SIMD","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13355,"byte_end":13430,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/   typed value represents exactly one CPU register when you're doing work.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13431,"byte_end":13508,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13509,"byte_end":13512,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Operations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13513,"byte_end":13530,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/ There's many operations that can be performed. When possible, `safe_arch`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13531,"byte_end":13608,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ tries to follow normal Rust naming (eg: adding is still `add` and left","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13609,"byte_end":13683,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ shifting is still `shl`), but if an operation doesn't normally exist at all","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13684,"byte_end":13763,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ in Rust then we basically have to make something up.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13764,"byte_end":13820,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13821,"byte_end":13824,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Many operations have more than one variant, such as `add` and also","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13825,"byte_end":13895,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `add_saturating`. In this case, `safe_arch` puts the \"core operation\" first","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13896,"byte_end":13975,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ and then any \"modifiers\" go after, which isn't how you might normally say it","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13976,"byte_end":14056,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in English, but it makes the list of functions sort better.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14057,"byte_end":14120,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14121,"byte_end":14124,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ As a general note on SIMD terminology: When an operation uses the same","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14125,"byte_end":14199,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ indexed lane in two _different_ registers to determine the output, that is a","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14200,"byte_end":14280,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ \"vertical\" operation. When an operation uses more than one lane in the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14281,"byte_end":14355,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ _same_ register to determine the output, that is a \"horizontal\" operation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14356,"byte_end":14434,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ * Vertical: `out[0] = a[0] + b[0]`, `out[1] = a[1] + b[1]`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14435,"byte_end":14497,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ * Horizontal: `out[0] = a[0] + a[1]`, `out[1] = b[0] + b[1]`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14498,"byte_end":14562,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14563,"byte_end":14566,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Operation Glossary","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14567,"byte_end":14592,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here follows the list of all the main operations and their explanations.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14593,"byte_end":14669,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14670,"byte_end":14673,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * `abs`: Absolute value (wrapping).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14674,"byte_end":14713,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/ * `add`: Addition. This is \"wrapping\" by default, though some other types of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14714,"byte_end":14794,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/   addition are available. Remember that wrapping signed addition is the same","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14795,"byte_end":14875,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   as wrapping unsigned addition.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14876,"byte_end":14912,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ * `average`: Averages the two inputs.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14913,"byte_end":14954,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ * `bitand`: Bitwise And, `a & b`, like [the trait](core::ops::BitAnd).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14955,"byte_end":15029,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ * `bitandnot`: Bitwise `(!a) & b`. This seems a little funny at first but","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15030,"byte_end":15107,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/   it's useful for clearing bits. The output will be based on the `b` side's","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15108,"byte_end":15187,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/   bit pattern, but with all active bits in `a` cleared:","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15188,"byte_end":15247,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/   * `bitandnot(0b0010, 0b1011) == 0b1001`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15248,"byte_end":15293,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * `bitor`: Bitwise Or, `a | b`, like [the trait](core::ops::BitOr).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15294,"byte_end":15365,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/ * `bitxor`: Bitwise eXclusive Or, `a ^ b`, like [the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15366,"byte_end":15422,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/   trait](core::ops::BitXor).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15423,"byte_end":15455,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ * `blend`: Merge the data lanes of two SIMD values by taking either the `b`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15456,"byte_end":15535,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   value or `a` value for each lane. Depending on the instruction, the blend","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15536,"byte_end":15615,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/   mask can be either an immediate or a runtime value.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15616,"byte_end":15673,"line_start":57,"line_end":57,"column_start":1,"column_end":58}},{"value":"/ * `cast`: Convert between data types while preserving the exact bit","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15674,"byte_end":15745,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/   patterns, like how [`transmute`](core::mem::transmute) works.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15746,"byte_end":15813,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ * `ceil`: \"Ceiling\", rounds towards positive infinity.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15814,"byte_end":15872,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/ * `cmp`: Numeric comparisons of various kinds. This generally gives \"mask\"","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15873,"byte_end":15951,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/   output where the output value is of the same data type as the inputs, but","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15952,"byte_end":16031,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/   with all the bits in a \"true\" lane as 1 and all the bits in a \"false\" lane","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16032,"byte_end":16112,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/   as 0. Remember that with floating point values all 1s bits is a NaN, and","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16113,"byte_end":16191,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/   with signed integers all 1s bits is -1.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16192,"byte_end":16237,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"/   * An \"Ordered comparison\" checks if _neither_ floating point value is NaN.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16238,"byte_end":16318,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/   * An \"Unordered comparison\" checks if _either_ floating point value is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16319,"byte_end":16395,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/     NaN.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16396,"byte_end":16408,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/ * `convert`: This does some sort of numeric type change. The details can","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16409,"byte_end":16485,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/   vary wildly. Generally, if the number of lanes goes down then the lowest","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16486,"byte_end":16564,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   lanes will be kept. If the number of lanes goes up then the new high lanes","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16565,"byte_end":16645,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/   will be zero.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16646,"byte_end":16665,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ * `div`: Division.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16666,"byte_end":16688,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/ * `dot_product`: This works like the matrix math operation. The lanes are","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16689,"byte_end":16766,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/   multiplied and then the results are summed up into a single value.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16767,"byte_end":16839,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/ * `duplicate`: Copy the even or odd indexed lanes to the other set of lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16840,"byte_end":16920,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/   Eg, `[1, 2, 3, 4]` becomes `[1, 1, 3, 3]` or `[2, 2, 4, 4]`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16921,"byte_end":16987,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ * `extract`: Get a value from the lane of a SIMD type into a scalar type.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16988,"byte_end":17065,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ * `floor`: Rounds towards negative infinity.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17066,"byte_end":17114,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/ * `fused`: All the fused operations are a multiply as well as some sort of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17115,"byte_end":17193,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/   adding or subtracting. The details depend on which fused operation you","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17194,"byte_end":17270,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/   select. The benefit of this operation over a non-fused operation are that","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17271,"byte_end":17350,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/   it can compute slightly faster than doing the mul and add separately, and","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17351,"byte_end":17430,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/   also the output can have higher accuracy in the result.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17431,"byte_end":17492,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"/ * `insert`: The opposite of `extract`, this puts a new value into a","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17493,"byte_end":17564,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/   particular lane of a SIMD type.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17565,"byte_end":17602,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/ * `load`: Reads an address and makes a SIMD register value. The details can","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17603,"byte_end":17682,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/   vary because there's more than one type of `load`, but generally this is a","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17683,"byte_end":17763,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/   `&T -> U` style operation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17764,"byte_end":17796,"line_start":89,"line_end":89,"column_start":1,"column_end":33}},{"value":"/ * `max`: Picks the larger value from each of the two inputs.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17797,"byte_end":17861,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/ * `min`: Picks the smaller value from each of the two inputs.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17862,"byte_end":17927,"line_start":91,"line_end":91,"column_start":1,"column_end":66}},{"value":"/ * `mul`: Multiplication. For floating point this is just \"normal\"","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17928,"byte_end":17997,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/   multiplication, but for integer types you tend to have some options. An","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17998,"byte_end":18075,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/   integer multiplication of X bits will produce a 2X bit output, so","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18076,"byte_end":18147,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/   generally you'll get to pick if you want to keep the high half of that,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18148,"byte_end":18225,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   the low half of that (a normal \"wrapping\" mul), or \"widen\" the outputs to","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18226,"byte_end":18305,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/   be all the bits at the expense of not multiplying half the lanes the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18306,"byte_end":18380,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/   lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18381,"byte_end":18393,"line_start":98,"line_end":98,"column_start":1,"column_end":13}},{"value":"/ * `pack`: Take the integers in the `a` and `b` inputs, reduce them to fit","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18394,"byte_end":18471,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/   within the half-sized integer type (eg: `i16` to `i8`), and pack them all","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18472,"byte_end":18551,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   together into the output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18552,"byte_end":18583,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ * `population`: The \"population\" operations refer to the bits within an","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18584,"byte_end":18659,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/   integer. Either counting them or adjusting them in various ways.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18660,"byte_end":18730,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ * `rdrand`: Use the hardware RNG to make a random value of the given length.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18731,"byte_end":18811,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ * `rdseed`: Use the hardware RNG to make a random seed of the given length.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18812,"byte_end":18891,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/   This is less commonly available, but theoretically an improvement over","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18892,"byte_end":18968,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/   `rdrand` in that if you have to combine more than one usage of this","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18969,"byte_end":19042,"line_start":107,"line_end":107,"column_start":1,"column_end":74}},{"value":"/   operation to make your full seed size then the guess difficulty rises at a","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19043,"byte_end":19123,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/   multiplicative rate instead of just an additive rate. For example, two","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19124,"byte_end":19200,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/   `u64` outputs concatenated to a single `u128` have a guess difficulty of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19201,"byte_end":19279,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/   2^(64*64) with `rdseed` but only 2^(64+64) with `rdrand`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19280,"byte_end":19343,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"/ * `read_timestamp_counter`: Lets you read the CPU's cycle counter, which","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19344,"byte_end":19420,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/   doesn't strictly mean anything in particular since even the CPU's clock","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19421,"byte_end":19498,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/   rate isn't even stable over time, but you might find it interesting as an","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19499,"byte_end":19578,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/   approximation during benchmarks, or something like that.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19579,"byte_end":19641,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"/ * `reciprocal`: Turns `x` into `1/x`. Can also be combined with a `sqrt`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19642,"byte_end":19718,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/   operation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19719,"byte_end":19735,"line_start":117,"line_end":117,"column_start":1,"column_end":17}},{"value":"/ * `round`: Convert floating point values to whole numbers, according to one","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19736,"byte_end":19815,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/   of several available methods.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19816,"byte_end":19851,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/ * `set`: Places a list of scalar values into a SIMD lane. Conceptually","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19852,"byte_end":19926,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/   similar to how building an array works in Rust.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19927,"byte_end":19980,"line_start":121,"line_end":121,"column_start":1,"column_end":54}},{"value":"/ * `splat`: Not generally an operation of its own, but a modifier to other","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19981,"byte_end":20058,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/   operations such as `load` and `set`. This will copy a given value across a","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20059,"byte_end":20139,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/   SIMD type as many times as it can be copied. For example, a 32-bit value","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20140,"byte_end":20218,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   splatted into a 128-bit register will be copied four times.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20219,"byte_end":20284,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ * `shl`: Bit shift left. New bits shifted in are always 0. Because the shift","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20285,"byte_end":20365,"line_start":126,"line_end":126,"column_start":1,"column_end":81}},{"value":"/   is the same for both signed and unsigned values, this crate simply marks","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20366,"byte_end":20444,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/   left shift as always being an unsigned operation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20445,"byte_end":20500,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/   * You can shift by an immediate value (\"imm\"), all lanes by the same value","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20501,"byte_end":20581,"line_start":129,"line_end":129,"column_start":1,"column_end":81}},{"value":"/     (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20582,"byte_end":20638,"line_start":130,"line_end":130,"column_start":1,"column_end":57}},{"value":"/ * `shr`: Bit shift right. This comes in two forms: \"Arithmetic\" shifts shift","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20639,"byte_end":20719,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   in the starting sign bit (which preserves the sign of the value), and","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20720,"byte_end":20795,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/   \"Logical\" shifts shift in 0 regardless of the starting sign bit (so the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20796,"byte_end":20873,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/   result ends up being positive). With normal Rust types, signed integers","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20874,"byte_end":20951,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/   use arithmetic shifts and unsigned integers use logical shifts, so these","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20952,"byte_end":21030,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/   functions are marked as being for signed or unsigned integers","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21031,"byte_end":21098,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/   appropriately.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21099,"byte_end":21119,"line_start":137,"line_end":137,"column_start":1,"column_end":21}},{"value":"/   * As with `shl`, you can shift by an immediate value (\"imm\"), all lanes by","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21120,"byte_end":21200,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/     the same value (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21201,"byte_end":21272,"line_start":139,"line_end":139,"column_start":1,"column_end":72}},{"value":"/ * `sign_apply`: Multiplies one set of values by the signum (1, 0, or -1) of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21273,"byte_end":21352,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/   another set of values.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21353,"byte_end":21381,"line_start":141,"line_end":141,"column_start":1,"column_end":29}},{"value":"/ * `sqrt`: Square Root.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21382,"byte_end":21408,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/ * `store`: Writes a SIMD value to a memory location.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21409,"byte_end":21465,"line_start":143,"line_end":143,"column_start":1,"column_end":57}},{"value":"/ * `string_search`: A rather specialized instruction that lets you do byte","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21466,"byte_end":21543,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/   based searching within a register. This lets you do some very high speed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21544,"byte_end":21622,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/   searching through ASCII strings when the stars align.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21623,"byte_end":21682,"line_start":146,"line_end":146,"column_start":1,"column_end":60}},{"value":"/ * `sub`: Subtract.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21683,"byte_end":21705,"line_start":147,"line_end":147,"column_start":1,"column_end":23}},{"value":"/ * `shuffle`: This lets you re-order the data lanes. Sometimes x86/x64 calls","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21706,"byte_end":21785,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/   this is called \"shuffle\", and sometimes it's called \"permute\", and there's","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21786,"byte_end":21866,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/   no particular reasoning behind the different names, so we just call them","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21867,"byte_end":21945,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/   all shuffle.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21946,"byte_end":21964,"line_start":151,"line_end":151,"column_start":1,"column_end":19}},{"value":"/   * `shuffle_{args}_{lane-type}_{lane-sources}_{simd-type}`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21965,"byte_end":22029,"line_start":152,"line_end":152,"column_start":1,"column_end":65}},{"value":"/   * \"args\" is the input arguments: `a` (one arg) or `ab` (two args), then","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22030,"byte_end":22107,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/     either `v` (runtime-varying) or `i` (immediate). All the immediate","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22108,"byte_end":22182,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/     shuffles are macros, of course.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22183,"byte_end":22222,"line_start":155,"line_end":155,"column_start":1,"column_end":40}},{"value":"/   * \"lane type\" is `f32`, `f64`, `i8`, etc. If there's a `z` after the type","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22223,"byte_end":22302,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/     then you'll also be able to zero an output position instead of making it","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22303,"byte_end":22383,"line_start":157,"line_end":157,"column_start":1,"column_end":81}},{"value":"/     come from a particular source lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22384,"byte_end":22427,"line_start":158,"line_end":158,"column_start":1,"column_end":44}},{"value":"/   * \"lane sources\" is generally either \"all\" which means that all lanes can","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22428,"byte_end":22507,"line_start":159,"line_end":159,"column_start":1,"column_end":80}},{"value":"/     go to all other lanes, or \"half\" which means that each half of the lanes","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22508,"byte_end":22588,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     is isolated from the other half, and you can't cross data between the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22589,"byte_end":22666,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/     two halves, only within a half (this is how most of the 256-bit x86/x64","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22667,"byte_end":22746,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/     shuffles work).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22747,"byte_end":22770,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"/ * `unpack`: Takes a SIMD value and gets out some of the lanes while widening","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22771,"byte_end":22851,"line_start":164,"line_end":164,"column_start":1,"column_end":81}},{"value":"/   them, such as converting `i16` to `i32`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22852,"byte_end":22898,"line_start":165,"line_end":165,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892836,"byte_end":6892840,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m128","qualname":"::x86_x64::m128_::m128","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of four `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of four `f32` lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892513,"byte_end":6892573,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892574,"byte_end":6892577,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 4]`. The main difference is that","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892578,"byte_end":6892656,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892657,"byte_end":6892730,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892731,"byte_end":6892772,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892773,"byte_end":6892793,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892794,"byte_end":6892824,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892841,"byte_end":6892851,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m128_::m128::0","value":"core::arch::x86_64::__m128","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893404,"byte_end":6893412,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128` to an array.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893235,"byte_end":6893273,"line_start":32,"line_end":32,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893276,"byte_end":6893279,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893282,"byte_end":6893360,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893363,"byte_end":6893374,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893377,"byte_end":6893394,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893639,"byte_end":6893649,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893456,"byte_end":6893492,"line_start":41,"line_end":41,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893495,"byte_end":6893498,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m128::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893501,"byte_end":6893578,"line_start":43,"line_end":43,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893581,"byte_end":6893595,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893598,"byte_end":6893609,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893612,"byte_end":6893629,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893883,"byte_end":6893890,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893699,"byte_end":6893762,"line_start":53,"line_end":53,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893765,"byte_end":6893768,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all four lanes at once.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893771,"byte_end":6893839,"line_start":55,"line_end":55,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893842,"byte_end":6893853,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893856,"byte_end":6893873,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894148,"byte_end":6894157,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893960,"byte_end":6894023,"line_start":62,"line_end":62,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894026,"byte_end":6894029,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all four lanes at once.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894032,"byte_end":6894104,"line_start":64,"line_end":64,"column_start":3,"column_end":75}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894107,"byte_end":6894118,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894121,"byte_end":6894138,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899831,"byte_end":6899836,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m128d","qualname":"::x86_x64::m128d_::m128d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of two `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of two `f64` values.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899508,"byte_end":6899568,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899569,"byte_end":6899572,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 2]`. The main difference is that","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899573,"byte_end":6899651,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899652,"byte_end":6899725,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899726,"byte_end":6899767,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899768,"byte_end":6899788,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899789,"byte_end":6899819,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899837,"byte_end":6899848,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128d_::m128d::0","value":"core::arch::x86_64::__m128d","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900410,"byte_end":6900418,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128d` to an array.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900240,"byte_end":6900279,"line_start":32,"line_end":32,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900282,"byte_end":6900285,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900288,"byte_end":6900366,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900369,"byte_end":6900380,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900383,"byte_end":6900400,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900647,"byte_end":6900657,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128d`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900462,"byte_end":6900499,"line_start":41,"line_end":41,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900502,"byte_end":6900505,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m128d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900508,"byte_end":6900586,"line_start":43,"line_end":43,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900589,"byte_end":6900603,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900606,"byte_end":6900617,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900620,"byte_end":6900637,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900888,"byte_end":6900895,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900707,"byte_end":6900771,"line_start":53,"line_end":53,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900774,"byte_end":6900777,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900780,"byte_end":6900844,"line_start":55,"line_end":55,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900847,"byte_end":6900858,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900861,"byte_end":6900878,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901150,"byte_end":6901159,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900965,"byte_end":6901029,"line_start":62,"line_end":62,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901032,"byte_end":6901035,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901038,"byte_end":6901106,"line_start":64,"line_end":64,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901109,"byte_end":6901120,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901123,"byte_end":6901140,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906669,"byte_end":6906674,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m128i","qualname":"::x86_x64::m128i_::m128i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of integer data.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906189,"byte_end":6906245,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906246,"byte_end":6906249,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906250,"byte_end":6906323,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906324,"byte_end":6906402,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906403,"byte_end":6906421,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906422,"byte_end":6906502,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906503,"byte_end":6906580,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906581,"byte_end":6906605,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906606,"byte_end":6906626,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906627,"byte_end":6906657,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906675,"byte_end":6906686,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128i_::m128i::0","value":"core::arch::x86_64::__m128i","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915018,"byte_end":6915022,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m256","qualname":"::x86_x64::m256_::m256","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of eight `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of eight `f32` lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6914694,"byte_end":6914755,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6914756,"byte_end":6914759,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 8]`. The main difference is that","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6914760,"byte_end":6914838,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6914839,"byte_end":6914912,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6914913,"byte_end":6914954,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6914955,"byte_end":6914975,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6914976,"byte_end":6915006,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915023,"byte_end":6915033,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m256_::m256::0","value":"core::arch::x86_64::__m256","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915586,"byte_end":6915594,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256` to an array.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915417,"byte_end":6915455,"line_start":32,"line_end":32,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915458,"byte_end":6915461,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915464,"byte_end":6915542,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915545,"byte_end":6915556,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915559,"byte_end":6915576,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915821,"byte_end":6915831,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915638,"byte_end":6915674,"line_start":41,"line_end":41,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915677,"byte_end":6915680,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m256::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915683,"byte_end":6915760,"line_start":43,"line_end":43,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915763,"byte_end":6915777,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915780,"byte_end":6915791,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915794,"byte_end":6915811,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916060,"byte_end":6916067,"line_start":56,"line_end":56,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915875,"byte_end":6915938,"line_start":51,"line_end":51,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915941,"byte_end":6915944,"line_start":52,"line_end":52,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all eight lanes at once.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915947,"byte_end":6916016,"line_start":53,"line_end":53,"column_start":3,"column_end":72}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916019,"byte_end":6916030,"line_start":54,"line_end":54,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916033,"byte_end":6916050,"line_start":55,"line_end":55,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916326,"byte_end":6916335,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916137,"byte_end":6916200,"line_start":60,"line_end":60,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916203,"byte_end":6916206,"line_start":61,"line_end":61,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all eight lanes at once.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916209,"byte_end":6916282,"line_start":62,"line_end":62,"column_start":3,"column_end":76}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916285,"byte_end":6916296,"line_start":63,"line_end":63,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916299,"byte_end":6916316,"line_start":64,"line_end":64,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922128,"byte_end":6922133,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m256d","qualname":"::x86_x64::m256d_::m256d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of four `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of four `f64` values.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6921804,"byte_end":6921865,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6921866,"byte_end":6921869,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 4]`. The main difference is that","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6921870,"byte_end":6921948,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6921949,"byte_end":6922022,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922023,"byte_end":6922064,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922065,"byte_end":6922085,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922086,"byte_end":6922116,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922134,"byte_end":6922145,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256d_::m256d::0","value":"core::arch::x86_64::__m256d","parent":{"krate":0,"index":334},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922707,"byte_end":6922715,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256d` to an array.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922537,"byte_end":6922576,"line_start":32,"line_end":32,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922579,"byte_end":6922582,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922585,"byte_end":6922663,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922666,"byte_end":6922677,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922680,"byte_end":6922697,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922944,"byte_end":6922954,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256d`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922759,"byte_end":6922796,"line_start":41,"line_end":41,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922799,"byte_end":6922802,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m256d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922805,"byte_end":6922883,"line_start":43,"line_end":43,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922886,"byte_end":6922900,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922903,"byte_end":6922914,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922917,"byte_end":6922934,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923185,"byte_end":6923192,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923004,"byte_end":6923068,"line_start":53,"line_end":53,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923071,"byte_end":6923074,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923077,"byte_end":6923141,"line_start":55,"line_end":55,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923144,"byte_end":6923155,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923158,"byte_end":6923175,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923447,"byte_end":6923456,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923262,"byte_end":6923326,"line_start":62,"line_end":62,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923329,"byte_end":6923332,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923335,"byte_end":6923403,"line_start":64,"line_end":64,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923406,"byte_end":6923417,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923420,"byte_end":6923437,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6928966,"byte_end":6928971,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m256i","qualname":"::x86_x64::m256i_::m256i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of integer data.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6928486,"byte_end":6928542,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6928543,"byte_end":6928546,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6928547,"byte_end":6928620,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6928621,"byte_end":6928699,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6928700,"byte_end":6928718,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6928719,"byte_end":6928799,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6928800,"byte_end":6928877,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6928878,"byte_end":6928902,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6928903,"byte_end":6928923,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6928924,"byte_end":6928954,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6928972,"byte_end":6928983,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256i_::m256i::0","value":"core::arch::x86_64::__m256i","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937268,"byte_end":6937276,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"add_m128","qualname":"::x86_x64::sse::add_m128","value":"pub fn add_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128(a, b).to_array();\n assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6936928,"byte_end":6936949,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6936950,"byte_end":6936957,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6936958,"byte_end":6936981,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6936982,"byte_end":6937033,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937034,"byte_end":6937085,"line_start":9,"line_end":9,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937086,"byte_end":6937124,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937125,"byte_end":6937167,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937168,"byte_end":6937175,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937176,"byte_end":6937187,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937188,"byte_end":6937205,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937711,"byte_end":6937721,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"add_m128_s","qualname":"::x86_x64::sse::add_m128_s","value":"pub fn add_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a + b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128_s(a, b).to_array();\n assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a + b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937348,"byte_end":6937392,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937393,"byte_end":6937400,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937401,"byte_end":6937424,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937425,"byte_end":6937476,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937477,"byte_end":6937528,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937529,"byte_end":6937569,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937570,"byte_end":6937610,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937611,"byte_end":6937618,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937619,"byte_end":6937630,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937631,"byte_end":6937648,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938133,"byte_end":6938144,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"bitand_m128","qualname":"::x86_x64::sse::bitand_m128","value":"pub fn bitand_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitand_m128(a, b).to_array();\n assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937793,"byte_end":6937813,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937814,"byte_end":6937821,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937822,"byte_end":6937845,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937846,"byte_end":6937897,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937898,"byte_end":6937949,"line_start":39,"line_end":39,"column_start":1,"column_end":52}},{"value":"/ let c = bitand_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937950,"byte_end":6937991,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6937992,"byte_end":6938032,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938033,"byte_end":6938040,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938041,"byte_end":6938052,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938053,"byte_end":6938070,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938562,"byte_end":6938576,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"bitandnot_m128","qualname":"::x86_x64::sse::bitandnot_m128","value":"pub fn bitandnot_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitandnot_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938216,"byte_end":6938239,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938240,"byte_end":6938247,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938248,"byte_end":6938271,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938272,"byte_end":6938323,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938324,"byte_end":6938375,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let c = bitandnot_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938376,"byte_end":6938420,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938421,"byte_end":6938461,"line_start":56,"line_end":56,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938462,"byte_end":6938469,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938470,"byte_end":6938481,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938482,"byte_end":6938499,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939024,"byte_end":6939040,"line_start":78,"line_end":78,"column_start":8,"column_end":24},"name":"cmp_eq_mask_m128","qualname":"::x86_x64::sse::cmp_eq_mask_m128","value":"pub fn cmp_eq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938651,"byte_end":6938673,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938674,"byte_end":6938677,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938678,"byte_end":6938694,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938695,"byte_end":6938702,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938703,"byte_end":6938726,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938727,"byte_end":6938778,"line_start":70,"line_end":70,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938779,"byte_end":6938830,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938831,"byte_end":6938876,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, u32::MAX]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938877,"byte_end":6938923,"line_start":73,"line_end":73,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938924,"byte_end":6938931,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938932,"byte_end":6938943,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6938944,"byte_end":6938961,"line_start":76,"line_end":76,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939519,"byte_end":6939537,"line_start":95,"line_end":95,"column_start":8,"column_end":26},"name":"cmp_eq_mask_m128_s","qualname":"::x86_x64::sse::cmp_eq_mask_m128_s","value":"pub fn cmp_eq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939114,"byte_end":6939159,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939160,"byte_end":6939163,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939164,"byte_end":6939180,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939181,"byte_end":6939188,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939189,"byte_end":6939212,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939213,"byte_end":6939264,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939265,"byte_end":6939316,"line_start":88,"line_end":88,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939317,"byte_end":6939364,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939365,"byte_end":6939418,"line_start":90,"line_end":90,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939419,"byte_end":6939426,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939427,"byte_end":6939438,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939439,"byte_end":6939456,"line_start":93,"line_end":93,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939991,"byte_end":6940007,"line_start":112,"line_end":112,"column_start":8,"column_end":24},"name":"cmp_ge_mask_m128","qualname":"::x86_x64::sse::cmp_ge_mask_m128","value":"pub fn cmp_ge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939611,"byte_end":6939633,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939634,"byte_end":6939637,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939638,"byte_end":6939654,"line_start":101,"line_end":101,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939655,"byte_end":6939662,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939663,"byte_end":6939686,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939687,"byte_end":6939738,"line_start":104,"line_end":104,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939739,"byte_end":6939790,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939791,"byte_end":6939836,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939837,"byte_end":6939890,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939891,"byte_end":6939898,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939899,"byte_end":6939910,"line_start":109,"line_end":109,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6939911,"byte_end":6939928,"line_start":110,"line_end":110,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940514,"byte_end":6940532,"line_start":129,"line_end":129,"column_start":8,"column_end":26},"name":"cmp_ge_mask_m128_s","qualname":"::x86_x64::sse::cmp_ge_mask_m128_s","value":"pub fn cmp_ge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940081,"byte_end":6940126,"line_start":116,"line_end":116,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940127,"byte_end":6940130,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940131,"byte_end":6940147,"line_start":118,"line_end":118,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940148,"byte_end":6940155,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940156,"byte_end":6940179,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940180,"byte_end":6940231,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940232,"byte_end":6940283,"line_start":122,"line_end":122,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940284,"byte_end":6940331,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940332,"byte_end":6940413,"line_start":124,"line_end":124,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940414,"byte_end":6940421,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940422,"byte_end":6940433,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940434,"byte_end":6940451,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940978,"byte_end":6940994,"line_start":146,"line_end":146,"column_start":8,"column_end":24},"name":"cmp_gt_mask_m128","qualname":"::x86_x64::sse::cmp_gt_mask_m128","value":"pub fn cmp_gt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940606,"byte_end":6940627,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940628,"byte_end":6940631,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940632,"byte_end":6940648,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940649,"byte_end":6940656,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940657,"byte_end":6940680,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940681,"byte_end":6940732,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940733,"byte_end":6940784,"line_start":139,"line_end":139,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940785,"byte_end":6940830,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940831,"byte_end":6940877,"line_start":141,"line_end":141,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940878,"byte_end":6940885,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940886,"byte_end":6940897,"line_start":143,"line_end":143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6940898,"byte_end":6940915,"line_start":144,"line_end":144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941500,"byte_end":6941518,"line_start":163,"line_end":163,"column_start":8,"column_end":26},"name":"cmp_gt_mask_m128_s","qualname":"::x86_x64::sse::cmp_gt_mask_m128_s","value":"pub fn cmp_gt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941068,"byte_end":6941112,"line_start":150,"line_end":150,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941113,"byte_end":6941116,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941117,"byte_end":6941133,"line_start":152,"line_end":152,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941134,"byte_end":6941141,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941142,"byte_end":6941165,"line_start":154,"line_end":154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941166,"byte_end":6941217,"line_start":155,"line_end":155,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941218,"byte_end":6941269,"line_start":156,"line_end":156,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941270,"byte_end":6941317,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941318,"byte_end":6941399,"line_start":158,"line_end":158,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941400,"byte_end":6941407,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941408,"byte_end":6941419,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941420,"byte_end":6941437,"line_start":161,"line_end":161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941965,"byte_end":6941981,"line_start":180,"line_end":180,"column_start":8,"column_end":24},"name":"cmp_le_mask_m128","qualname":"::x86_x64::sse::cmp_le_mask_m128","value":"pub fn cmp_le_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941592,"byte_end":6941614,"line_start":167,"line_end":167,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941615,"byte_end":6941618,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941619,"byte_end":6941635,"line_start":169,"line_end":169,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941636,"byte_end":6941643,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941644,"byte_end":6941667,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941668,"byte_end":6941719,"line_start":172,"line_end":172,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941720,"byte_end":6941771,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941772,"byte_end":6941817,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941818,"byte_end":6941864,"line_start":175,"line_end":175,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941865,"byte_end":6941872,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941873,"byte_end":6941884,"line_start":177,"line_end":177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6941885,"byte_end":6941902,"line_start":178,"line_end":178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942488,"byte_end":6942506,"line_start":197,"line_end":197,"column_start":8,"column_end":26},"name":"cmp_le_mask_m128_s","qualname":"::x86_x64::sse::cmp_le_mask_m128_s","value":"pub fn cmp_le_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942055,"byte_end":6942100,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942101,"byte_end":6942104,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942105,"byte_end":6942121,"line_start":186,"line_end":186,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942122,"byte_end":6942129,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942130,"byte_end":6942153,"line_start":188,"line_end":188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942154,"byte_end":6942205,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942206,"byte_end":6942257,"line_start":190,"line_end":190,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942258,"byte_end":6942305,"line_start":191,"line_end":191,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942306,"byte_end":6942387,"line_start":192,"line_end":192,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942388,"byte_end":6942395,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942396,"byte_end":6942407,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942408,"byte_end":6942425,"line_start":195,"line_end":195,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942945,"byte_end":6942961,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"cmp_lt_mask_m128","qualname":"::x86_x64::sse::cmp_lt_mask_m128","value":"pub fn cmp_lt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942580,"byte_end":6942601,"line_start":201,"line_end":201,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942602,"byte_end":6942605,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942606,"byte_end":6942622,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942623,"byte_end":6942630,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942631,"byte_end":6942654,"line_start":205,"line_end":205,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942655,"byte_end":6942706,"line_start":206,"line_end":206,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942707,"byte_end":6942758,"line_start":207,"line_end":207,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942759,"byte_end":6942804,"line_start":208,"line_end":208,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942805,"byte_end":6942844,"line_start":209,"line_end":209,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942845,"byte_end":6942852,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942853,"byte_end":6942864,"line_start":211,"line_end":211,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6942865,"byte_end":6942882,"line_start":212,"line_end":212,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943467,"byte_end":6943485,"line_start":231,"line_end":231,"column_start":8,"column_end":26},"name":"cmp_lt_mask_m128_s","qualname":"::x86_x64::sse::cmp_lt_mask_m128_s","value":"pub fn cmp_lt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943035,"byte_end":6943079,"line_start":218,"line_end":218,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943080,"byte_end":6943083,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943084,"byte_end":6943100,"line_start":220,"line_end":220,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943101,"byte_end":6943108,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943109,"byte_end":6943132,"line_start":222,"line_end":222,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943133,"byte_end":6943184,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943185,"byte_end":6943236,"line_start":224,"line_end":224,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943237,"byte_end":6943284,"line_start":225,"line_end":225,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943285,"byte_end":6943366,"line_start":226,"line_end":226,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943367,"byte_end":6943374,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943375,"byte_end":6943386,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943387,"byte_end":6943404,"line_start":229,"line_end":229,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943933,"byte_end":6943950,"line_start":248,"line_end":248,"column_start":8,"column_end":25},"name":"cmp_neq_mask_m128","qualname":"::x86_x64::sse::cmp_neq_mask_m128","value":"pub fn cmp_neq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943559,"byte_end":6943581,"line_start":235,"line_end":235,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943582,"byte_end":6943585,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943586,"byte_end":6943602,"line_start":237,"line_end":237,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943603,"byte_end":6943610,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943611,"byte_end":6943634,"line_start":239,"line_end":239,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943635,"byte_end":6943686,"line_start":240,"line_end":240,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943687,"byte_end":6943738,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943739,"byte_end":6943785,"line_start":242,"line_end":242,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943786,"byte_end":6943832,"line_start":243,"line_end":243,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943833,"byte_end":6943840,"line_start":244,"line_end":244,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943841,"byte_end":6943852,"line_start":245,"line_end":245,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6943853,"byte_end":6943870,"line_start":246,"line_end":246,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944424,"byte_end":6944443,"line_start":265,"line_end":265,"column_start":8,"column_end":27},"name":"cmp_neq_mask_m128_s","qualname":"::x86_x64::sse::cmp_neq_mask_m128_s","value":"pub fn cmp_neq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944025,"byte_end":6944070,"line_start":252,"line_end":252,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944071,"byte_end":6944074,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944075,"byte_end":6944091,"line_start":254,"line_end":254,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944092,"byte_end":6944099,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944100,"byte_end":6944123,"line_start":256,"line_end":256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944124,"byte_end":6944175,"line_start":257,"line_end":257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944176,"byte_end":6944227,"line_start":258,"line_end":258,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944228,"byte_end":6944276,"line_start":259,"line_end":259,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944277,"byte_end":6944323,"line_start":260,"line_end":260,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944324,"byte_end":6944331,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944332,"byte_end":6944343,"line_start":262,"line_end":262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944344,"byte_end":6944361,"line_start":263,"line_end":263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944888,"byte_end":6944905,"line_start":282,"line_end":282,"column_start":8,"column_end":25},"name":"cmp_nge_mask_m128","qualname":"::x86_x64::sse::cmp_nge_mask_m128","value":"pub fn cmp_nge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944518,"byte_end":6944543,"line_start":269,"line_end":269,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944544,"byte_end":6944547,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944548,"byte_end":6944564,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944565,"byte_end":6944572,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944573,"byte_end":6944596,"line_start":273,"line_end":273,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944597,"byte_end":6944648,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944649,"byte_end":6944700,"line_start":275,"line_end":275,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944701,"byte_end":6944747,"line_start":276,"line_end":276,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944748,"byte_end":6944787,"line_start":277,"line_end":277,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944788,"byte_end":6944795,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944796,"byte_end":6944807,"line_start":279,"line_end":279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944808,"byte_end":6944825,"line_start":280,"line_end":280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945410,"byte_end":6945429,"line_start":299,"line_end":299,"column_start":8,"column_end":27},"name":"cmp_nge_mask_m128_s","qualname":"::x86_x64::sse::cmp_nge_mask_m128_s","value":"pub fn cmp_nge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6944980,"byte_end":6945028,"line_start":286,"line_end":286,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945029,"byte_end":6945032,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945033,"byte_end":6945049,"line_start":288,"line_end":288,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945050,"byte_end":6945057,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945058,"byte_end":6945081,"line_start":290,"line_end":290,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945082,"byte_end":6945133,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945134,"byte_end":6945185,"line_start":292,"line_end":292,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945186,"byte_end":6945234,"line_start":293,"line_end":293,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945235,"byte_end":6945309,"line_start":294,"line_end":294,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945310,"byte_end":6945317,"line_start":295,"line_end":295,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945318,"byte_end":6945329,"line_start":296,"line_end":296,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945330,"byte_end":6945347,"line_start":297,"line_end":297,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945880,"byte_end":6945897,"line_start":316,"line_end":316,"column_start":8,"column_end":25},"name":"cmp_ngt_mask_m128","qualname":"::x86_x64::sse::cmp_ngt_mask_m128","value":"pub fn cmp_ngt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945504,"byte_end":6945528,"line_start":303,"line_end":303,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945529,"byte_end":6945532,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945533,"byte_end":6945549,"line_start":305,"line_end":305,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945550,"byte_end":6945557,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945558,"byte_end":6945581,"line_start":307,"line_end":307,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945582,"byte_end":6945633,"line_start":308,"line_end":308,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945634,"byte_end":6945685,"line_start":309,"line_end":309,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945686,"byte_end":6945732,"line_start":310,"line_end":310,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945733,"byte_end":6945779,"line_start":311,"line_end":311,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945780,"byte_end":6945787,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945788,"byte_end":6945799,"line_start":313,"line_end":313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945800,"byte_end":6945817,"line_start":314,"line_end":314,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946401,"byte_end":6946420,"line_start":333,"line_end":333,"column_start":8,"column_end":27},"name":"cmp_ngt_mask_m128_s","qualname":"::x86_x64::sse::cmp_ngt_mask_m128_s","value":"pub fn cmp_ngt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6945972,"byte_end":6946019,"line_start":320,"line_end":320,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946020,"byte_end":6946023,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946024,"byte_end":6946040,"line_start":322,"line_end":322,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946041,"byte_end":6946048,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946049,"byte_end":6946072,"line_start":324,"line_end":324,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946073,"byte_end":6946124,"line_start":325,"line_end":325,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946125,"byte_end":6946176,"line_start":326,"line_end":326,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946177,"byte_end":6946225,"line_start":327,"line_end":327,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946226,"byte_end":6946300,"line_start":328,"line_end":328,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946301,"byte_end":6946308,"line_start":329,"line_end":329,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946309,"byte_end":6946320,"line_start":330,"line_end":330,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946321,"byte_end":6946338,"line_start":331,"line_end":331,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946872,"byte_end":6946889,"line_start":350,"line_end":350,"column_start":8,"column_end":25},"name":"cmp_nle_mask_m128","qualname":"::x86_x64::sse::cmp_nle_mask_m128","value":"pub fn cmp_nle_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946495,"byte_end":6946520,"line_start":337,"line_end":337,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946521,"byte_end":6946524,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946525,"byte_end":6946541,"line_start":339,"line_end":339,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946542,"byte_end":6946549,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946550,"byte_end":6946573,"line_start":341,"line_end":341,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946574,"byte_end":6946625,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946626,"byte_end":6946677,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946678,"byte_end":6946724,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946725,"byte_end":6946771,"line_start":345,"line_end":345,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946772,"byte_end":6946779,"line_start":346,"line_end":346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946780,"byte_end":6946791,"line_start":347,"line_end":347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946792,"byte_end":6946809,"line_start":348,"line_end":348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947394,"byte_end":6947413,"line_start":367,"line_end":367,"column_start":8,"column_end":27},"name":"cmp_nle_mask_m128_s","qualname":"::x86_x64::sse::cmp_nle_mask_m128_s","value":"pub fn cmp_nle_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6946964,"byte_end":6947012,"line_start":354,"line_end":354,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947013,"byte_end":6947016,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947017,"byte_end":6947033,"line_start":356,"line_end":356,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947034,"byte_end":6947041,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947042,"byte_end":6947065,"line_start":358,"line_end":358,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947066,"byte_end":6947117,"line_start":359,"line_end":359,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947118,"byte_end":6947169,"line_start":360,"line_end":360,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947170,"byte_end":6947218,"line_start":361,"line_end":361,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947219,"byte_end":6947293,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947294,"byte_end":6947301,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947302,"byte_end":6947313,"line_start":364,"line_end":364,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947314,"byte_end":6947331,"line_start":365,"line_end":365,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947871,"byte_end":6947888,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"cmp_nlt_mask_m128","qualname":"::x86_x64::sse::cmp_nlt_mask_m128","value":"pub fn cmp_nlt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947488,"byte_end":6947512,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947513,"byte_end":6947516,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947517,"byte_end":6947533,"line_start":373,"line_end":373,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947534,"byte_end":6947541,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947542,"byte_end":6947565,"line_start":375,"line_end":375,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947566,"byte_end":6947617,"line_start":376,"line_end":376,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947618,"byte_end":6947669,"line_start":377,"line_end":377,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947670,"byte_end":6947716,"line_start":378,"line_end":378,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947717,"byte_end":6947770,"line_start":379,"line_end":379,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947771,"byte_end":6947778,"line_start":380,"line_end":380,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947779,"byte_end":6947790,"line_start":381,"line_end":381,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947791,"byte_end":6947808,"line_start":382,"line_end":382,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948392,"byte_end":6948411,"line_start":401,"line_end":401,"column_start":8,"column_end":27},"name":"cmp_nlt_mask_m128_s","qualname":"::x86_x64::sse::cmp_nlt_mask_m128_s","value":"pub fn cmp_nlt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6947963,"byte_end":6948010,"line_start":388,"line_end":388,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948011,"byte_end":6948014,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948015,"byte_end":6948031,"line_start":390,"line_end":390,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948032,"byte_end":6948039,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948040,"byte_end":6948063,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948064,"byte_end":6948115,"line_start":393,"line_end":393,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948116,"byte_end":6948167,"line_start":394,"line_end":394,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948168,"byte_end":6948216,"line_start":395,"line_end":395,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948217,"byte_end":6948291,"line_start":396,"line_end":396,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948292,"byte_end":6948299,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948300,"byte_end":6948311,"line_start":398,"line_end":398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948312,"byte_end":6948329,"line_start":399,"line_end":399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948901,"byte_end":6948923,"line_start":418,"line_end":418,"column_start":8,"column_end":30},"name":"cmp_ordinary_mask_m128","qualname":"::x86_x64::sse::cmp_ordinary_mask_m128","value":"pub fn cmp_ordinary_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948486,"byte_end":6948531,"line_start":405,"line_end":405,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948532,"byte_end":6948535,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948536,"byte_end":6948552,"line_start":407,"line_end":407,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948553,"byte_end":6948560,"line_start":408,"line_end":408,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948561,"byte_end":6948584,"line_start":409,"line_end":409,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948585,"byte_end":6948646,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948647,"byte_end":6948708,"line_start":411,"line_end":411,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_ordinary_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948709,"byte_end":6948760,"line_start":412,"line_end":412,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948761,"byte_end":6948800,"line_start":413,"line_end":413,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948801,"byte_end":6948808,"line_start":414,"line_end":414,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948809,"byte_end":6948820,"line_start":415,"line_end":415,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948821,"byte_end":6948838,"line_start":416,"line_end":416,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949475,"byte_end":6949499,"line_start":435,"line_end":435,"column_start":8,"column_end":32},"name":"cmp_ordinary_mask_m128_s","qualname":"::x86_x64::sse::cmp_ordinary_mask_m128_s","value":"pub fn cmp_ordinary_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6948998,"byte_end":6949066,"line_start":422,"line_end":422,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949067,"byte_end":6949070,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949071,"byte_end":6949087,"line_start":424,"line_end":424,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949088,"byte_end":6949095,"line_start":425,"line_end":425,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949096,"byte_end":6949119,"line_start":426,"line_end":426,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949120,"byte_end":6949171,"line_start":427,"line_end":427,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949172,"byte_end":6949238,"line_start":428,"line_end":428,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_ordinary_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949239,"byte_end":6949292,"line_start":429,"line_end":429,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949293,"byte_end":6949374,"line_start":430,"line_end":430,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949375,"byte_end":6949382,"line_start":431,"line_end":431,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949383,"byte_end":6949394,"line_start":432,"line_end":432,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949395,"byte_end":6949412,"line_start":433,"line_end":433,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949994,"byte_end":6950013,"line_start":452,"line_end":452,"column_start":8,"column_end":27},"name":"cmp_unord_mask_m128","qualname":"::x86_x64::sse::cmp_unord_mask_m128","value":"pub fn cmp_unord_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949574,"byte_end":6949613,"line_start":439,"line_end":439,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949614,"byte_end":6949617,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949618,"byte_end":6949634,"line_start":441,"line_end":441,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949635,"byte_end":6949642,"line_start":442,"line_end":442,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949643,"byte_end":6949666,"line_start":443,"line_end":443,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949667,"byte_end":6949728,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949729,"byte_end":6949790,"line_start":445,"line_end":445,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_unord_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949791,"byte_end":6949839,"line_start":446,"line_end":446,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949840,"byte_end":6949893,"line_start":447,"line_end":447,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949894,"byte_end":6949901,"line_start":448,"line_end":448,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949902,"byte_end":6949913,"line_start":449,"line_end":449,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6949914,"byte_end":6949931,"line_start":450,"line_end":450,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950551,"byte_end":6950572,"line_start":469,"line_end":469,"column_start":8,"column_end":29},"name":"cmp_unord_mask_m128_s","qualname":"::x86_x64::sse::cmp_unord_mask_m128_s","value":"pub fn cmp_unord_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950090,"byte_end":6950152,"line_start":456,"line_end":456,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950153,"byte_end":6950156,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950157,"byte_end":6950173,"line_start":458,"line_end":458,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950174,"byte_end":6950181,"line_start":459,"line_end":459,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950182,"byte_end":6950205,"line_start":460,"line_end":460,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950206,"byte_end":6950257,"line_start":461,"line_end":461,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950258,"byte_end":6950324,"line_start":462,"line_end":462,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_unord_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950325,"byte_end":6950375,"line_start":463,"line_end":463,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950376,"byte_end":6950450,"line_start":464,"line_end":464,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950451,"byte_end":6950458,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950459,"byte_end":6950470,"line_start":466,"line_end":466,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950471,"byte_end":6950488,"line_start":467,"line_end":467,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950978,"byte_end":6950995,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_i32_m128_s","qualname":"::x86_x64::sse::cmp_eq_i32_m128_s","value":"pub fn cmp_eq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane equality.","sig":null,"attributes":[{"value":"/ Low lane equality.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950649,"byte_end":6950671,"line_start":473,"line_end":473,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950672,"byte_end":6950675,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950676,"byte_end":6950693,"line_start":475,"line_end":475,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950694,"byte_end":6950701,"line_start":476,"line_end":476,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950702,"byte_end":6950725,"line_start":477,"line_end":477,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950726,"byte_end":6950777,"line_start":478,"line_end":478,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950778,"byte_end":6950829,"line_start":479,"line_end":479,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950830,"byte_end":6950877,"line_start":480,"line_end":480,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950878,"byte_end":6950885,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950886,"byte_end":6950897,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6950898,"byte_end":6950915,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951408,"byte_end":6951425,"line_start":501,"line_end":501,"column_start":8,"column_end":25},"name":"cmp_ge_i32_m128_s","qualname":"::x86_x64::sse::cmp_ge_i32_m128_s","value":"pub fn cmp_ge_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane greater than or equal to.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951063,"byte_end":6951101,"line_start":489,"line_end":489,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951102,"byte_end":6951105,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951106,"byte_end":6951123,"line_start":491,"line_end":491,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951124,"byte_end":6951131,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951132,"byte_end":6951155,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951156,"byte_end":6951207,"line_start":494,"line_end":494,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951208,"byte_end":6951259,"line_start":495,"line_end":495,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951260,"byte_end":6951307,"line_start":496,"line_end":496,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951308,"byte_end":6951315,"line_start":497,"line_end":497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951316,"byte_end":6951327,"line_start":498,"line_end":498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951328,"byte_end":6951345,"line_start":499,"line_end":499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951826,"byte_end":6951843,"line_start":517,"line_end":517,"column_start":8,"column_end":25},"name":"cmp_gt_i32_m128_s","qualname":"::x86_x64::sse::cmp_gt_i32_m128_s","value":"pub fn cmp_gt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than.","sig":null,"attributes":[{"value":"/ Low lane greater than.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951493,"byte_end":6951519,"line_start":505,"line_end":505,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951520,"byte_end":6951523,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951524,"byte_end":6951541,"line_start":507,"line_end":507,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951542,"byte_end":6951549,"line_start":508,"line_end":508,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951550,"byte_end":6951573,"line_start":509,"line_end":509,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951574,"byte_end":6951625,"line_start":510,"line_end":510,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951626,"byte_end":6951677,"line_start":511,"line_end":511,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_gt_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951678,"byte_end":6951725,"line_start":512,"line_end":512,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951726,"byte_end":6951733,"line_start":513,"line_end":513,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951734,"byte_end":6951745,"line_start":514,"line_end":514,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951746,"byte_end":6951763,"line_start":515,"line_end":515,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952253,"byte_end":6952270,"line_start":533,"line_end":533,"column_start":8,"column_end":25},"name":"cmp_le_i32_m128_s","qualname":"::x86_x64::sse::cmp_le_i32_m128_s","value":"pub fn cmp_le_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane less than or equal to.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951911,"byte_end":6951946,"line_start":521,"line_end":521,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951947,"byte_end":6951950,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951951,"byte_end":6951968,"line_start":523,"line_end":523,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951969,"byte_end":6951976,"line_start":524,"line_end":524,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6951977,"byte_end":6952000,"line_start":525,"line_end":525,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952001,"byte_end":6952052,"line_start":526,"line_end":526,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952053,"byte_end":6952104,"line_start":527,"line_end":527,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952105,"byte_end":6952152,"line_start":528,"line_end":528,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952153,"byte_end":6952160,"line_start":529,"line_end":529,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952161,"byte_end":6952172,"line_start":530,"line_end":530,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952173,"byte_end":6952190,"line_start":531,"line_end":531,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952668,"byte_end":6952685,"line_start":549,"line_end":549,"column_start":8,"column_end":25},"name":"cmp_lt_i32_m128_s","qualname":"::x86_x64::sse::cmp_lt_i32_m128_s","value":"pub fn cmp_lt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than.","sig":null,"attributes":[{"value":"/ Low lane less than.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952338,"byte_end":6952361,"line_start":537,"line_end":537,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952362,"byte_end":6952365,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952366,"byte_end":6952383,"line_start":539,"line_end":539,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952384,"byte_end":6952391,"line_start":540,"line_end":540,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952392,"byte_end":6952415,"line_start":541,"line_end":541,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952416,"byte_end":6952467,"line_start":542,"line_end":542,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952468,"byte_end":6952519,"line_start":543,"line_end":543,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952520,"byte_end":6952567,"line_start":544,"line_end":544,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952568,"byte_end":6952575,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952576,"byte_end":6952587,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952588,"byte_end":6952605,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953087,"byte_end":6953105,"line_start":565,"line_end":565,"column_start":8,"column_end":26},"name":"cmp_neq_i32_m128_s","qualname":"::x86_x64::sse::cmp_neq_i32_m128_s","value":"pub fn cmp_neq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane not equal to.","sig":null,"attributes":[{"value":"/ Low lane not equal to.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952753,"byte_end":6952779,"line_start":553,"line_end":553,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952780,"byte_end":6952783,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952784,"byte_end":6952801,"line_start":555,"line_end":555,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952802,"byte_end":6952809,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952810,"byte_end":6952833,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952834,"byte_end":6952885,"line_start":558,"line_end":558,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952886,"byte_end":6952937,"line_start":559,"line_end":559,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(0_i32, cmp_neq_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952938,"byte_end":6952986,"line_start":560,"line_end":560,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952987,"byte_end":6952994,"line_start":561,"line_end":561,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6952995,"byte_end":6953006,"line_start":562,"line_end":562,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953007,"byte_end":6953024,"line_start":563,"line_end":563,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953606,"byte_end":6953632,"line_start":581,"line_end":581,"column_start":8,"column_end":34},"name":"convert_i32_replace_m128_s","qualname":"::x86_x64::sse::convert_i32_replace_m128_s","value":"pub fn convert_i32_replace_m128_s(m128, i32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f32` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = convert_i32_replace_m128_s(a, 5_i32).to_array();\n assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_ss`]\n * **Assembly:** `cvtsi2ss xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f32` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953174,"byte_end":6953239,"line_start":569,"line_end":569,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953240,"byte_end":6953247,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953248,"byte_end":6953271,"line_start":571,"line_end":571,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953272,"byte_end":6953323,"line_start":572,"line_end":572,"column_start":1,"column_end":52}},{"value":"/ let b = convert_i32_replace_m128_s(a, 5_i32).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953324,"byte_end":6953384,"line_start":573,"line_end":573,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953385,"byte_end":6953425,"line_start":574,"line_end":574,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953426,"byte_end":6953433,"line_start":575,"line_end":575,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_ss`]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953434,"byte_end":6953473,"line_start":576,"line_end":576,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2ss xmm, r32`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953474,"byte_end":6953513,"line_start":577,"line_end":577,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953514,"byte_end":6953525,"line_start":578,"line_end":578,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6953526,"byte_end":6953543,"line_start":579,"line_end":579,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954543,"byte_end":6954562,"line_start":611,"line_end":611,"column_start":8,"column_end":27},"name":"get_f32_from_m128_s","qualname":"::x86_x64::sse::get_f32_from_m128_s","value":"pub fn get_f32_from_m128_s(m128) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the low lane as an individual `f32` value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_f32, get_f32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Gets the low lane as an individual `f32` value.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954260,"byte_end":6954311,"line_start":602,"line_end":602,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954312,"byte_end":6954319,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954320,"byte_end":6954343,"line_start":604,"line_end":604,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954344,"byte_end":6954395,"line_start":605,"line_end":605,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_f32, get_f32_from_m128_s(a));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954396,"byte_end":6954442,"line_start":606,"line_end":606,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954443,"byte_end":6954450,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954451,"byte_end":6954462,"line_start":608,"line_end":608,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954463,"byte_end":6954480,"line_start":609,"line_end":609,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954919,"byte_end":6954938,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"get_i32_from_m128_s","qualname":"::x86_x64::sse::get_i32_from_m128_s","value":"pub fn get_i32_from_m128_s(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the low lane to `i32` and extracts as an individual value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_i32, get_i32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Converts the low lane to `i32` and extracts as an individual value.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954616,"byte_end":6954687,"line_start":615,"line_end":615,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954688,"byte_end":6954695,"line_start":616,"line_end":616,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954696,"byte_end":6954719,"line_start":617,"line_end":617,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954720,"byte_end":6954771,"line_start":618,"line_end":618,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, get_i32_from_m128_s(a));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954772,"byte_end":6954818,"line_start":619,"line_end":619,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954819,"byte_end":6954826,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954827,"byte_end":6954838,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6954839,"byte_end":6954856,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955738,"byte_end":6955746,"line_start":653,"line_end":653,"column_start":8,"column_end":16},"name":"div_m128","qualname":"::x86_x64::sse::div_m128","value":"pub fn div_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955395,"byte_end":6955416,"line_start":642,"line_end":642,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955417,"byte_end":6955424,"line_start":643,"line_end":643,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955425,"byte_end":6955448,"line_start":644,"line_end":644,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955449,"byte_end":6955504,"line_start":645,"line_end":645,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955505,"byte_end":6955557,"line_start":646,"line_end":646,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955558,"byte_end":6955596,"line_start":647,"line_end":647,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955597,"byte_end":6955637,"line_start":648,"line_end":648,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955638,"byte_end":6955645,"line_start":649,"line_end":649,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955646,"byte_end":6955657,"line_start":650,"line_end":650,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955658,"byte_end":6955675,"line_start":651,"line_end":651,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956189,"byte_end":6956199,"line_start":668,"line_end":668,"column_start":8,"column_end":18},"name":"div_m128_s","qualname":"::x86_x64::sse::div_m128_s","value":"pub fn div_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a / b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a / b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955818,"byte_end":6955862,"line_start":657,"line_end":657,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955863,"byte_end":6955870,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955871,"byte_end":6955894,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955895,"byte_end":6955950,"line_start":660,"line_end":660,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6955951,"byte_end":6956003,"line_start":661,"line_end":661,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956004,"byte_end":6956044,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956045,"byte_end":6956088,"line_start":663,"line_end":663,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956089,"byte_end":6956096,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956097,"byte_end":6956108,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956109,"byte_end":6956126,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956569,"byte_end":6956578,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"load_m128","qualname":"::x86_x64::sse::load_m128","value":"pub fn load_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_m128(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956271,"byte_end":6956311,"line_start":672,"line_end":672,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956312,"byte_end":6956319,"line_start":673,"line_end":673,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956320,"byte_end":6956343,"line_start":674,"line_end":674,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956344,"byte_end":6956399,"line_start":675,"line_end":675,"column_start":1,"column_end":56}},{"value":"/ let b = load_m128(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956400,"byte_end":6956426,"line_start":676,"line_end":676,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956427,"byte_end":6956468,"line_start":677,"line_end":677,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956469,"byte_end":6956476,"line_start":678,"line_end":678,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956477,"byte_end":6956488,"line_start":679,"line_end":679,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956489,"byte_end":6956506,"line_start":680,"line_end":680,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957035,"byte_end":6957054,"line_start":697,"line_end":697,"column_start":8,"column_end":27},"name":"load_f32_splat_m128","qualname":"::x86_x64::sse::load_f32_splat_m128","value":"pub fn load_f32_splat_m128(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_splat_m128(&a);\n assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into all lanes of a register.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956665,"byte_end":6956724,"line_start":686,"line_end":686,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956725,"byte_end":6956732,"line_start":687,"line_end":687,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956733,"byte_end":6956756,"line_start":688,"line_end":688,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956757,"byte_end":6956773,"line_start":689,"line_end":689,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_splat_m128(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956774,"byte_end":6956810,"line_start":690,"line_end":690,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956811,"byte_end":6956889,"line_start":691,"line_end":691,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956890,"byte_end":6956897,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956898,"byte_end":6956909,"line_start":693,"line_end":693,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956910,"byte_end":6956927,"line_start":694,"line_end":694,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6956928,"byte_end":6956972,"line_start":695,"line_end":695,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957543,"byte_end":6957558,"line_start":713,"line_end":713,"column_start":8,"column_end":23},"name":"load_f32_m128_s","qualname":"::x86_x64::sse::load_f32_m128_s","value":"pub fn load_f32_m128_s(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_m128_s(&a);\n assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into the low lane of the register.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957172,"byte_end":6957236,"line_start":702,"line_end":702,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957237,"byte_end":6957244,"line_start":703,"line_end":703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957245,"byte_end":6957268,"line_start":704,"line_end":704,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957269,"byte_end":6957285,"line_start":705,"line_end":705,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_m128_s(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957286,"byte_end":6957318,"line_start":706,"line_end":706,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957319,"byte_end":6957397,"line_start":707,"line_end":707,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957398,"byte_end":6957405,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957406,"byte_end":6957417,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957418,"byte_end":6957435,"line_start":710,"line_end":710,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957436,"byte_end":6957480,"line_start":711,"line_end":711,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957982,"byte_end":6957999,"line_start":727,"line_end":727,"column_start":8,"column_end":25},"name":"load_reverse_m128","qualname":"::x86_x64::sse::load_reverse_m128","value":"pub fn load_reverse_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_reverse_m128(&a);\n assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957615,"byte_end":6957675,"line_start":717,"line_end":717,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957676,"byte_end":6957683,"line_start":718,"line_end":718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957684,"byte_end":6957707,"line_start":719,"line_end":719,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957708,"byte_end":6957763,"line_start":720,"line_end":720,"column_start":1,"column_end":56}},{"value":"/ let b = load_reverse_m128(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957764,"byte_end":6957798,"line_start":721,"line_end":721,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957799,"byte_end":6957881,"line_start":722,"line_end":722,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957882,"byte_end":6957889,"line_start":723,"line_end":723,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957890,"byte_end":6957901,"line_start":724,"line_end":724,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6957902,"byte_end":6957919,"line_start":725,"line_end":725,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958572,"byte_end":6958591,"line_start":745,"line_end":745,"column_start":8,"column_end":27},"name":"load_unaligned_m128","qualname":"::x86_x64::sse::load_unaligned_m128","value":"pub fn load_unaligned_m128(&[f32; ]) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958087,"byte_end":6958127,"line_start":731,"line_end":731,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958128,"byte_end":6958131,"line_start":732,"line_end":732,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958132,"byte_end":6958210,"line_start":733,"line_end":733,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958211,"byte_end":6958291,"line_start":734,"line_end":734,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958292,"byte_end":6958304,"line_start":735,"line_end":735,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958305,"byte_end":6958312,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958313,"byte_end":6958336,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0, 13.0, 14.0];","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958337,"byte_end":6958374,"line_start":738,"line_end":738,"column_start":1,"column_end":38}},{"value":"/ let b = load_unaligned_m128(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958375,"byte_end":6958411,"line_start":739,"line_end":739,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958412,"byte_end":6958471,"line_start":740,"line_end":740,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958472,"byte_end":6958479,"line_start":741,"line_end":741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958480,"byte_end":6958491,"line_start":742,"line_end":742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958492,"byte_end":6958509,"line_start":743,"line_end":743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959031,"byte_end":6959039,"line_start":760,"line_end":760,"column_start":8,"column_end":16},"name":"max_m128","qualname":"::x86_x64::sse::max_m128","value":"pub fn max_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958687,"byte_end":6958712,"line_start":749,"line_end":749,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958713,"byte_end":6958720,"line_start":750,"line_end":750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958721,"byte_end":6958744,"line_start":751,"line_end":751,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958745,"byte_end":6958797,"line_start":752,"line_end":752,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958798,"byte_end":6958849,"line_start":753,"line_end":753,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958850,"byte_end":6958888,"line_start":754,"line_end":754,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958889,"byte_end":6958930,"line_start":755,"line_end":755,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958931,"byte_end":6958938,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958939,"byte_end":6958950,"line_start":757,"line_end":757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6958951,"byte_end":6958968,"line_start":758,"line_end":758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959480,"byte_end":6959490,"line_start":775,"line_end":775,"column_start":8,"column_end":18},"name":"max_m128_s","qualname":"::x86_x64::sse::max_m128_s","value":"pub fn max_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959111,"byte_end":6959159,"line_start":764,"line_end":764,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959160,"byte_end":6959167,"line_start":765,"line_end":765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959168,"byte_end":6959191,"line_start":766,"line_end":766,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959192,"byte_end":6959244,"line_start":767,"line_end":767,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959245,"byte_end":6959296,"line_start":768,"line_end":768,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959297,"byte_end":6959337,"line_start":769,"line_end":769,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959338,"byte_end":6959379,"line_start":770,"line_end":770,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959380,"byte_end":6959387,"line_start":771,"line_end":771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959388,"byte_end":6959399,"line_start":772,"line_end":772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959400,"byte_end":6959417,"line_start":773,"line_end":773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959905,"byte_end":6959913,"line_start":790,"line_end":790,"column_start":8,"column_end":16},"name":"min_m128","qualname":"::x86_x64::sse::min_m128","value":"pub fn min_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = min_m128(a, b).to_array();\n assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959562,"byte_end":6959587,"line_start":779,"line_end":779,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959588,"byte_end":6959595,"line_start":780,"line_end":780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959596,"byte_end":6959619,"line_start":781,"line_end":781,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959620,"byte_end":6959672,"line_start":782,"line_end":782,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959673,"byte_end":6959724,"line_start":783,"line_end":783,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959725,"byte_end":6959763,"line_start":784,"line_end":784,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959764,"byte_end":6959804,"line_start":785,"line_end":785,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959805,"byte_end":6959812,"line_start":786,"line_end":786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959813,"byte_end":6959824,"line_start":787,"line_end":787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959825,"byte_end":6959842,"line_start":788,"line_end":788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960354,"byte_end":6960364,"line_start":805,"line_end":805,"column_start":8,"column_end":18},"name":"min_m128_s","qualname":"::x86_x64::sse::min_m128_s","value":"pub fn min_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);\n let c = min_m128_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6959985,"byte_end":6960033,"line_start":794,"line_end":794,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960034,"byte_end":6960041,"line_start":795,"line_end":795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960042,"byte_end":6960065,"line_start":796,"line_end":796,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960066,"byte_end":6960118,"line_start":797,"line_end":797,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960119,"byte_end":6960170,"line_start":798,"line_end":798,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960171,"byte_end":6960211,"line_start":799,"line_end":799,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960212,"byte_end":6960253,"line_start":800,"line_end":800,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960254,"byte_end":6960261,"line_start":801,"line_end":801,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960262,"byte_end":6960273,"line_start":802,"line_end":802,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960274,"byte_end":6960291,"line_start":803,"line_end":803,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960817,"byte_end":6960828,"line_start":820,"line_end":820,"column_start":8,"column_end":19},"name":"move_m128_s","qualname":"::x86_x64::sse::move_m128_s","value":"pub fn move_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lane of `b` to `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_m128_s(a, b).to_array();\n assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lane of `b` to `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960436,"byte_end":6960495,"line_start":809,"line_end":809,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960496,"byte_end":6960503,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960504,"byte_end":6960527,"line_start":811,"line_end":811,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960528,"byte_end":6960580,"line_start":812,"line_end":812,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960581,"byte_end":6960632,"line_start":813,"line_end":813,"column_start":1,"column_end":52}},{"value":"/ let c = move_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960633,"byte_end":6960674,"line_start":814,"line_end":814,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960675,"byte_end":6960716,"line_start":815,"line_end":815,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960717,"byte_end":6960724,"line_start":816,"line_end":816,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960725,"byte_end":6960736,"line_start":817,"line_end":817,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960737,"byte_end":6960754,"line_start":818,"line_end":818,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961307,"byte_end":6961325,"line_start":835,"line_end":835,"column_start":8,"column_end":26},"name":"move_high_low_m128","qualname":"::x86_x64::sse::move_high_low_m128","value":"pub fn move_high_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_high_low_m128(a, b).to_array();\n assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960901,"byte_end":6960979,"line_start":824,"line_end":824,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960980,"byte_end":6960987,"line_start":825,"line_end":825,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6960988,"byte_end":6961011,"line_start":826,"line_end":826,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961012,"byte_end":6961064,"line_start":827,"line_end":827,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961065,"byte_end":6961116,"line_start":828,"line_end":828,"column_start":1,"column_end":52}},{"value":"/ let c = move_high_low_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961117,"byte_end":6961165,"line_start":829,"line_end":829,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961166,"byte_end":6961206,"line_start":830,"line_end":830,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961207,"byte_end":6961214,"line_start":831,"line_end":831,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961215,"byte_end":6961226,"line_start":832,"line_end":832,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961227,"byte_end":6961244,"line_start":833,"line_end":833,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961807,"byte_end":6961825,"line_start":850,"line_end":850,"column_start":8,"column_end":26},"name":"move_low_high_m128","qualname":"::x86_x64::sse::move_low_high_m128","value":"pub fn move_low_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_low_high_m128(a, b).to_array();\n assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961400,"byte_end":6961478,"line_start":839,"line_end":839,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961479,"byte_end":6961486,"line_start":840,"line_end":840,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961487,"byte_end":6961510,"line_start":841,"line_end":841,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961511,"byte_end":6961563,"line_start":842,"line_end":842,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961564,"byte_end":6961615,"line_start":843,"line_end":843,"column_start":1,"column_end":52}},{"value":"/ let c = move_low_high_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961616,"byte_end":6961664,"line_start":844,"line_end":844,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961665,"byte_end":6961706,"line_start":845,"line_end":845,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961707,"byte_end":6961714,"line_start":846,"line_end":846,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961715,"byte_end":6961726,"line_start":847,"line_end":847,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961727,"byte_end":6961744,"line_start":848,"line_end":848,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962253,"byte_end":6962267,"line_start":866,"line_end":866,"column_start":8,"column_end":22},"name":"move_mask_m128","qualname":"::x86_x64::sse::move_mask_m128","value":"pub fn move_mask_m128(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961900,"byte_end":6961938,"line_start":854,"line_end":854,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961939,"byte_end":6961942,"line_start":855,"line_end":855,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6961943,"byte_end":6962006,"line_start":856,"line_end":856,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962007,"byte_end":6962014,"line_start":857,"line_end":857,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962015,"byte_end":6962038,"line_start":858,"line_end":858,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([-1.0, 12.0, -3.0, -4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962039,"byte_end":6962094,"line_start":859,"line_end":859,"column_start":1,"column_end":56}},{"value":"/ let i = move_mask_m128(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962095,"byte_end":6962125,"line_start":860,"line_end":860,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(i, 0b1101);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962126,"byte_end":6962152,"line_start":861,"line_end":861,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962153,"byte_end":6962160,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962161,"byte_end":6962172,"line_start":863,"line_end":863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962173,"byte_end":6962190,"line_start":864,"line_end":864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962664,"byte_end":6962672,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"mul_m128","qualname":"::x86_x64::sse::mul_m128","value":"pub fn mul_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962323,"byte_end":6962344,"line_start":870,"line_end":870,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962345,"byte_end":6962352,"line_start":871,"line_end":871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962353,"byte_end":6962376,"line_start":872,"line_end":872,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962377,"byte_end":6962428,"line_start":873,"line_end":873,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962429,"byte_end":6962480,"line_start":874,"line_end":874,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962481,"byte_end":6962519,"line_start":875,"line_end":875,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962520,"byte_end":6962563,"line_start":876,"line_end":876,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962564,"byte_end":6962571,"line_start":877,"line_end":877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962572,"byte_end":6962583,"line_start":878,"line_end":878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962584,"byte_end":6962601,"line_start":879,"line_end":879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963107,"byte_end":6963117,"line_start":896,"line_end":896,"column_start":8,"column_end":18},"name":"mul_m128_s","qualname":"::x86_x64::sse::mul_m128_s","value":"pub fn mul_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a * b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a * b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962744,"byte_end":6962788,"line_start":885,"line_end":885,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962789,"byte_end":6962796,"line_start":886,"line_end":886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962797,"byte_end":6962820,"line_start":887,"line_end":887,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962821,"byte_end":6962872,"line_start":888,"line_end":888,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962873,"byte_end":6962924,"line_start":889,"line_end":889,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962925,"byte_end":6962965,"line_start":890,"line_end":890,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6962966,"byte_end":6963006,"line_start":891,"line_end":891,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963007,"byte_end":6963014,"line_start":892,"line_end":892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963015,"byte_end":6963026,"line_start":893,"line_end":893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963027,"byte_end":6963044,"line_start":894,"line_end":894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963528,"byte_end":6963538,"line_start":911,"line_end":911,"column_start":8,"column_end":18},"name":"bitor_m128","qualname":"::x86_x64::sse::bitor_m128","value":"pub fn bitor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitor_m128(a, b).to_array();\n assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963189,"byte_end":6963209,"line_start":900,"line_end":900,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963210,"byte_end":6963217,"line_start":901,"line_end":901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963218,"byte_end":6963241,"line_start":902,"line_end":902,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963242,"byte_end":6963293,"line_start":903,"line_end":903,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963294,"byte_end":6963345,"line_start":904,"line_end":904,"column_start":1,"column_end":52}},{"value":"/ let c = bitor_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963346,"byte_end":6963386,"line_start":905,"line_end":905,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963387,"byte_end":6963427,"line_start":906,"line_end":906,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963428,"byte_end":6963435,"line_start":907,"line_end":907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963436,"byte_end":6963447,"line_start":908,"line_end":908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963448,"byte_end":6963465,"line_start":909,"line_end":909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963995,"byte_end":6964010,"line_start":928,"line_end":928,"column_start":8,"column_end":23},"name":"reciprocal_m128","qualname":"::x86_x64::sse::reciprocal_m128","value":"pub fn reciprocal_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / a` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128(a).to_array();\n let expected = [1.0, 0.5, 0.25, 0.125];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / a` approximation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963609,"byte_end":6963646,"line_start":915,"line_end":915,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963647,"byte_end":6963654,"line_start":916,"line_end":916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963655,"byte_end":6963678,"line_start":917,"line_end":917,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963679,"byte_end":6963730,"line_start":918,"line_end":918,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128(a).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963731,"byte_end":6963773,"line_start":919,"line_end":919,"column_start":1,"column_end":43}},{"value":"/ let expected = [1.0, 0.5, 0.25, 0.125];","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963774,"byte_end":6963817,"line_start":920,"line_end":920,"column_start":1,"column_end":44}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963818,"byte_end":6963837,"line_start":921,"line_end":921,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963838,"byte_end":6963888,"line_start":922,"line_end":922,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963889,"byte_end":6963894,"line_start":923,"line_end":923,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963895,"byte_end":6963902,"line_start":924,"line_end":924,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963903,"byte_end":6963914,"line_start":925,"line_end":925,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6963915,"byte_end":6963932,"line_start":926,"line_end":926,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964476,"byte_end":6964493,"line_start":945,"line_end":945,"column_start":8,"column_end":25},"name":"reciprocal_m128_s","qualname":"::x86_x64::sse::reciprocal_m128_s","value":"pub fn reciprocal_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / a` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128_s(a).to_array();\n let expected = [1.0, 2.0, 4.0, 8.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / a` approximation, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964068,"byte_end":6964128,"line_start":932,"line_end":932,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964129,"byte_end":6964136,"line_start":933,"line_end":933,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964137,"byte_end":6964160,"line_start":934,"line_end":934,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964161,"byte_end":6964212,"line_start":935,"line_end":935,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964213,"byte_end":6964257,"line_start":936,"line_end":936,"column_start":1,"column_end":45}},{"value":"/ let expected = [1.0, 2.0, 4.0, 8.0];","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964258,"byte_end":6964298,"line_start":937,"line_end":937,"column_start":1,"column_end":41}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964299,"byte_end":6964318,"line_start":938,"line_end":938,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964319,"byte_end":6964369,"line_start":939,"line_end":939,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964370,"byte_end":6964375,"line_start":940,"line_end":940,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964376,"byte_end":6964383,"line_start":941,"line_end":941,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964384,"byte_end":6964395,"line_start":942,"line_end":942,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964396,"byte_end":6964413,"line_start":943,"line_end":943,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964952,"byte_end":6964972,"line_start":962,"line_end":962,"column_start":8,"column_end":28},"name":"reciprocal_sqrt_m128","qualname":"::x86_x64::sse::reciprocal_sqrt_m128","value":"pub fn reciprocal_sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / sqrt(a)` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);\n let b = reciprocal_sqrt_m128(a).to_array();\n let expected = [0.25, 0.33333, 0.5, 0.2];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / sqrt(a)` approximation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964551,"byte_end":6964594,"line_start":949,"line_end":949,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964595,"byte_end":6964602,"line_start":950,"line_end":950,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964603,"byte_end":6964626,"line_start":951,"line_end":951,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964627,"byte_end":6964680,"line_start":952,"line_end":952,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128(a).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964681,"byte_end":6964728,"line_start":953,"line_end":953,"column_start":1,"column_end":48}},{"value":"/ let expected = [0.25, 0.33333, 0.5, 0.2];","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964729,"byte_end":6964774,"line_start":954,"line_end":954,"column_start":1,"column_end":46}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964775,"byte_end":6964794,"line_start":955,"line_end":955,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964795,"byte_end":6964845,"line_start":956,"line_end":956,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964846,"byte_end":6964851,"line_start":957,"line_end":957,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964852,"byte_end":6964859,"line_start":958,"line_end":958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964860,"byte_end":6964871,"line_start":959,"line_end":959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6964872,"byte_end":6964889,"line_start":960,"line_end":960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965455,"byte_end":6965477,"line_start":979,"line_end":979,"column_start":8,"column_end":30},"name":"reciprocal_sqrt_m128_s","qualname":"::x86_x64::sse::reciprocal_sqrt_m128_s","value":"pub fn reciprocal_sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);\n let b = reciprocal_sqrt_m128_s(a).to_array();\n let expected = [0.25, 8.0, 9.0, 10.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965032,"byte_end":6965098,"line_start":966,"line_end":966,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965099,"byte_end":6965106,"line_start":967,"line_end":967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965107,"byte_end":6965130,"line_start":968,"line_end":968,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965131,"byte_end":6965184,"line_start":969,"line_end":969,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965185,"byte_end":6965234,"line_start":970,"line_end":970,"column_start":1,"column_end":50}},{"value":"/ let expected = [0.25, 8.0, 9.0, 10.0];","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965235,"byte_end":6965277,"line_start":971,"line_end":971,"column_start":1,"column_end":43}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965278,"byte_end":6965297,"line_start":972,"line_end":972,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965298,"byte_end":6965348,"line_start":973,"line_end":973,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965349,"byte_end":6965354,"line_start":974,"line_end":974,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965355,"byte_end":6965362,"line_start":975,"line_end":975,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965363,"byte_end":6965374,"line_start":976,"line_end":976,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965375,"byte_end":6965392,"line_start":977,"line_end":977,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965869,"byte_end":6965877,"line_start":993,"line_end":993,"column_start":8,"column_end":16},"name":"set_m128","qualname":"::x86_x64::sse::set_m128","value":"pub fn set_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965537,"byte_end":6965598,"line_start":983,"line_end":983,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965599,"byte_end":6965606,"line_start":984,"line_end":984,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965607,"byte_end":6965630,"line_start":985,"line_end":985,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965631,"byte_end":6965683,"line_start":986,"line_end":986,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965684,"byte_end":6965746,"line_start":987,"line_end":987,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965747,"byte_end":6965768,"line_start":988,"line_end":988,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965769,"byte_end":6965776,"line_start":989,"line_end":989,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965777,"byte_end":6965788,"line_start":990,"line_end":990,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965789,"byte_end":6965806,"line_start":991,"line_end":991,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966306,"byte_end":6966316,"line_start":1007,"line_end":1007,"column_start":8,"column_end":18},"name":"set_m128_s","qualname":"::x86_x64::sse::set_m128_s","value":"pub fn set_m128_s(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128_s(1.0).to_array();\n let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6965987,"byte_end":6966048,"line_start":997,"line_end":997,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966049,"byte_end":6966056,"line_start":998,"line_end":998,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966057,"byte_end":6966080,"line_start":999,"line_end":999,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128_s(1.0).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966081,"byte_end":6966120,"line_start":1000,"line_end":1000,"column_start":1,"column_end":40}},{"value":"/ let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966121,"byte_end":6966183,"line_start":1001,"line_end":1001,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966184,"byte_end":6966205,"line_start":1002,"line_end":1002,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966206,"byte_end":6966213,"line_start":1003,"line_end":1003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966214,"byte_end":6966225,"line_start":1004,"line_end":1004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966226,"byte_end":6966243,"line_start":1005,"line_end":1005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966671,"byte_end":6966685,"line_start":1021,"line_end":1021,"column_start":8,"column_end":22},"name":"set_splat_m128","qualname":"::x86_x64::sse::set_splat_m128","value":"pub fn set_splat_m128(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Splats the value to all lanes.\n ```\n # use safe_arch::*;\n let a = set_splat_m128(1.0).to_array();\n let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Splats the value to all lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966375,"byte_end":6966409,"line_start":1011,"line_end":1011,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966410,"byte_end":6966417,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966418,"byte_end":6966441,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = set_splat_m128(1.0).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966442,"byte_end":6966485,"line_start":1014,"line_end":1014,"column_start":1,"column_end":44}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966486,"byte_end":6966548,"line_start":1015,"line_end":1015,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966549,"byte_end":6966570,"line_start":1016,"line_end":1016,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966571,"byte_end":6966578,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966579,"byte_end":6966590,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966591,"byte_end":6966608,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6967085,"byte_end":6967102,"line_start":1035,"line_end":1035,"column_start":8,"column_end":25},"name":"set_reversed_m128","qualname":"::x86_x64::sse::set_reversed_m128","value":"pub fn set_reversed_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the low lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966745,"byte_end":6966805,"line_start":1025,"line_end":1025,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966806,"byte_end":6966813,"line_start":1026,"line_end":1026,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966814,"byte_end":6966837,"line_start":1027,"line_end":1027,"column_start":1,"column_end":24}},{"value":"/ let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966838,"byte_end":6966899,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966900,"byte_end":6966962,"line_start":1029,"line_end":1029,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966963,"byte_end":6966984,"line_start":1030,"line_end":1030,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966985,"byte_end":6966992,"line_start":1031,"line_end":1031,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6966993,"byte_end":6967004,"line_start":1032,"line_end":1032,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6967005,"byte_end":6967022,"line_start":1033,"line_end":1033,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6967444,"byte_end":6967455,"line_start":1048,"line_end":1048,"column_start":8,"column_end":19},"name":"zeroed_m128","qualname":"::x86_x64::sse::zeroed_m128","value":"pub fn zeroed_m128() -> m128","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128().to_array();\n assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6967213,"byte_end":6967232,"line_start":1039,"line_end":1039,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6967233,"byte_end":6967240,"line_start":1040,"line_end":1040,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6967241,"byte_end":6967264,"line_start":1041,"line_end":1041,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128().to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6967265,"byte_end":6967302,"line_start":1042,"line_end":1042,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6967303,"byte_end":6967343,"line_start":1043,"line_end":1043,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6967344,"byte_end":6967351,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6967352,"byte_end":6967363,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6967364,"byte_end":6967381,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969597,"byte_end":6969606,"line_start":1105,"line_end":1105,"column_start":8,"column_end":17},"name":"sqrt_m128","qualname":"::x86_x64::sse::sqrt_m128","value":"pub fn sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);\n let b = sqrt_m128(a).to_array();\n assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969309,"byte_end":6969332,"line_start":1095,"line_end":1095,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969333,"byte_end":6969340,"line_start":1096,"line_end":1096,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969341,"byte_end":6969364,"line_start":1097,"line_end":1097,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969365,"byte_end":6969418,"line_start":1098,"line_end":1098,"column_start":1,"column_end":54}},{"value":"/ let b = sqrt_m128(a).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969419,"byte_end":6969455,"line_start":1099,"line_end":1099,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969456,"byte_end":6969496,"line_start":1100,"line_end":1100,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969497,"byte_end":6969504,"line_start":1101,"line_end":1101,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969505,"byte_end":6969516,"line_start":1102,"line_end":1102,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969517,"byte_end":6969534,"line_start":1103,"line_end":1103,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969976,"byte_end":6969987,"line_start":1119,"line_end":1119,"column_start":8,"column_end":19},"name":"sqrt_m128_s","qualname":"::x86_x64::sse::sqrt_m128_s","value":"pub fn sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(a)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);\n let b = sqrt_m128_s(a).to_array();\n assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(a)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969665,"byte_end":6969711,"line_start":1109,"line_end":1109,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969712,"byte_end":6969719,"line_start":1110,"line_end":1110,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969720,"byte_end":6969743,"line_start":1111,"line_end":1111,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969744,"byte_end":6969795,"line_start":1112,"line_end":1112,"column_start":1,"column_end":52}},{"value":"/ let b = sqrt_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969796,"byte_end":6969834,"line_start":1113,"line_end":1113,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969835,"byte_end":6969875,"line_start":1114,"line_end":1114,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969876,"byte_end":6969883,"line_start":1115,"line_end":1115,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969884,"byte_end":6969895,"line_start":1116,"line_end":1116,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6969896,"byte_end":6969913,"line_start":1117,"line_end":1117,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970396,"byte_end":6970406,"line_start":1134,"line_end":1134,"column_start":8,"column_end":18},"name":"store_m128","qualname":"::x86_x64::sse::store_m128","value":"pub fn store_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970046,"byte_end":6970090,"line_start":1123,"line_end":1123,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970091,"byte_end":6970098,"line_start":1124,"line_end":1124,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970099,"byte_end":6970122,"line_start":1125,"line_end":1125,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970123,"byte_end":6970178,"line_start":1126,"line_end":1126,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970179,"byte_end":6970209,"line_start":1127,"line_end":1127,"column_start":1,"column_end":31}},{"value":"/ store_m128(&mut b, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970210,"byte_end":6970236,"line_start":1128,"line_end":1128,"column_start":1,"column_end":27}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970237,"byte_end":6970262,"line_start":1129,"line_end":1129,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970263,"byte_end":6970307,"line_start":1130,"line_end":1130,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970308,"byte_end":6970315,"line_start":1131,"line_end":1131,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970316,"byte_end":6970333,"line_start":1132,"line_end":1132,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970799,"byte_end":6970811,"line_start":1148,"line_end":1148,"column_start":8,"column_end":20},"name":"store_m128_s","qualname":"::x86_x64::sse::store_m128_s","value":"pub fn store_m128_s(&mut f32, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut f = 0.0;\n store_m128_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970494,"byte_end":6970547,"line_start":1138,"line_end":1138,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970548,"byte_end":6970555,"line_start":1139,"line_end":1139,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970556,"byte_end":6970579,"line_start":1140,"line_end":1140,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970580,"byte_end":6970635,"line_start":1141,"line_end":1141,"column_start":1,"column_end":56}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970636,"byte_end":6970656,"line_start":1142,"line_end":1142,"column_start":1,"column_end":21}},{"value":"/ store_m128_s(&mut f, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970657,"byte_end":6970685,"line_start":1143,"line_end":1143,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970686,"byte_end":6970710,"line_start":1144,"line_end":1144,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970711,"byte_end":6970718,"line_start":1145,"line_end":1145,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970719,"byte_end":6970736,"line_start":1146,"line_end":1146,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971263,"byte_end":6971279,"line_start":1163,"line_end":1163,"column_start":8,"column_end":24},"name":"store_splat_m128","qualname":"::x86_x64::sse::store_splat_m128","value":"pub fn store_splat_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_splat_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970885,"byte_end":6970951,"line_start":1152,"line_end":1152,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970952,"byte_end":6970959,"line_start":1153,"line_end":1153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970960,"byte_end":6970983,"line_start":1154,"line_end":1154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6970984,"byte_end":6971039,"line_start":1155,"line_end":1155,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971040,"byte_end":6971070,"line_start":1156,"line_end":1156,"column_start":1,"column_end":31}},{"value":"/ store_splat_m128(&mut b, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971071,"byte_end":6971103,"line_start":1157,"line_end":1157,"column_start":1,"column_end":33}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971104,"byte_end":6971129,"line_start":1158,"line_end":1158,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971130,"byte_end":6971174,"line_start":1159,"line_end":1159,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971175,"byte_end":6971182,"line_start":1160,"line_end":1160,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971183,"byte_end":6971200,"line_start":1161,"line_end":1161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971743,"byte_end":6971761,"line_start":1178,"line_end":1178,"column_start":8,"column_end":26},"name":"store_reverse_m128","qualname":"::x86_x64::sse::store_reverse_m128","value":"pub fn store_reverse_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given in reverse order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_reverse_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given in reverse order.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971368,"byte_end":6971429,"line_start":1167,"line_end":1167,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971430,"byte_end":6971437,"line_start":1168,"line_end":1168,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971438,"byte_end":6971461,"line_start":1169,"line_end":1169,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971462,"byte_end":6971517,"line_start":1170,"line_end":1170,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971518,"byte_end":6971548,"line_start":1171,"line_end":1171,"column_start":1,"column_end":31}},{"value":"/ store_reverse_m128(&mut b, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971549,"byte_end":6971583,"line_start":1172,"line_end":1172,"column_start":1,"column_end":35}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971584,"byte_end":6971609,"line_start":1173,"line_end":1173,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971610,"byte_end":6971654,"line_start":1174,"line_end":1174,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971655,"byte_end":6971662,"line_start":1175,"line_end":1175,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971663,"byte_end":6971680,"line_start":1176,"line_end":1176,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972356,"byte_end":6972376,"line_start":1196,"line_end":1196,"column_start":8,"column_end":28},"name":"store_unaligned_m128","qualname":"::x86_x64::sse::store_unaligned_m128","value":"pub fn store_unaligned_m128(&mut [f32; ], m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971850,"byte_end":6971894,"line_start":1182,"line_end":1182,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971895,"byte_end":6971898,"line_start":1183,"line_end":1183,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971899,"byte_end":6971977,"line_start":1184,"line_end":1184,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6971978,"byte_end":6972058,"line_start":1185,"line_end":1185,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972059,"byte_end":6972071,"line_start":1186,"line_end":1186,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972072,"byte_end":6972079,"line_start":1187,"line_end":1187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972080,"byte_end":6972103,"line_start":1188,"line_end":1188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972104,"byte_end":6972159,"line_start":1189,"line_end":1189,"column_start":1,"column_end":56}},{"value":"/ let mut b = [0.0; 4];","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972160,"byte_end":6972185,"line_start":1190,"line_end":1190,"column_start":1,"column_end":26}},{"value":"/ store_unaligned_m128(&mut b, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972186,"byte_end":6972222,"line_start":1191,"line_end":1191,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972223,"byte_end":6972267,"line_start":1192,"line_end":1192,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972268,"byte_end":6972275,"line_start":1193,"line_end":1193,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972276,"byte_end":6972293,"line_start":1194,"line_end":1194,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972798,"byte_end":6972806,"line_start":1211,"line_end":1211,"column_start":8,"column_end":16},"name":"sub_m128","qualname":"::x86_x64::sse::sub_m128","value":"pub fn sub_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128(a, b).to_array();\n assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972456,"byte_end":6972477,"line_start":1200,"line_end":1200,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972478,"byte_end":6972485,"line_start":1201,"line_end":1201,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972486,"byte_end":6972509,"line_start":1202,"line_end":1202,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972510,"byte_end":6972561,"line_start":1203,"line_end":1203,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972562,"byte_end":6972614,"line_start":1204,"line_end":1204,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972615,"byte_end":6972653,"line_start":1205,"line_end":1205,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972654,"byte_end":6972697,"line_start":1206,"line_end":1206,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972698,"byte_end":6972705,"line_start":1207,"line_end":1207,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972706,"byte_end":6972717,"line_start":1208,"line_end":1208,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972718,"byte_end":6972735,"line_start":1209,"line_end":1209,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973243,"byte_end":6973253,"line_start":1226,"line_end":1226,"column_start":8,"column_end":18},"name":"sub_m128_s","qualname":"::x86_x64::sse::sub_m128_s","value":"pub fn sub_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a - b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128_s(a, b).to_array();\n assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a - b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972878,"byte_end":6972922,"line_start":1215,"line_end":1215,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972923,"byte_end":6972930,"line_start":1216,"line_end":1216,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972931,"byte_end":6972954,"line_start":1217,"line_end":1217,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6972955,"byte_end":6973006,"line_start":1218,"line_end":1218,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973007,"byte_end":6973059,"line_start":1219,"line_end":1219,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973060,"byte_end":6973100,"line_start":1220,"line_end":1220,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973101,"byte_end":6973142,"line_start":1221,"line_end":1221,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973143,"byte_end":6973150,"line_start":1222,"line_end":1222,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973151,"byte_end":6973162,"line_start":1223,"line_end":1223,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973163,"byte_end":6973180,"line_start":1224,"line_end":1224,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974004,"byte_end":6974023,"line_start":1245,"line_end":1245,"column_start":8,"column_end":27},"name":"transpose_four_m128","qualname":"::x86_x64::sse::transpose_four_m128","value":"pub fn transpose_four_m128(&mut m128, &mut m128, &mut m128, &mut m128)","parent":null,"children":[],"decl_id":null,"docs":" Transpose four `m128` as if they were a 4x4 matrix.\n ```\n # use safe_arch::*;\n let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);\n let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);\n transpose_four_m128(&mut a, &mut b, &mut c, &mut d);\n assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);\n assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);\n assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);\n assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Transpose four `m128` as if they were a 4x4 matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973325,"byte_end":6973380,"line_start":1230,"line_end":1230,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973381,"byte_end":6973388,"line_start":1231,"line_end":1231,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973389,"byte_end":6973412,"line_start":1232,"line_end":1232,"column_start":1,"column_end":24}},{"value":"/ let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973413,"byte_end":6973468,"line_start":1233,"line_end":1233,"column_start":1,"column_end":56}},{"value":"/ let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973469,"byte_end":6973524,"line_start":1234,"line_end":1234,"column_start":1,"column_end":56}},{"value":"/ let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973525,"byte_end":6973583,"line_start":1235,"line_end":1235,"column_start":1,"column_end":59}},{"value":"/ let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973584,"byte_end":6973643,"line_start":1236,"line_end":1236,"column_start":1,"column_end":60}},{"value":"/ transpose_four_m128(&mut a, &mut b, &mut c, &mut d);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973644,"byte_end":6973700,"line_start":1237,"line_end":1237,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973701,"byte_end":6973753,"line_start":1238,"line_end":1238,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973754,"byte_end":6973807,"line_start":1239,"line_end":1239,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973808,"byte_end":6973861,"line_start":1240,"line_end":1240,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973862,"byte_end":6973915,"line_start":1241,"line_end":1241,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973916,"byte_end":6973923,"line_start":1242,"line_end":1242,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6973924,"byte_end":6973941,"line_start":1243,"line_end":1243,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974538,"byte_end":6974554,"line_start":1262,"line_end":1262,"column_start":8,"column_end":24},"name":"unpack_high_m128","qualname":"::x86_x64::sse::unpack_high_m128","value":"pub fn unpack_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_high_m128(a, b).to_array();\n assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974161,"byte_end":6974213,"line_start":1251,"line_end":1251,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974214,"byte_end":6974221,"line_start":1252,"line_end":1252,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974222,"byte_end":6974245,"line_start":1253,"line_end":1253,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974246,"byte_end":6974297,"line_start":1254,"line_end":1254,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974298,"byte_end":6974349,"line_start":1255,"line_end":1255,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_high_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974350,"byte_end":6974396,"line_start":1256,"line_end":1256,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974397,"byte_end":6974437,"line_start":1257,"line_end":1257,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974438,"byte_end":6974445,"line_start":1258,"line_end":1258,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974446,"byte_end":6974457,"line_start":1259,"line_end":1259,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974458,"byte_end":6974475,"line_start":1260,"line_end":1260,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6975006,"byte_end":6975021,"line_start":1277,"line_end":1277,"column_start":8,"column_end":23},"name":"unpack_low_m128","qualname":"::x86_x64::sse::unpack_low_m128","value":"pub fn unpack_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_low_m128(a, b).to_array();\n assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974631,"byte_end":6974682,"line_start":1266,"line_end":1266,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974683,"byte_end":6974690,"line_start":1267,"line_end":1267,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974691,"byte_end":6974714,"line_start":1268,"line_end":1268,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974715,"byte_end":6974766,"line_start":1269,"line_end":1269,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974767,"byte_end":6974818,"line_start":1270,"line_end":1270,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_low_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974819,"byte_end":6974864,"line_start":1271,"line_end":1271,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974865,"byte_end":6974905,"line_start":1272,"line_end":1272,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974906,"byte_end":6974913,"line_start":1273,"line_end":1273,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974914,"byte_end":6974925,"line_start":1274,"line_end":1274,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6974926,"byte_end":6974943,"line_start":1275,"line_end":1275,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6975438,"byte_end":6975449,"line_start":1292,"line_end":1292,"column_start":8,"column_end":19},"name":"bitxor_m128","qualname":"::x86_x64::sse::bitxor_m128","value":"pub fn bitxor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitxor_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6975098,"byte_end":6975118,"line_start":1281,"line_end":1281,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6975119,"byte_end":6975126,"line_start":1282,"line_end":1282,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6975127,"byte_end":6975150,"line_start":1283,"line_end":1283,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6975151,"byte_end":6975202,"line_start":1284,"line_end":1284,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6975203,"byte_end":6975254,"line_start":1285,"line_end":1285,"column_start":1,"column_end":52}},{"value":"/ let c = bitxor_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6975255,"byte_end":6975296,"line_start":1286,"line_end":1286,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6975297,"byte_end":6975337,"line_start":1287,"line_end":1287,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6975338,"byte_end":6975345,"line_start":1288,"line_end":1288,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6975346,"byte_end":6975357,"line_start":1289,"line_end":1289,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6975358,"byte_end":6975375,"line_start":1290,"line_end":1290,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":615},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980748,"byte_end":6980760,"line_start":22,"line_end":22,"column_start":8,"column_end":20},"name":"add_i8_m128i","qualname":"::x86_x64::sse2::add_i8_m128i","value":"pub fn add_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = add_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980226,"byte_end":6980266,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980267,"byte_end":6980274,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980275,"byte_end":6980298,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980299,"byte_end":6980310,"line_start":8,"line_end":8,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980311,"byte_end":6980388,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980389,"byte_end":6980414,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980415,"byte_end":6980485,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980486,"byte_end":6980493,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980494,"byte_end":6980542,"line_start":13,"line_end":13,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980543,"byte_end":6980558,"line_start":14,"line_end":14,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980559,"byte_end":6980567,"line_start":15,"line_end":15,"column_start":1,"column_end":9}},{"value":"/   [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980568,"byte_end":6980639,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ );","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980640,"byte_end":6980646,"line_start":17,"line_end":17,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980647,"byte_end":6980654,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980655,"byte_end":6980666,"line_start":19,"line_end":19,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980667,"byte_end":6980684,"line_start":20,"line_end":20,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981238,"byte_end":6981251,"line_start":37,"line_end":37,"column_start":8,"column_end":21},"name":"add_i16_m128i","qualname":"::x86_x64::sse2::add_i16_m128i","value":"pub fn add_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_i16_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980838,"byte_end":6980879,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980880,"byte_end":6980887,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980888,"byte_end":6980911,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980912,"byte_end":6980970,"line_start":29,"line_end":29,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6980971,"byte_end":6981032,"line_start":30,"line_end":30,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = add_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981033,"byte_end":6981082,"line_start":31,"line_end":31,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981083,"byte_end":6981136,"line_start":32,"line_end":32,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981137,"byte_end":6981144,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981145,"byte_end":6981156,"line_start":34,"line_end":34,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981157,"byte_end":6981174,"line_start":35,"line_end":35,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981668,"byte_end":6981681,"line_start":52,"line_end":52,"column_start":8,"column_end":21},"name":"add_i32_m128i","qualname":"::x86_x64::sse2::add_i32_m128i","value":"pub fn add_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = add_i32_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981330,"byte_end":6981371,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981372,"byte_end":6981379,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981380,"byte_end":6981403,"line_start":43,"line_end":43,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981404,"byte_end":6981442,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981443,"byte_end":6981481,"line_start":45,"line_end":45,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = add_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981482,"byte_end":6981531,"line_start":46,"line_end":46,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981532,"byte_end":6981566,"line_start":47,"line_end":47,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981567,"byte_end":6981574,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981575,"byte_end":6981586,"line_start":49,"line_end":49,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981587,"byte_end":6981604,"line_start":50,"line_end":50,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982097,"byte_end":6982110,"line_start":67,"line_end":67,"column_start":8,"column_end":21},"name":"add_i64_m128i","qualname":"::x86_x64::sse2::add_i64_m128i","value":"pub fn add_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = add_i64_m128i(a, b).into();\n assert_eq!(c, [-8909, 88]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i64`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981760,"byte_end":6981801,"line_start":56,"line_end":56,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981802,"byte_end":6981809,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981810,"byte_end":6981833,"line_start":58,"line_end":58,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981834,"byte_end":6981872,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981873,"byte_end":6981913,"line_start":60,"line_end":60,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = add_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981914,"byte_end":6981963,"line_start":61,"line_end":61,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-8909, 88]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981964,"byte_end":6981995,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6981996,"byte_end":6982003,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982004,"byte_end":6982015,"line_start":64,"line_end":64,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982016,"byte_end":6982033,"line_start":65,"line_end":65,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982509,"byte_end":6982518,"line_start":82,"line_end":82,"column_start":8,"column_end":17},"name":"add_m128d","qualname":"::x86_x64::sse2::add_m128d","value":"pub fn add_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = add_m128d(a, b).to_array();\n assert_eq!(c, [192.0, 81.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982189,"byte_end":6982210,"line_start":71,"line_end":71,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982211,"byte_end":6982218,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982219,"byte_end":6982242,"line_start":73,"line_end":73,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982243,"byte_end":6982287,"line_start":74,"line_end":74,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982288,"byte_end":6982333,"line_start":75,"line_end":75,"column_start":1,"column_end":46}},{"value":"/ let c = add_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982334,"byte_end":6982373,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [192.0, 81.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982374,"byte_end":6982407,"line_start":77,"line_end":77,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982408,"byte_end":6982415,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982416,"byte_end":6982427,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982428,"byte_end":6982445,"line_start":80,"line_end":80,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982942,"byte_end":6982953,"line_start":97,"line_end":97,"column_start":8,"column_end":19},"name":"add_m128d_s","qualname":"::x86_x64::sse2::add_m128d_s","value":"pub fn add_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a + b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = add_m128d_s(a, b).to_array();\n assert_eq!(c, [192.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a + b`, high lane unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982594,"byte_end":6982639,"line_start":86,"line_end":86,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982640,"byte_end":6982647,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982648,"byte_end":6982671,"line_start":88,"line_end":88,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982672,"byte_end":6982716,"line_start":89,"line_end":89,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982717,"byte_end":6982764,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/ let c = add_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982765,"byte_end":6982806,"line_start":91,"line_end":91,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [192.0, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982807,"byte_end":6982840,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982841,"byte_end":6982848,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982849,"byte_end":6982860,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6982861,"byte_end":6982878,"line_start":95,"line_end":95,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":876},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983676,"byte_end":6983699,"line_start":125,"line_end":125,"column_start":8,"column_end":31},"name":"add_saturating_i8_m128i","qualname":"::x86_x64::sse2::add_saturating_i8_m128i","value":"pub fn add_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,\n   3, 4, -1, -2, -1, -2, -3, -4,\n ]);\n let b = m128i::from([\n   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,\n   7, 8, -15, -26, -15, -26, -37, 48,\n ]);\n let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,\n     10, 12, -16, -28, -16, -28, -40, 44\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983029,"byte_end":6983080,"line_start":101,"line_end":101,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983081,"byte_end":6983088,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983089,"byte_end":6983112,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983113,"byte_end":6983138,"line_start":104,"line_end":104,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983139,"byte_end":6983184,"line_start":105,"line_end":105,"column_start":1,"column_end":46}},{"value":"/   3, 4, -1, -2, -1, -2, -3, -4,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983185,"byte_end":6983220,"line_start":106,"line_end":106,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983221,"byte_end":6983228,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983229,"byte_end":6983254,"line_start":108,"line_end":108,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983255,"byte_end":6983303,"line_start":109,"line_end":109,"column_start":1,"column_end":49}},{"value":"/   7, 8, -15, -26, -15, -26, -37, 48,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983304,"byte_end":6983344,"line_start":110,"line_end":110,"column_start":1,"column_end":41}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983345,"byte_end":6983352,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983353,"byte_end":6983412,"line_start":112,"line_end":112,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983413,"byte_end":6983428,"line_start":113,"line_end":113,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983429,"byte_end":6983437,"line_start":114,"line_end":114,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983438,"byte_end":6983445,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983446,"byte_end":6983498,"line_start":116,"line_end":116,"column_start":1,"column_end":53}},{"value":"/     10, 12, -16, -28, -16, -28, -40, 44","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983499,"byte_end":6983542,"line_start":117,"line_end":117,"column_start":1,"column_end":44}},{"value":"/   ]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983543,"byte_end":6983550,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983551,"byte_end":6983557,"line_start":119,"line_end":119,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983558,"byte_end":6983565,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983566,"byte_end":6983577,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983578,"byte_end":6983595,"line_start":122,"line_end":122,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983596,"byte_end":6983612,"line_start":123,"line_end":123,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984234,"byte_end":6984258,"line_start":140,"line_end":140,"column_start":8,"column_end":32},"name":"add_saturating_i16_m128i","qualname":"::x86_x64::sse2::add_saturating_i16_m128i","value":"pub fn add_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983778,"byte_end":6983830,"line_start":129,"line_end":129,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983831,"byte_end":6983838,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983839,"byte_end":6983862,"line_start":131,"line_end":131,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983863,"byte_end":6983931,"line_start":132,"line_end":132,"column_start":1,"column_end":69}},{"value":"/ let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6983932,"byte_end":6984003,"line_start":133,"line_end":133,"column_start":1,"column_end":72}},{"value":"/ let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984004,"byte_end":6984064,"line_start":134,"line_end":134,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984065,"byte_end":6984132,"line_start":135,"line_end":135,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984133,"byte_end":6984140,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984141,"byte_end":6984152,"line_start":137,"line_end":137,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984153,"byte_end":6984170,"line_start":138,"line_end":138,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984947,"byte_end":6984970,"line_start":168,"line_end":168,"column_start":8,"column_end":31},"name":"add_saturating_u8_m128i","qualname":"::x86_x64::sse2::add_saturating_u8_m128i","value":"pub fn add_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 10, 12, 255, 28, 40, 52,\n     10, 12, 16, 28, 16, 28, 165, 52\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u8`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984338,"byte_end":6984389,"line_start":144,"line_end":144,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984390,"byte_end":6984397,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984398,"byte_end":6984421,"line_start":146,"line_end":146,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984422,"byte_end":6984447,"line_start":147,"line_end":147,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984448,"byte_end":6984485,"line_start":148,"line_end":148,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984486,"byte_end":6984517,"line_start":149,"line_end":149,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984518,"byte_end":6984525,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984526,"byte_end":6984551,"line_start":151,"line_end":151,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984552,"byte_end":6984591,"line_start":152,"line_end":152,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984592,"byte_end":6984627,"line_start":153,"line_end":153,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984628,"byte_end":6984635,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984636,"byte_end":6984695,"line_start":155,"line_end":155,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984696,"byte_end":6984711,"line_start":156,"line_end":156,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984712,"byte_end":6984720,"line_start":157,"line_end":157,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984721,"byte_end":6984728,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 10, 12, 255, 28, 40, 52,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984729,"byte_end":6984773,"line_start":159,"line_end":159,"column_start":1,"column_end":45}},{"value":"/     10, 12, 16, 28, 16, 28, 165, 52","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984774,"byte_end":6984813,"line_start":160,"line_end":160,"column_start":1,"column_end":40}},{"value":"/   ]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984814,"byte_end":6984821,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984822,"byte_end":6984828,"line_start":162,"line_end":162,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984829,"byte_end":6984836,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984837,"byte_end":6984848,"line_start":164,"line_end":164,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984849,"byte_end":6984866,"line_start":165,"line_end":165,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6984867,"byte_end":6984883,"line_start":166,"line_end":166,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985474,"byte_end":6985498,"line_start":183,"line_end":183,"column_start":8,"column_end":32},"name":"add_saturating_u16_m128i","qualname":"::x86_x64::sse2::add_saturating_u16_m128i","value":"pub fn add_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u16`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985049,"byte_end":6985101,"line_start":172,"line_end":172,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985102,"byte_end":6985109,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985110,"byte_end":6985133,"line_start":174,"line_end":174,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985134,"byte_end":6985191,"line_start":175,"line_end":175,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985192,"byte_end":6985253,"line_start":176,"line_end":176,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985254,"byte_end":6985314,"line_start":177,"line_end":177,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985315,"byte_end":6985372,"line_start":178,"line_end":178,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985373,"byte_end":6985380,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985381,"byte_end":6985392,"line_start":180,"line_end":180,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985393,"byte_end":6985410,"line_start":181,"line_end":181,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985892,"byte_end":6985904,"line_start":198,"line_end":198,"column_start":8,"column_end":20},"name":"bitand_m128d","qualname":"::x86_x64::sse2::bitand_m128d","value":"pub fn bitand_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitand_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985578,"byte_end":6985598,"line_start":187,"line_end":187,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985599,"byte_end":6985606,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985607,"byte_end":6985630,"line_start":189,"line_end":189,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985631,"byte_end":6985673,"line_start":190,"line_end":190,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985674,"byte_end":6985716,"line_start":191,"line_end":191,"column_start":1,"column_end":43}},{"value":"/ let c = bitand_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985717,"byte_end":6985759,"line_start":192,"line_end":192,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985760,"byte_end":6985790,"line_start":193,"line_end":193,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985791,"byte_end":6985798,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985799,"byte_end":6985810,"line_start":195,"line_end":195,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985811,"byte_end":6985828,"line_start":196,"line_end":196,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986294,"byte_end":6986306,"line_start":213,"line_end":213,"column_start":8,"column_end":20},"name":"bitand_m128i","qualname":"::x86_x64::sse2::bitand_m128i","value":"pub fn bitand_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitand_m128i(a, b).into();\n assert_eq!(c, [1, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6985980,"byte_end":6986000,"line_start":202,"line_end":202,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986001,"byte_end":6986008,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986009,"byte_end":6986032,"line_start":204,"line_end":204,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986033,"byte_end":6986071,"line_start":205,"line_end":205,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986072,"byte_end":6986110,"line_start":206,"line_end":206,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitand_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986111,"byte_end":6986159,"line_start":207,"line_end":207,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986160,"byte_end":6986192,"line_start":208,"line_end":208,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986193,"byte_end":6986200,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986201,"byte_end":6986212,"line_start":210,"line_end":210,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986213,"byte_end":6986230,"line_start":211,"line_end":211,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986705,"byte_end":6986720,"line_start":228,"line_end":228,"column_start":8,"column_end":23},"name":"bitandnot_m128d","qualname":"::x86_x64::sse2::bitandnot_m128d","value":"pub fn bitandnot_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitandnot_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986385,"byte_end":6986408,"line_start":217,"line_end":217,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986409,"byte_end":6986416,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986417,"byte_end":6986440,"line_start":219,"line_end":219,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986441,"byte_end":6986483,"line_start":220,"line_end":220,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986484,"byte_end":6986526,"line_start":221,"line_end":221,"column_start":1,"column_end":43}},{"value":"/ let c = bitandnot_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986527,"byte_end":6986572,"line_start":222,"line_end":222,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986573,"byte_end":6986603,"line_start":223,"line_end":223,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986604,"byte_end":6986611,"line_start":224,"line_end":224,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986612,"byte_end":6986623,"line_start":225,"line_end":225,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986624,"byte_end":6986641,"line_start":226,"line_end":226,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987119,"byte_end":6987134,"line_start":243,"line_end":243,"column_start":8,"column_end":23},"name":"bitandnot_m128i","qualname":"::x86_x64::sse2::bitandnot_m128i","value":"pub fn bitandnot_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitandnot_m128i(a, b).into();\n assert_eq!(c, [0, 1, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986799,"byte_end":6986822,"line_start":232,"line_end":232,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986823,"byte_end":6986830,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986831,"byte_end":6986854,"line_start":234,"line_end":234,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986855,"byte_end":6986893,"line_start":235,"line_end":235,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986894,"byte_end":6986932,"line_start":236,"line_end":236,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitandnot_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986933,"byte_end":6986984,"line_start":237,"line_end":237,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [0, 1, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6986985,"byte_end":6987017,"line_start":238,"line_end":238,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987018,"byte_end":6987025,"line_start":239,"line_end":239,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987026,"byte_end":6987037,"line_start":240,"line_end":240,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987038,"byte_end":6987055,"line_start":241,"line_end":241,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":878},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987800,"byte_end":6987816,"line_start":271,"line_end":271,"column_start":8,"column_end":24},"name":"average_u8_m128i","qualname":"::x86_x64::sse2::average_u8_m128i","value":"pub fn average_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u8` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = average_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 5, 6, 135, 14, 20, 26,\n     5, 6, 8, 14, 8, 14, 83, 26\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u8` values.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987216,"byte_end":6987256,"line_start":247,"line_end":247,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987257,"byte_end":6987264,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987265,"byte_end":6987288,"line_start":249,"line_end":249,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987289,"byte_end":6987314,"line_start":250,"line_end":250,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987315,"byte_end":6987352,"line_start":251,"line_end":251,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987353,"byte_end":6987384,"line_start":252,"line_end":252,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987385,"byte_end":6987392,"line_start":253,"line_end":253,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987393,"byte_end":6987418,"line_start":254,"line_end":254,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987419,"byte_end":6987458,"line_start":255,"line_end":255,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987459,"byte_end":6987494,"line_start":256,"line_end":256,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987495,"byte_end":6987502,"line_start":257,"line_end":257,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = average_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987503,"byte_end":6987555,"line_start":258,"line_end":258,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987556,"byte_end":6987571,"line_start":259,"line_end":259,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987572,"byte_end":6987580,"line_start":260,"line_end":260,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987581,"byte_end":6987588,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 5, 6, 135, 14, 20, 26,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987589,"byte_end":6987631,"line_start":262,"line_end":262,"column_start":1,"column_end":43}},{"value":"/     5, 6, 8, 14, 8, 14, 83, 26","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987632,"byte_end":6987666,"line_start":263,"line_end":263,"column_start":1,"column_end":35}},{"value":"/   ]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987667,"byte_end":6987674,"line_start":264,"line_end":264,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987675,"byte_end":6987681,"line_start":265,"line_end":265,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987682,"byte_end":6987689,"line_start":266,"line_end":266,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987690,"byte_end":6987701,"line_start":267,"line_end":267,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987702,"byte_end":6987719,"line_start":268,"line_end":268,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987720,"byte_end":6987736,"line_start":269,"line_end":269,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6988298,"byte_end":6988315,"line_start":286,"line_end":286,"column_start":8,"column_end":25},"name":"average_u16_m128i","qualname":"::x86_x64::sse2::average_u16_m128i","value":"pub fn average_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u16` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = average_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u16` values.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987894,"byte_end":6987935,"line_start":275,"line_end":275,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987936,"byte_end":6987943,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987944,"byte_end":6987967,"line_start":277,"line_end":277,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6987968,"byte_end":6988025,"line_start":278,"line_end":278,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6988026,"byte_end":6988087,"line_start":279,"line_end":279,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = average_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6988088,"byte_end":6988141,"line_start":280,"line_end":280,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6988142,"byte_end":6988196,"line_start":281,"line_end":281,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6988197,"byte_end":6988204,"line_start":282,"line_end":282,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6988205,"byte_end":6988216,"line_start":283,"line_end":283,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6988217,"byte_end":6988234,"line_start":284,"line_end":284,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990167,"byte_end":6990190,"line_start":344,"line_end":344,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128_from_m128d","value":"pub fn cast_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128d`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6989833,"byte_end":6989879,"line_start":334,"line_end":334,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6989880,"byte_end":6989887,"line_start":335,"line_end":335,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6989888,"byte_end":6989911,"line_start":336,"line_end":336,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6989912,"byte_end":6989954,"line_start":337,"line_end":337,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6989955,"byte_end":6990014,"line_start":338,"line_end":338,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990015,"byte_end":6990065,"line_start":339,"line_end":339,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990066,"byte_end":6990073,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990074,"byte_end":6990085,"line_start":341,"line_end":341,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990086,"byte_end":6990103,"line_start":342,"line_end":342,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990585,"byte_end":6990609,"line_start":358,"line_end":358,"column_start":8,"column_end":32},"name":"cast_to_m128i_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128d","value":"pub fn cast_to_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128d`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990252,"byte_end":6990299,"line_start":348,"line_end":348,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990300,"byte_end":6990307,"line_start":349,"line_end":349,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990308,"byte_end":6990331,"line_start":350,"line_end":350,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990332,"byte_end":6990374,"line_start":351,"line_end":351,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990375,"byte_end":6990432,"line_start":352,"line_end":352,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990433,"byte_end":6990483,"line_start":353,"line_end":353,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990484,"byte_end":6990491,"line_start":354,"line_end":354,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990492,"byte_end":6990503,"line_start":355,"line_end":355,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990504,"byte_end":6990521,"line_start":356,"line_end":356,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991029,"byte_end":6991052,"line_start":372,"line_end":372,"column_start":8,"column_end":31},"name":"cast_to_m128d_from_m128","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128","value":"pub fn cast_to_m128d_from_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();\n assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990676,"byte_end":6990722,"line_start":362,"line_end":362,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990723,"byte_end":6990730,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990731,"byte_end":6990754,"line_start":364,"line_end":364,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990755,"byte_end":6990806,"line_start":365,"line_end":365,"column_start":1,"column_end":52}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990807,"byte_end":6990866,"line_start":366,"line_end":366,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990867,"byte_end":6990927,"line_start":367,"line_end":367,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990928,"byte_end":6990935,"line_start":368,"line_end":368,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990936,"byte_end":6990947,"line_start":369,"line_end":369,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6990948,"byte_end":6990965,"line_start":370,"line_end":370,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991473,"byte_end":6991496,"line_start":386,"line_end":386,"column_start":8,"column_end":31},"name":"cast_to_m128i_from_m128","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128","value":"pub fn cast_to_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128(a).into();\n assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991115,"byte_end":6991161,"line_start":376,"line_end":376,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991162,"byte_end":6991169,"line_start":377,"line_end":377,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991170,"byte_end":6991193,"line_start":378,"line_end":378,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991194,"byte_end":6991245,"line_start":379,"line_end":379,"column_start":1,"column_end":52}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128(a).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991246,"byte_end":6991302,"line_start":380,"line_end":380,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991303,"byte_end":6991371,"line_start":381,"line_end":381,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991372,"byte_end":6991379,"line_start":382,"line_end":382,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991380,"byte_end":6991391,"line_start":383,"line_end":383,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991392,"byte_end":6991409,"line_start":384,"line_end":384,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991890,"byte_end":6991914,"line_start":400,"line_end":400,"column_start":8,"column_end":32},"name":"cast_to_m128d_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128i","value":"pub fn cast_to_m128d_from_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();\n assert_eq!(c, [0x200000001, 0x400000003]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128i`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991562,"byte_end":6991609,"line_start":390,"line_end":390,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991610,"byte_end":6991617,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991618,"byte_end":6991641,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991642,"byte_end":6991680,"line_start":393,"line_end":393,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991681,"byte_end":6991741,"line_start":394,"line_end":394,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [0x200000001, 0x400000003]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991742,"byte_end":6991788,"line_start":395,"line_end":395,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991789,"byte_end":6991796,"line_start":396,"line_end":396,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991797,"byte_end":6991808,"line_start":397,"line_end":397,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991809,"byte_end":6991826,"line_start":398,"line_end":398,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992293,"byte_end":6992316,"line_start":414,"line_end":414,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128_from_m128i","value":"pub fn cast_to_m128_from_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128i`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6991981,"byte_end":6992027,"line_start":404,"line_end":404,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992028,"byte_end":6992035,"line_start":405,"line_end":405,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992036,"byte_end":6992059,"line_start":406,"line_end":406,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992060,"byte_end":6992098,"line_start":407,"line_end":407,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992099,"byte_end":6992158,"line_start":408,"line_end":408,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992159,"byte_end":6992191,"line_start":409,"line_end":409,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992192,"byte_end":6992199,"line_start":410,"line_end":410,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992200,"byte_end":6992211,"line_start":411,"line_end":411,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992212,"byte_end":6992229,"line_start":412,"line_end":412,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992947,"byte_end":6992967,"line_start":434,"line_end":434,"column_start":8,"column_end":28},"name":"cmp_eq_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i8_m128i","value":"pub fn cmp_eq_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992381,"byte_end":6992422,"line_start":418,"line_end":418,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992423,"byte_end":6992426,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992427,"byte_end":6992485,"line_start":420,"line_end":420,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992486,"byte_end":6992493,"line_start":421,"line_end":421,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992494,"byte_end":6992517,"line_start":422,"line_end":422,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992518,"byte_end":6992529,"line_start":423,"line_end":423,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992530,"byte_end":6992608,"line_start":424,"line_end":424,"column_start":1,"column_end":79}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992609,"byte_end":6992634,"line_start":425,"line_end":425,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992635,"byte_end":6992705,"line_start":426,"line_end":426,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992706,"byte_end":6992713,"line_start":427,"line_end":427,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_eq_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992714,"byte_end":6992770,"line_start":428,"line_end":428,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992771,"byte_end":6992845,"line_start":429,"line_end":429,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992846,"byte_end":6992853,"line_start":430,"line_end":430,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992854,"byte_end":6992865,"line_start":431,"line_end":431,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6992866,"byte_end":6992883,"line_start":432,"line_end":432,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993513,"byte_end":6993534,"line_start":451,"line_end":451,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i16_m128i","value":"pub fn cmp_eq_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993047,"byte_end":6993089,"line_start":438,"line_end":438,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993090,"byte_end":6993093,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993094,"byte_end":6993152,"line_start":440,"line_end":440,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993153,"byte_end":6993160,"line_start":441,"line_end":441,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993161,"byte_end":6993184,"line_start":442,"line_end":442,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993185,"byte_end":6993243,"line_start":443,"line_end":443,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993244,"byte_end":6993305,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_eq_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993306,"byte_end":6993363,"line_start":445,"line_end":445,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993364,"byte_end":6993411,"line_start":446,"line_end":446,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993412,"byte_end":6993419,"line_start":447,"line_end":447,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993420,"byte_end":6993431,"line_start":448,"line_end":448,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993432,"byte_end":6993449,"line_start":449,"line_end":449,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994025,"byte_end":6994046,"line_start":468,"line_end":468,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i32_m128i","value":"pub fn cmp_eq_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993615,"byte_end":6993657,"line_start":455,"line_end":455,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993658,"byte_end":6993661,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993662,"byte_end":6993720,"line_start":457,"line_end":457,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993721,"byte_end":6993728,"line_start":458,"line_end":458,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993729,"byte_end":6993752,"line_start":459,"line_end":459,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993753,"byte_end":6993791,"line_start":460,"line_end":460,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993792,"byte_end":6993830,"line_start":461,"line_end":461,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_eq_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993831,"byte_end":6993888,"line_start":462,"line_end":462,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993889,"byte_end":6993923,"line_start":463,"line_end":463,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993924,"byte_end":6993931,"line_start":464,"line_end":464,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993932,"byte_end":6993943,"line_start":465,"line_end":465,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6993944,"byte_end":6993961,"line_start":466,"line_end":466,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994484,"byte_end":6994501,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_mask_m128d","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d","value":"pub fn cmp_eq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`, mask output.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`, mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994127,"byte_end":6994162,"line_start":472,"line_end":472,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994163,"byte_end":6994166,"line_start":473,"line_end":473,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994167,"byte_end":6994183,"line_start":474,"line_end":474,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994184,"byte_end":6994191,"line_start":475,"line_end":475,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994192,"byte_end":6994215,"line_start":476,"line_end":476,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994216,"byte_end":6994258,"line_start":477,"line_end":477,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994259,"byte_end":6994301,"line_start":478,"line_end":478,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994302,"byte_end":6994348,"line_start":479,"line_end":479,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994349,"byte_end":6994382,"line_start":480,"line_end":480,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994383,"byte_end":6994390,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994391,"byte_end":6994402,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994403,"byte_end":6994420,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994962,"byte_end":6994981,"line_start":502,"line_end":502,"column_start":8,"column_end":27},"name":"cmp_eq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d_s","value":"pub fn cmp_eq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994579,"byte_end":6994624,"line_start":489,"line_end":489,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994625,"byte_end":6994628,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994629,"byte_end":6994645,"line_start":491,"line_end":491,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994646,"byte_end":6994653,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994654,"byte_end":6994677,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994678,"byte_end":6994720,"line_start":494,"line_end":494,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994721,"byte_end":6994763,"line_start":495,"line_end":495,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994764,"byte_end":6994812,"line_start":496,"line_end":496,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994813,"byte_end":6994860,"line_start":497,"line_end":497,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994861,"byte_end":6994868,"line_start":498,"line_end":498,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994869,"byte_end":6994880,"line_start":499,"line_end":499,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6994881,"byte_end":6994898,"line_start":500,"line_end":500,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995410,"byte_end":6995427,"line_start":519,"line_end":519,"column_start":8,"column_end":25},"name":"cmp_ge_mask_m128d","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d","value":"pub fn cmp_ge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995059,"byte_end":6995081,"line_start":506,"line_end":506,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995082,"byte_end":6995085,"line_start":507,"line_end":507,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995086,"byte_end":6995102,"line_start":508,"line_end":508,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995103,"byte_end":6995110,"line_start":509,"line_end":509,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995111,"byte_end":6995134,"line_start":510,"line_end":510,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995135,"byte_end":6995177,"line_start":511,"line_end":511,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995178,"byte_end":6995220,"line_start":512,"line_end":512,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995221,"byte_end":6995267,"line_start":513,"line_end":513,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995268,"byte_end":6995308,"line_start":514,"line_end":514,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995309,"byte_end":6995316,"line_start":515,"line_end":515,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995317,"byte_end":6995328,"line_start":516,"line_end":516,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995329,"byte_end":6995346,"line_start":517,"line_end":517,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995888,"byte_end":6995907,"line_start":536,"line_end":536,"column_start":8,"column_end":27},"name":"cmp_ge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d_s","value":"pub fn cmp_ge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995505,"byte_end":6995550,"line_start":523,"line_end":523,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995551,"byte_end":6995554,"line_start":524,"line_end":524,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995555,"byte_end":6995571,"line_start":525,"line_end":525,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995572,"byte_end":6995579,"line_start":526,"line_end":526,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995580,"byte_end":6995603,"line_start":527,"line_end":527,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995604,"byte_end":6995646,"line_start":528,"line_end":528,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995647,"byte_end":6995689,"line_start":529,"line_end":529,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995690,"byte_end":6995738,"line_start":530,"line_end":530,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995739,"byte_end":6995786,"line_start":531,"line_end":531,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995787,"byte_end":6995794,"line_start":532,"line_end":532,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995795,"byte_end":6995806,"line_start":533,"line_end":533,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995807,"byte_end":6995824,"line_start":534,"line_end":534,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996556,"byte_end":6996576,"line_start":556,"line_end":556,"column_start":8,"column_end":28},"name":"cmp_gt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i8_m128i","value":"pub fn cmp_gt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6995985,"byte_end":6996025,"line_start":540,"line_end":540,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996026,"byte_end":6996029,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996030,"byte_end":6996088,"line_start":542,"line_end":542,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996089,"byte_end":6996096,"line_start":543,"line_end":543,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996097,"byte_end":6996120,"line_start":544,"line_end":544,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996121,"byte_end":6996132,"line_start":545,"line_end":545,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996133,"byte_end":6996215,"line_start":546,"line_end":546,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996216,"byte_end":6996241,"line_start":547,"line_end":547,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996242,"byte_end":6996312,"line_start":548,"line_end":548,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996313,"byte_end":6996320,"line_start":549,"line_end":549,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_gt_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996321,"byte_end":6996377,"line_start":550,"line_end":550,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996378,"byte_end":6996454,"line_start":551,"line_end":551,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996455,"byte_end":6996462,"line_start":552,"line_end":552,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996463,"byte_end":6996474,"line_start":553,"line_end":553,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996475,"byte_end":6996492,"line_start":554,"line_end":554,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997125,"byte_end":6997146,"line_start":573,"line_end":573,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i16_m128i","value":"pub fn cmp_gt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996656,"byte_end":6996697,"line_start":560,"line_end":560,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996698,"byte_end":6996701,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996702,"byte_end":6996760,"line_start":562,"line_end":562,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996761,"byte_end":6996768,"line_start":563,"line_end":563,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996769,"byte_end":6996792,"line_start":564,"line_end":564,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996793,"byte_end":6996852,"line_start":565,"line_end":565,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996853,"byte_end":6996914,"line_start":566,"line_end":566,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_gt_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996915,"byte_end":6996972,"line_start":567,"line_end":567,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, -1, -1, -1, -1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6996973,"byte_end":6997023,"line_start":568,"line_end":568,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997024,"byte_end":6997031,"line_start":569,"line_end":569,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997032,"byte_end":6997043,"line_start":570,"line_end":570,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997044,"byte_end":6997061,"line_start":571,"line_end":571,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997638,"byte_end":6997659,"line_start":590,"line_end":590,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i32_m128i","value":"pub fn cmp_gt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997227,"byte_end":6997268,"line_start":577,"line_end":577,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997269,"byte_end":6997272,"line_start":578,"line_end":578,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997273,"byte_end":6997331,"line_start":579,"line_end":579,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997332,"byte_end":6997339,"line_start":580,"line_end":580,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997340,"byte_end":6997363,"line_start":581,"line_end":581,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997364,"byte_end":6997404,"line_start":582,"line_end":582,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997405,"byte_end":6997443,"line_start":583,"line_end":583,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_gt_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997444,"byte_end":6997501,"line_start":584,"line_end":584,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997502,"byte_end":6997536,"line_start":585,"line_end":585,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997537,"byte_end":6997544,"line_start":586,"line_end":586,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997545,"byte_end":6997556,"line_start":587,"line_end":587,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997557,"byte_end":6997574,"line_start":588,"line_end":588,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998083,"byte_end":6998100,"line_start":607,"line_end":607,"column_start":8,"column_end":25},"name":"cmp_gt_mask_m128d","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d","value":"pub fn cmp_gt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997740,"byte_end":6997761,"line_start":594,"line_end":594,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997762,"byte_end":6997765,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997766,"byte_end":6997782,"line_start":596,"line_end":596,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997783,"byte_end":6997790,"line_start":597,"line_end":597,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997791,"byte_end":6997814,"line_start":598,"line_end":598,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997815,"byte_end":6997857,"line_start":599,"line_end":599,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997858,"byte_end":6997900,"line_start":600,"line_end":600,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997901,"byte_end":6997947,"line_start":601,"line_end":601,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997948,"byte_end":6997981,"line_start":602,"line_end":602,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997982,"byte_end":6997989,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6997990,"byte_end":6998001,"line_start":604,"line_end":604,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998002,"byte_end":6998019,"line_start":605,"line_end":605,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998560,"byte_end":6998579,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"cmp_gt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d_s","value":"pub fn cmp_gt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998178,"byte_end":6998222,"line_start":611,"line_end":611,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998223,"byte_end":6998226,"line_start":612,"line_end":612,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998227,"byte_end":6998243,"line_start":613,"line_end":613,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998244,"byte_end":6998251,"line_start":614,"line_end":614,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998252,"byte_end":6998275,"line_start":615,"line_end":615,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998276,"byte_end":6998318,"line_start":616,"line_end":616,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998319,"byte_end":6998361,"line_start":617,"line_end":617,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998362,"byte_end":6998410,"line_start":618,"line_end":618,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998411,"byte_end":6998458,"line_start":619,"line_end":619,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998459,"byte_end":6998466,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998467,"byte_end":6998478,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998479,"byte_end":6998496,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999008,"byte_end":6999025,"line_start":641,"line_end":641,"column_start":8,"column_end":25},"name":"cmp_le_mask_m128d","qualname":"::x86_x64::sse2::cmp_le_mask_m128d","value":"pub fn cmp_le_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998657,"byte_end":6998679,"line_start":628,"line_end":628,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998680,"byte_end":6998683,"line_start":629,"line_end":629,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998684,"byte_end":6998700,"line_start":630,"line_end":630,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998701,"byte_end":6998708,"line_start":631,"line_end":631,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998709,"byte_end":6998732,"line_start":632,"line_end":632,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998733,"byte_end":6998775,"line_start":633,"line_end":633,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998776,"byte_end":6998818,"line_start":634,"line_end":634,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998819,"byte_end":6998865,"line_start":635,"line_end":635,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998866,"byte_end":6998906,"line_start":636,"line_end":636,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998907,"byte_end":6998914,"line_start":637,"line_end":637,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998915,"byte_end":6998926,"line_start":638,"line_end":638,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6998927,"byte_end":6998944,"line_start":639,"line_end":639,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999486,"byte_end":6999505,"line_start":658,"line_end":658,"column_start":8,"column_end":27},"name":"cmp_le_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_le_mask_m128d_s","value":"pub fn cmp_le_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999103,"byte_end":6999148,"line_start":645,"line_end":645,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999149,"byte_end":6999152,"line_start":646,"line_end":646,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999153,"byte_end":6999169,"line_start":647,"line_end":647,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999170,"byte_end":6999177,"line_start":648,"line_end":648,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999178,"byte_end":6999201,"line_start":649,"line_end":649,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999202,"byte_end":6999244,"line_start":650,"line_end":650,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999245,"byte_end":6999287,"line_start":651,"line_end":651,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999288,"byte_end":6999336,"line_start":652,"line_end":652,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999337,"byte_end":6999384,"line_start":653,"line_end":653,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999385,"byte_end":6999392,"line_start":654,"line_end":654,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999393,"byte_end":6999404,"line_start":655,"line_end":655,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999405,"byte_end":6999422,"line_start":656,"line_end":656,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000154,"byte_end":7000174,"line_start":678,"line_end":678,"column_start":8,"column_end":28},"name":"cmp_lt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i8_m128i","value":"pub fn cmp_lt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999583,"byte_end":6999623,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999624,"byte_end":6999627,"line_start":663,"line_end":663,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999628,"byte_end":6999686,"line_start":664,"line_end":664,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999687,"byte_end":6999694,"line_start":665,"line_end":665,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999695,"byte_end":6999718,"line_start":666,"line_end":666,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999719,"byte_end":6999730,"line_start":667,"line_end":667,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999731,"byte_end":6999813,"line_start":668,"line_end":668,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999814,"byte_end":6999839,"line_start":669,"line_end":669,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999840,"byte_end":6999910,"line_start":670,"line_end":670,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999911,"byte_end":6999918,"line_start":671,"line_end":671,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_lt_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999919,"byte_end":6999975,"line_start":672,"line_end":672,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, -1, 0, -1, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":6999976,"byte_end":7000052,"line_start":673,"line_end":673,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000053,"byte_end":7000060,"line_start":674,"line_end":674,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000061,"byte_end":7000072,"line_start":675,"line_end":675,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000073,"byte_end":7000090,"line_start":676,"line_end":676,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000719,"byte_end":7000740,"line_start":695,"line_end":695,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i16_m128i","value":"pub fn cmp_lt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000254,"byte_end":7000295,"line_start":682,"line_end":682,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000296,"byte_end":7000299,"line_start":683,"line_end":683,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000300,"byte_end":7000358,"line_start":684,"line_end":684,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000359,"byte_end":7000366,"line_start":685,"line_end":685,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000367,"byte_end":7000390,"line_start":686,"line_end":686,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000391,"byte_end":7000450,"line_start":687,"line_end":687,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000451,"byte_end":7000512,"line_start":688,"line_end":688,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_lt_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000513,"byte_end":7000570,"line_start":689,"line_end":689,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000571,"byte_end":7000617,"line_start":690,"line_end":690,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000618,"byte_end":7000625,"line_start":691,"line_end":691,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000626,"byte_end":7000637,"line_start":692,"line_end":692,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000638,"byte_end":7000655,"line_start":693,"line_end":693,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001231,"byte_end":7001252,"line_start":712,"line_end":712,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i32_m128i","value":"pub fn cmp_lt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000821,"byte_end":7000862,"line_start":699,"line_end":699,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000863,"byte_end":7000866,"line_start":700,"line_end":700,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000867,"byte_end":7000925,"line_start":701,"line_end":701,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000926,"byte_end":7000933,"line_start":702,"line_end":702,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000934,"byte_end":7000957,"line_start":703,"line_end":703,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000958,"byte_end":7000998,"line_start":704,"line_end":704,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7000999,"byte_end":7001037,"line_start":705,"line_end":705,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_lt_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001038,"byte_end":7001095,"line_start":706,"line_end":706,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001096,"byte_end":7001129,"line_start":707,"line_end":707,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001130,"byte_end":7001137,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001138,"byte_end":7001149,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001150,"byte_end":7001167,"line_start":710,"line_end":710,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001676,"byte_end":7001693,"line_start":729,"line_end":729,"column_start":8,"column_end":25},"name":"cmp_lt_mask_m128d","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d","value":"pub fn cmp_lt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001333,"byte_end":7001354,"line_start":716,"line_end":716,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001355,"byte_end":7001358,"line_start":717,"line_end":717,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001359,"byte_end":7001375,"line_start":718,"line_end":718,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001376,"byte_end":7001383,"line_start":719,"line_end":719,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001384,"byte_end":7001407,"line_start":720,"line_end":720,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 7.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001408,"byte_end":7001450,"line_start":721,"line_end":721,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001451,"byte_end":7001493,"line_start":722,"line_end":722,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001494,"byte_end":7001540,"line_start":723,"line_end":723,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001541,"byte_end":7001574,"line_start":724,"line_end":724,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001575,"byte_end":7001582,"line_start":725,"line_end":725,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001583,"byte_end":7001594,"line_start":726,"line_end":726,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001595,"byte_end":7001612,"line_start":727,"line_end":727,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002152,"byte_end":7002171,"line_start":746,"line_end":746,"column_start":8,"column_end":27},"name":"cmp_lt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d_s","value":"pub fn cmp_lt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lane unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001771,"byte_end":7001814,"line_start":733,"line_end":733,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001815,"byte_end":7001818,"line_start":734,"line_end":734,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001819,"byte_end":7001835,"line_start":735,"line_end":735,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001836,"byte_end":7001843,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001844,"byte_end":7001867,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001868,"byte_end":7001910,"line_start":738,"line_end":738,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001911,"byte_end":7001953,"line_start":739,"line_end":739,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7001954,"byte_end":7002002,"line_start":740,"line_end":740,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002003,"byte_end":7002050,"line_start":741,"line_end":741,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002051,"byte_end":7002058,"line_start":742,"line_end":742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002059,"byte_end":7002070,"line_start":743,"line_end":743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002071,"byte_end":7002088,"line_start":744,"line_end":744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002594,"byte_end":7002612,"line_start":763,"line_end":763,"column_start":8,"column_end":26},"name":"cmp_neq_mask_m128d","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d","value":"pub fn cmp_neq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002249,"byte_end":7002271,"line_start":750,"line_end":750,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002272,"byte_end":7002275,"line_start":751,"line_end":751,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002276,"byte_end":7002292,"line_start":752,"line_end":752,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002293,"byte_end":7002300,"line_start":753,"line_end":753,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002301,"byte_end":7002324,"line_start":754,"line_end":754,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002325,"byte_end":7002367,"line_start":755,"line_end":755,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002368,"byte_end":7002410,"line_start":756,"line_end":756,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002411,"byte_end":7002458,"line_start":757,"line_end":757,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002459,"byte_end":7002492,"line_start":758,"line_end":758,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002493,"byte_end":7002500,"line_start":759,"line_end":759,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002501,"byte_end":7002512,"line_start":760,"line_end":760,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002513,"byte_end":7002530,"line_start":761,"line_end":761,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003074,"byte_end":7003094,"line_start":780,"line_end":780,"column_start":8,"column_end":28},"name":"cmp_neq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d_s","value":"pub fn cmp_neq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lane unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002691,"byte_end":7002735,"line_start":767,"line_end":767,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002736,"byte_end":7002739,"line_start":768,"line_end":768,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002740,"byte_end":7002756,"line_start":769,"line_end":769,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002757,"byte_end":7002764,"line_start":770,"line_end":770,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002765,"byte_end":7002788,"line_start":771,"line_end":771,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002789,"byte_end":7002831,"line_start":772,"line_end":772,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002832,"byte_end":7002874,"line_start":773,"line_end":773,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002875,"byte_end":7002924,"line_start":774,"line_end":774,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002925,"byte_end":7002972,"line_start":775,"line_end":775,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002973,"byte_end":7002980,"line_start":776,"line_end":776,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002981,"byte_end":7002992,"line_start":777,"line_end":777,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7002993,"byte_end":7003010,"line_start":778,"line_end":778,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003521,"byte_end":7003539,"line_start":797,"line_end":797,"column_start":8,"column_end":26},"name":"cmp_nge_mask_m128d","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d","value":"pub fn cmp_nge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003173,"byte_end":7003198,"line_start":784,"line_end":784,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003199,"byte_end":7003202,"line_start":785,"line_end":785,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003203,"byte_end":7003219,"line_start":786,"line_end":786,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003220,"byte_end":7003227,"line_start":787,"line_end":787,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003228,"byte_end":7003251,"line_start":788,"line_end":788,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003252,"byte_end":7003294,"line_start":789,"line_end":789,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003295,"byte_end":7003337,"line_start":790,"line_end":790,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003338,"byte_end":7003385,"line_start":791,"line_end":791,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003386,"byte_end":7003419,"line_start":792,"line_end":792,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003420,"byte_end":7003427,"line_start":793,"line_end":793,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003428,"byte_end":7003439,"line_start":794,"line_end":794,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003440,"byte_end":7003457,"line_start":795,"line_end":795,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003997,"byte_end":7004017,"line_start":814,"line_end":814,"column_start":8,"column_end":28},"name":"cmp_nge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d_s","value":"pub fn cmp_nge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003618,"byte_end":7003665,"line_start":801,"line_end":801,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003666,"byte_end":7003669,"line_start":802,"line_end":802,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003670,"byte_end":7003686,"line_start":803,"line_end":803,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003687,"byte_end":7003694,"line_start":804,"line_end":804,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003695,"byte_end":7003718,"line_start":805,"line_end":805,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003719,"byte_end":7003761,"line_start":806,"line_end":806,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003762,"byte_end":7003804,"line_start":807,"line_end":807,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003805,"byte_end":7003854,"line_start":808,"line_end":808,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003855,"byte_end":7003895,"line_start":809,"line_end":809,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003896,"byte_end":7003903,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003904,"byte_end":7003915,"line_start":811,"line_end":811,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7003916,"byte_end":7003933,"line_start":812,"line_end":812,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004443,"byte_end":7004461,"line_start":831,"line_end":831,"column_start":8,"column_end":26},"name":"cmp_ngt_mask_m128d","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d","value":"pub fn cmp_ngt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004096,"byte_end":7004120,"line_start":818,"line_end":818,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004121,"byte_end":7004124,"line_start":819,"line_end":819,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004125,"byte_end":7004141,"line_start":820,"line_end":820,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004142,"byte_end":7004149,"line_start":821,"line_end":821,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004150,"byte_end":7004173,"line_start":822,"line_end":822,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004174,"byte_end":7004216,"line_start":823,"line_end":823,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004217,"byte_end":7004259,"line_start":824,"line_end":824,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004260,"byte_end":7004307,"line_start":825,"line_end":825,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004308,"byte_end":7004341,"line_start":826,"line_end":826,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004342,"byte_end":7004349,"line_start":827,"line_end":827,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004350,"byte_end":7004361,"line_start":828,"line_end":828,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004362,"byte_end":7004379,"line_start":829,"line_end":829,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004918,"byte_end":7004938,"line_start":848,"line_end":848,"column_start":8,"column_end":28},"name":"cmp_ngt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d_s","value":"pub fn cmp_ngt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004540,"byte_end":7004586,"line_start":835,"line_end":835,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004587,"byte_end":7004590,"line_start":836,"line_end":836,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004591,"byte_end":7004607,"line_start":837,"line_end":837,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004608,"byte_end":7004615,"line_start":838,"line_end":838,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004616,"byte_end":7004639,"line_start":839,"line_end":839,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004640,"byte_end":7004682,"line_start":840,"line_end":840,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004683,"byte_end":7004725,"line_start":841,"line_end":841,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004726,"byte_end":7004775,"line_start":842,"line_end":842,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004776,"byte_end":7004816,"line_start":843,"line_end":843,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004817,"byte_end":7004824,"line_start":844,"line_end":844,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004825,"byte_end":7004836,"line_start":845,"line_end":845,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7004837,"byte_end":7004854,"line_start":846,"line_end":846,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005365,"byte_end":7005383,"line_start":865,"line_end":865,"column_start":8,"column_end":26},"name":"cmp_nle_mask_m128d","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d","value":"pub fn cmp_nle_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005017,"byte_end":7005042,"line_start":852,"line_end":852,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005043,"byte_end":7005046,"line_start":853,"line_end":853,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005047,"byte_end":7005063,"line_start":854,"line_end":854,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005064,"byte_end":7005071,"line_start":855,"line_end":855,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005072,"byte_end":7005095,"line_start":856,"line_end":856,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005096,"byte_end":7005138,"line_start":857,"line_end":857,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005139,"byte_end":7005181,"line_start":858,"line_end":858,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005182,"byte_end":7005229,"line_start":859,"line_end":859,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005230,"byte_end":7005263,"line_start":860,"line_end":860,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005264,"byte_end":7005271,"line_start":861,"line_end":861,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005272,"byte_end":7005283,"line_start":862,"line_end":862,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005284,"byte_end":7005301,"line_start":863,"line_end":863,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005848,"byte_end":7005868,"line_start":882,"line_end":882,"column_start":8,"column_end":28},"name":"cmp_nle_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d_s","value":"pub fn cmp_nle_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005462,"byte_end":7005509,"line_start":869,"line_end":869,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005510,"byte_end":7005513,"line_start":870,"line_end":870,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005514,"byte_end":7005530,"line_start":871,"line_end":871,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005531,"byte_end":7005538,"line_start":872,"line_end":872,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005539,"byte_end":7005562,"line_start":873,"line_end":873,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005563,"byte_end":7005605,"line_start":874,"line_end":874,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005606,"byte_end":7005648,"line_start":875,"line_end":875,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005649,"byte_end":7005698,"line_start":876,"line_end":876,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005699,"byte_end":7005746,"line_start":877,"line_end":877,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005747,"byte_end":7005754,"line_start":878,"line_end":878,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005755,"byte_end":7005766,"line_start":879,"line_end":879,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005767,"byte_end":7005784,"line_start":880,"line_end":880,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006294,"byte_end":7006312,"line_start":899,"line_end":899,"column_start":8,"column_end":26},"name":"cmp_nlt_mask_m128d","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d","value":"pub fn cmp_nlt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005947,"byte_end":7005971,"line_start":886,"line_end":886,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005972,"byte_end":7005975,"line_start":887,"line_end":887,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005976,"byte_end":7005992,"line_start":888,"line_end":888,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7005993,"byte_end":7006000,"line_start":889,"line_end":889,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006001,"byte_end":7006024,"line_start":890,"line_end":890,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006025,"byte_end":7006067,"line_start":891,"line_end":891,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006068,"byte_end":7006110,"line_start":892,"line_end":892,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006111,"byte_end":7006158,"line_start":893,"line_end":893,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006159,"byte_end":7006192,"line_start":894,"line_end":894,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006193,"byte_end":7006200,"line_start":895,"line_end":895,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006201,"byte_end":7006212,"line_start":896,"line_end":896,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006213,"byte_end":7006230,"line_start":897,"line_end":897,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006776,"byte_end":7006796,"line_start":916,"line_end":916,"column_start":8,"column_end":28},"name":"cmp_nlt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d_s","value":"pub fn cmp_nlt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006391,"byte_end":7006437,"line_start":903,"line_end":903,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006438,"byte_end":7006441,"line_start":904,"line_end":904,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006442,"byte_end":7006458,"line_start":905,"line_end":905,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006459,"byte_end":7006466,"line_start":906,"line_end":906,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006467,"byte_end":7006490,"line_start":907,"line_end":907,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006491,"byte_end":7006533,"line_start":908,"line_end":908,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006534,"byte_end":7006576,"line_start":909,"line_end":909,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006577,"byte_end":7006626,"line_start":910,"line_end":910,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006627,"byte_end":7006674,"line_start":911,"line_end":911,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006675,"byte_end":7006682,"line_start":912,"line_end":912,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006683,"byte_end":7006694,"line_start":913,"line_end":913,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006695,"byte_end":7006712,"line_start":914,"line_end":914,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007253,"byte_end":7007276,"line_start":933,"line_end":933,"column_start":8,"column_end":31},"name":"cmp_ordinary_mask_m128d","qualname":"::x86_x64::sse2::cmp_ordinary_mask_m128d","value":"pub fn cmp_ordinary_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006875,"byte_end":7006920,"line_start":920,"line_end":920,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006921,"byte_end":7006924,"line_start":921,"line_end":921,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006925,"byte_end":7006941,"line_start":922,"line_end":922,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006942,"byte_end":7006949,"line_start":923,"line_end":923,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006950,"byte_end":7006973,"line_start":924,"line_end":924,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, f64::NAN]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7006974,"byte_end":7007021,"line_start":925,"line_end":925,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007022,"byte_end":7007064,"line_start":926,"line_end":926,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordinary_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007065,"byte_end":7007117,"line_start":927,"line_end":927,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007118,"byte_end":7007151,"line_start":928,"line_end":928,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007152,"byte_end":7007159,"line_start":929,"line_end":929,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007160,"byte_end":7007171,"line_start":930,"line_end":930,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007172,"byte_end":7007189,"line_start":931,"line_end":931,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007766,"byte_end":7007791,"line_start":950,"line_end":950,"column_start":8,"column_end":33},"name":"cmp_ordinary_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ordinary_mask_m128d_s","value":"pub fn cmp_ordinary_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007355,"byte_end":7007422,"line_start":937,"line_end":937,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007423,"byte_end":7007426,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007427,"byte_end":7007443,"line_start":939,"line_end":939,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007444,"byte_end":7007451,"line_start":940,"line_end":940,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007452,"byte_end":7007475,"line_start":941,"line_end":941,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007476,"byte_end":7007518,"line_start":942,"line_end":942,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007519,"byte_end":7007561,"line_start":943,"line_end":943,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordinary_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007562,"byte_end":7007616,"line_start":944,"line_end":944,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007617,"byte_end":7007664,"line_start":945,"line_end":945,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007665,"byte_end":7007672,"line_start":946,"line_end":946,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007673,"byte_end":7007684,"line_start":947,"line_end":947,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007685,"byte_end":7007702,"line_start":948,"line_end":948,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008239,"byte_end":7008259,"line_start":967,"line_end":967,"column_start":8,"column_end":28},"name":"cmp_unord_mask_m128d","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d","value":"pub fn cmp_unord_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007870,"byte_end":7007909,"line_start":954,"line_end":954,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007910,"byte_end":7007913,"line_start":955,"line_end":955,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007914,"byte_end":7007930,"line_start":956,"line_end":956,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007931,"byte_end":7007938,"line_start":957,"line_end":957,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007939,"byte_end":7007962,"line_start":958,"line_end":958,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7007963,"byte_end":7008010,"line_start":959,"line_end":959,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008011,"byte_end":7008053,"line_start":960,"line_end":960,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008054,"byte_end":7008103,"line_start":961,"line_end":961,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008104,"byte_end":7008137,"line_start":962,"line_end":962,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008138,"byte_end":7008145,"line_start":963,"line_end":963,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008146,"byte_end":7008157,"line_start":964,"line_end":964,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008158,"byte_end":7008175,"line_start":965,"line_end":965,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008747,"byte_end":7008769,"line_start":984,"line_end":984,"column_start":8,"column_end":30},"name":"cmp_unord_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d_s","value":"pub fn cmp_unord_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008340,"byte_end":7008401,"line_start":971,"line_end":971,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008402,"byte_end":7008405,"line_start":972,"line_end":972,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008406,"byte_end":7008422,"line_start":973,"line_end":973,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008423,"byte_end":7008430,"line_start":974,"line_end":974,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008431,"byte_end":7008454,"line_start":975,"line_end":975,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008455,"byte_end":7008502,"line_start":976,"line_end":976,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008503,"byte_end":7008545,"line_start":977,"line_end":977,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008546,"byte_end":7008597,"line_start":978,"line_end":978,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008598,"byte_end":7008645,"line_start":979,"line_end":979,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008646,"byte_end":7008653,"line_start":980,"line_end":980,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008654,"byte_end":7008665,"line_start":981,"line_end":981,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008666,"byte_end":7008683,"line_start":982,"line_end":982,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009169,"byte_end":7009187,"line_start":1000,"line_end":1000,"column_start":8,"column_end":26},"name":"cmp_eq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_i32_m128d_s","value":"pub fn cmp_eq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` equal to.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008850,"byte_end":7008878,"line_start":988,"line_end":988,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008879,"byte_end":7008882,"line_start":989,"line_end":989,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008883,"byte_end":7008900,"line_start":990,"line_end":990,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008901,"byte_end":7008908,"line_start":991,"line_end":991,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008909,"byte_end":7008932,"line_start":992,"line_end":992,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008933,"byte_end":7008975,"line_start":993,"line_end":993,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7008976,"byte_end":7009018,"line_start":994,"line_end":994,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009019,"byte_end":7009067,"line_start":995,"line_end":995,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009068,"byte_end":7009075,"line_start":996,"line_end":996,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009076,"byte_end":7009087,"line_start":997,"line_end":997,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009088,"byte_end":7009105,"line_start":998,"line_end":998,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009592,"byte_end":7009610,"line_start":1016,"line_end":1016,"column_start":8,"column_end":26},"name":"cmp_ge_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_i32_m128d_s","value":"pub fn cmp_ge_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than or equal to.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009257,"byte_end":7009301,"line_start":1004,"line_end":1004,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009302,"byte_end":7009305,"line_start":1005,"line_end":1005,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009306,"byte_end":7009323,"line_start":1006,"line_end":1006,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009324,"byte_end":7009331,"line_start":1007,"line_end":1007,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009332,"byte_end":7009355,"line_start":1008,"line_end":1008,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009356,"byte_end":7009398,"line_start":1009,"line_end":1009,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009399,"byte_end":7009441,"line_start":1010,"line_end":1010,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009442,"byte_end":7009490,"line_start":1011,"line_end":1011,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009491,"byte_end":7009498,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009499,"byte_end":7009510,"line_start":1013,"line_end":1013,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009511,"byte_end":7009528,"line_start":1014,"line_end":1014,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010003,"byte_end":7010021,"line_start":1032,"line_end":1032,"column_start":8,"column_end":26},"name":"cmp_gt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_i32_m128d_s","value":"pub fn cmp_gt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009680,"byte_end":7009712,"line_start":1020,"line_end":1020,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009713,"byte_end":7009716,"line_start":1021,"line_end":1021,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009717,"byte_end":7009734,"line_start":1022,"line_end":1022,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009735,"byte_end":7009742,"line_start":1023,"line_end":1023,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009743,"byte_end":7009766,"line_start":1024,"line_end":1024,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009767,"byte_end":7009809,"line_start":1025,"line_end":1025,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009810,"byte_end":7009852,"line_start":1026,"line_end":1026,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009853,"byte_end":7009901,"line_start":1027,"line_end":1027,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009902,"byte_end":7009909,"line_start":1028,"line_end":1028,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009910,"byte_end":7009921,"line_start":1029,"line_end":1029,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7009922,"byte_end":7009939,"line_start":1030,"line_end":1030,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010423,"byte_end":7010441,"line_start":1048,"line_end":1048,"column_start":8,"column_end":26},"name":"cmp_le_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_le_i32_m128d_s","value":"pub fn cmp_le_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than or equal to.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010091,"byte_end":7010132,"line_start":1036,"line_end":1036,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010133,"byte_end":7010136,"line_start":1037,"line_end":1037,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010137,"byte_end":7010154,"line_start":1038,"line_end":1038,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010155,"byte_end":7010162,"line_start":1039,"line_end":1039,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010163,"byte_end":7010186,"line_start":1040,"line_end":1040,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010187,"byte_end":7010229,"line_start":1041,"line_end":1041,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010230,"byte_end":7010272,"line_start":1042,"line_end":1042,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010273,"byte_end":7010321,"line_start":1043,"line_end":1043,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010322,"byte_end":7010329,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010330,"byte_end":7010341,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010342,"byte_end":7010359,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010831,"byte_end":7010849,"line_start":1064,"line_end":1064,"column_start":8,"column_end":26},"name":"cmp_lt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_i32_m128d_s","value":"pub fn cmp_lt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010511,"byte_end":7010540,"line_start":1052,"line_end":1052,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010541,"byte_end":7010544,"line_start":1053,"line_end":1053,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010545,"byte_end":7010562,"line_start":1054,"line_end":1054,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010563,"byte_end":7010570,"line_start":1055,"line_end":1055,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010571,"byte_end":7010594,"line_start":1056,"line_end":1056,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010595,"byte_end":7010637,"line_start":1057,"line_end":1057,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010638,"byte_end":7010680,"line_start":1058,"line_end":1058,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010681,"byte_end":7010729,"line_start":1059,"line_end":1059,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010730,"byte_end":7010737,"line_start":1060,"line_end":1060,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010738,"byte_end":7010749,"line_start":1061,"line_end":1061,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010750,"byte_end":7010767,"line_start":1062,"line_end":1062,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011240,"byte_end":7011259,"line_start":1080,"line_end":1080,"column_start":8,"column_end":27},"name":"cmp_neq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_i32_m128d_s","value":"pub fn cmp_neq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010919,"byte_end":7010948,"line_start":1068,"line_end":1068,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010949,"byte_end":7010952,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010953,"byte_end":7010970,"line_start":1070,"line_end":1070,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010971,"byte_end":7010978,"line_start":1071,"line_end":1071,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7010979,"byte_end":7011002,"line_start":1072,"line_end":1072,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011003,"byte_end":7011045,"line_start":1073,"line_end":1073,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011046,"byte_end":7011088,"line_start":1074,"line_end":1074,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_neq_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011089,"byte_end":7011138,"line_start":1075,"line_end":1075,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011139,"byte_end":7011146,"line_start":1076,"line_end":1076,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011147,"byte_end":7011158,"line_start":1077,"line_end":1077,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011159,"byte_end":7011176,"line_start":1078,"line_end":1078,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011780,"byte_end":7011818,"line_start":1097,"line_end":1097,"column_start":8,"column_end":46},"name":"convert_to_m128d_from_lower2_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_i32_m128i","value":"pub fn convert_to_m128d_from_lower2_i32_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the lower two `i32` lanes to two `f64` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128d_from_lower2_i32_m128i(a);\n let c = m128d::from_array([1.0, 2.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_pd`]\n * **Assembly:** `cvtdq2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the lower two `i32` lanes to two `f64` lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011330,"byte_end":7011386,"line_start":1084,"line_end":1084,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011387,"byte_end":7011394,"line_start":1085,"line_end":1085,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011395,"byte_end":7011418,"line_start":1086,"line_end":1086,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011419,"byte_end":7011457,"line_start":1087,"line_end":1087,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128d_from_lower2_i32_m128i(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011458,"byte_end":7011512,"line_start":1088,"line_end":1088,"column_start":1,"column_end":55}},{"value":"/ let c = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011513,"byte_end":7011555,"line_start":1089,"line_end":1089,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011556,"byte_end":7011597,"line_start":1090,"line_end":1090,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011598,"byte_end":7011605,"line_start":1091,"line_end":1091,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_pd`]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011606,"byte_end":7011646,"line_start":1092,"line_end":1092,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2pd xmm, xmm`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011647,"byte_end":7011686,"line_start":1093,"line_end":1093,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011687,"byte_end":7011698,"line_start":1094,"line_end":1094,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011699,"byte_end":7011716,"line_start":1095,"line_end":1095,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012331,"byte_end":7012361,"line_start":1114,"line_end":1114,"column_start":8,"column_end":38},"name":"convert_to_m128_from_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128_from_i32_m128i","value":"pub fn convert_to_m128_from_i32_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the four `i32` lanes to four `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128_from_i32_m128i(a);\n let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_ps`]\n * **Assembly:** `cvtdq2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the four `i32` lanes to four `f32` lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011884,"byte_end":7011936,"line_start":1101,"line_end":1101,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011937,"byte_end":7011944,"line_start":1102,"line_end":1102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011945,"byte_end":7011968,"line_start":1103,"line_end":1103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7011969,"byte_end":7012007,"line_start":1104,"line_end":1104,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128_from_i32_m128i(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012008,"byte_end":7012054,"line_start":1105,"line_end":1105,"column_start":1,"column_end":47}},{"value":"/ let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012055,"byte_end":7012106,"line_start":1106,"line_end":1106,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012107,"byte_end":7012148,"line_start":1107,"line_end":1107,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012149,"byte_end":7012156,"line_start":1108,"line_end":1108,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_ps`]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012157,"byte_end":7012197,"line_start":1109,"line_end":1109,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2ps xmm, xmm`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012198,"byte_end":7012237,"line_start":1110,"line_end":1110,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012238,"byte_end":7012249,"line_start":1111,"line_end":1111,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012250,"byte_end":7012267,"line_start":1112,"line_end":1112,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012854,"byte_end":7012885,"line_start":1131,"line_end":1131,"column_start":8,"column_end":39},"name":"convert_to_i32_m128i_from_m128d","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128d","value":"pub fn convert_to_i32_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_i32_m128i_from_m128d(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_epi32`]\n * **Assembly:** `cvtpd2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `i32` lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012425,"byte_end":7012483,"line_start":1118,"line_end":1118,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012484,"byte_end":7012491,"line_start":1119,"line_end":1119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012492,"byte_end":7012515,"line_start":1120,"line_end":1120,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012516,"byte_end":7012558,"line_start":1121,"line_end":1121,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_i32_m128i_from_m128d(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012559,"byte_end":7012606,"line_start":1122,"line_end":1122,"column_start":1,"column_end":48}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012607,"byte_end":7012638,"line_start":1123,"line_end":1123,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012639,"byte_end":7012671,"line_start":1124,"line_end":1124,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012672,"byte_end":7012679,"line_start":1125,"line_end":1125,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_epi32`]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012680,"byte_end":7012720,"line_start":1126,"line_end":1126,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtpd2dq xmm, xmm`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012721,"byte_end":7012760,"line_start":1127,"line_end":1127,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012761,"byte_end":7012772,"line_start":1128,"line_end":1128,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012773,"byte_end":7012790,"line_start":1129,"line_end":1129,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013380,"byte_end":7013406,"line_start":1147,"line_end":1147,"column_start":8,"column_end":34},"name":"convert_to_m128_from_m128d","qualname":"::x86_x64::sse2::convert_to_m128_from_m128d","value":"pub fn convert_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_m128_from_m128d(a);\n assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_ps`]\n * **Assembly:** `cvtpd2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7012951,"byte_end":7013009,"line_start":1135,"line_end":1135,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013010,"byte_end":7013017,"line_start":1136,"line_end":1136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013018,"byte_end":7013041,"line_start":1137,"line_end":1137,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013042,"byte_end":7013084,"line_start":1138,"line_end":1138,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_m128_from_m128d(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013085,"byte_end":7013127,"line_start":1139,"line_end":1139,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013128,"byte_end":7013200,"line_start":1140,"line_end":1140,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013201,"byte_end":7013208,"line_start":1141,"line_end":1141,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_ps`]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013209,"byte_end":7013246,"line_start":1142,"line_end":1142,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtpd2ps xmm, xmm`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013247,"byte_end":7013286,"line_start":1143,"line_end":1143,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013287,"byte_end":7013298,"line_start":1144,"line_end":1144,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013299,"byte_end":7013316,"line_start":1145,"line_end":1145,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013888,"byte_end":7013918,"line_start":1164,"line_end":1164,"column_start":8,"column_end":38},"name":"convert_to_i32_m128i_from_m128","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128","value":"pub fn convert_to_i32_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);\n let b = convert_to_i32_m128i_from_m128(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n * **Intrinsic:** [`_mm_cvtps_epi32`]\n * **Assembly:** `cvtps2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the `f32` lanes to `i32` lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013467,"byte_end":7013509,"line_start":1151,"line_end":1151,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013510,"byte_end":7013517,"line_start":1152,"line_end":1152,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013518,"byte_end":7013541,"line_start":1153,"line_end":1153,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013542,"byte_end":7013593,"line_start":1154,"line_end":1154,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_i32_m128i_from_m128(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013594,"byte_end":7013640,"line_start":1155,"line_end":1155,"column_start":1,"column_end":47}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013641,"byte_end":7013672,"line_start":1156,"line_end":1156,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013673,"byte_end":7013705,"line_start":1157,"line_end":1157,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013706,"byte_end":7013713,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_epi32`]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013714,"byte_end":7013754,"line_start":1159,"line_end":1159,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtps2dq xmm, xmm`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013755,"byte_end":7013794,"line_start":1160,"line_end":1160,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013795,"byte_end":7013806,"line_start":1161,"line_end":1161,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013807,"byte_end":7013824,"line_start":1162,"line_end":1162,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014422,"byte_end":7014455,"line_start":1180,"line_end":1180,"column_start":8,"column_end":41},"name":"convert_to_m128d_from_lower2_m128","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_m128","value":"pub fn convert_to_m128d_from_lower2_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);\n let b = convert_to_m128d_from_lower2_m128(a);\n assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);\n ```\n * **Intrinsic:** [`_mm_cvtps_pd`]\n * **Assembly:** `cvtps2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7013983,"byte_end":7014041,"line_start":1168,"line_end":1168,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014042,"byte_end":7014049,"line_start":1169,"line_end":1169,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014050,"byte_end":7014073,"line_start":1170,"line_end":1170,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014074,"byte_end":7014125,"line_start":1171,"line_end":1171,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_m128d_from_lower2_m128(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014126,"byte_end":7014175,"line_start":1172,"line_end":1172,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014176,"byte_end":7014242,"line_start":1173,"line_end":1173,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014243,"byte_end":7014250,"line_start":1174,"line_end":1174,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_pd`]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014251,"byte_end":7014288,"line_start":1175,"line_end":1175,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtps2pd xmm, xmm`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014289,"byte_end":7014328,"line_start":1176,"line_end":1176,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014329,"byte_end":7014340,"line_start":1177,"line_end":1177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014341,"byte_end":7014358,"line_start":1178,"line_end":1178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014801,"byte_end":7014821,"line_start":1194,"line_end":1194,"column_start":8,"column_end":28},"name":"get_f64_from_m128d_s","qualname":"::x86_x64::sse2::get_f64_from_m128d_s","value":"pub fn get_f64_from_m128d_s(m128d) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Gets the lower lane as an `f64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_f64_from_m128d_s(a);\n assert_eq!(b, 1.0_f64);\n ```\n","sig":null,"attributes":[{"value":"/ Gets the lower lane as an `f64` value.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014517,"byte_end":7014559,"line_start":1184,"line_end":1184,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014560,"byte_end":7014567,"line_start":1185,"line_end":1185,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014568,"byte_end":7014591,"line_start":1186,"line_end":1186,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014592,"byte_end":7014634,"line_start":1187,"line_end":1187,"column_start":1,"column_end":43}},{"value":"/ let b = get_f64_from_m128d_s(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014635,"byte_end":7014671,"line_start":1188,"line_end":1188,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1.0_f64);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014672,"byte_end":7014699,"line_start":1189,"line_end":1189,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014700,"byte_end":7014707,"line_start":1190,"line_end":1190,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014708,"byte_end":7014719,"line_start":1191,"line_end":1191,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014720,"byte_end":7014737,"line_start":1192,"line_end":1192,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015162,"byte_end":7015182,"line_start":1208,"line_end":1208,"column_start":8,"column_end":28},"name":"get_i32_from_m128d_s","qualname":"::x86_x64::sse2::get_i32_from_m128d_s","value":"pub fn get_i32_from_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i32_from_m128d_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014876,"byte_end":7014922,"line_start":1198,"line_end":1198,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014923,"byte_end":7014930,"line_start":1199,"line_end":1199,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014931,"byte_end":7014954,"line_start":1200,"line_end":1200,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014955,"byte_end":7014997,"line_start":1201,"line_end":1201,"column_start":1,"column_end":43}},{"value":"/ let b = get_i32_from_m128d_s(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7014998,"byte_end":7015034,"line_start":1202,"line_end":1202,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015035,"byte_end":7015060,"line_start":1203,"line_end":1203,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015061,"byte_end":7015068,"line_start":1204,"line_end":1204,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015069,"byte_end":7015080,"line_start":1205,"line_end":1205,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015081,"byte_end":7015098,"line_start":1206,"line_end":1206,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015555,"byte_end":7015575,"line_start":1223,"line_end":1223,"column_start":8,"column_end":28},"name":"get_i64_from_m128d_s","qualname":"::x86_x64::sse2::get_i64_from_m128d_s","value":"pub fn get_i64_from_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i64_from_m128d_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015238,"byte_end":7015284,"line_start":1212,"line_end":1212,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015285,"byte_end":7015292,"line_start":1213,"line_end":1213,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015293,"byte_end":7015316,"line_start":1214,"line_end":1214,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015317,"byte_end":7015359,"line_start":1215,"line_end":1215,"column_start":1,"column_end":43}},{"value":"/ let b = get_i64_from_m128d_s(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015360,"byte_end":7015396,"line_start":1216,"line_end":1216,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015397,"byte_end":7015422,"line_start":1217,"line_end":1217,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015423,"byte_end":7015430,"line_start":1218,"line_end":1218,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015431,"byte_end":7015442,"line_start":1219,"line_end":1219,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015443,"byte_end":7015460,"line_start":1220,"line_end":1220,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015461,"byte_end":7015491,"line_start":1221,"line_end":1221,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016146,"byte_end":7016176,"line_start":1241,"line_end":1241,"column_start":8,"column_end":38},"name":"convert_m128d_s_replace_m128_s","qualname":"::x86_x64::sse2::convert_m128d_s_replace_m128_s","value":"pub fn convert_m128d_s_replace_m128_s(m128, m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the low `f64` to `f32` and replaces the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let b = m128d::from_array([1.0, 2.5]);\n let c = convert_m128d_s_replace_m128_s(a, b);\n assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsd_ss`]\n * **Assembly:** `cvtsd2ss xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the low `f64` to `f32` and replaces the low lane of the input.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015631,"byte_end":7015706,"line_start":1227,"line_end":1227,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015707,"byte_end":7015714,"line_start":1228,"line_end":1228,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015715,"byte_end":7015738,"line_start":1229,"line_end":1229,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015739,"byte_end":7015790,"line_start":1230,"line_end":1230,"column_start":1,"column_end":52}},{"value":"/ let b = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015791,"byte_end":7015833,"line_start":1231,"line_end":1231,"column_start":1,"column_end":43}},{"value":"/ let c = convert_m128d_s_replace_m128_s(a, b);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015834,"byte_end":7015883,"line_start":1232,"line_end":1232,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015884,"byte_end":7015935,"line_start":1233,"line_end":1233,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015936,"byte_end":7015943,"line_start":1234,"line_end":1234,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsd_ss`]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015944,"byte_end":7015981,"line_start":1235,"line_end":1235,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtsd2ss xmm, xmm`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7015982,"byte_end":7016021,"line_start":1236,"line_end":1236,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016022,"byte_end":7016033,"line_start":1237,"line_end":1237,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016034,"byte_end":7016051,"line_start":1238,"line_end":1238,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016052,"byte_end":7016082,"line_start":1239,"line_end":1239,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016533,"byte_end":7016553,"line_start":1255,"line_end":1255,"column_start":8,"column_end":28},"name":"get_i32_from_m128i_s","qualname":"::x86_x64::sse2::get_i32_from_m128i_s","value":"pub fn get_i32_from_m128i_s(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 3, 5, 7]);\n let b = get_i32_from_m128i_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016251,"byte_end":7016297,"line_start":1245,"line_end":1245,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016298,"byte_end":7016305,"line_start":1246,"line_end":1246,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016306,"byte_end":7016329,"line_start":1247,"line_end":1247,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 3, 5, 7]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016330,"byte_end":7016368,"line_start":1248,"line_end":1248,"column_start":1,"column_end":39}},{"value":"/ let b = get_i32_from_m128i_s(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016369,"byte_end":7016405,"line_start":1249,"line_end":1249,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016406,"byte_end":7016431,"line_start":1250,"line_end":1250,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016432,"byte_end":7016439,"line_start":1251,"line_end":1251,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016440,"byte_end":7016451,"line_start":1252,"line_end":1252,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016452,"byte_end":7016469,"line_start":1253,"line_end":1253,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016923,"byte_end":7016943,"line_start":1270,"line_end":1270,"column_start":8,"column_end":28},"name":"get_i64_from_m128i_s","qualname":"::x86_x64::sse2::get_i64_from_m128i_s","value":"pub fn get_i64_from_m128i_s(m128i) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 3]);\n let b = get_i64_from_m128i_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016612,"byte_end":7016658,"line_start":1259,"line_end":1259,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016659,"byte_end":7016666,"line_start":1260,"line_end":1260,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016667,"byte_end":7016690,"line_start":1261,"line_end":1261,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 3]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016691,"byte_end":7016727,"line_start":1262,"line_end":1262,"column_start":1,"column_end":37}},{"value":"/ let b = get_i64_from_m128i_s(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016728,"byte_end":7016764,"line_start":1263,"line_end":1263,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016765,"byte_end":7016790,"line_start":1264,"line_end":1264,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016791,"byte_end":7016798,"line_start":1265,"line_end":1265,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016799,"byte_end":7016810,"line_start":1266,"line_end":1266,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016811,"byte_end":7016828,"line_start":1267,"line_end":1267,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7016829,"byte_end":7016859,"line_start":1268,"line_end":1268,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017417,"byte_end":7017444,"line_start":1286,"line_end":1286,"column_start":8,"column_end":35},"name":"convert_i32_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i32_replace_m128d_s","value":"pub fn convert_i32_replace_m128d_s(m128d, i32) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i32_replace_m128d_s(a, 5_i32);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_sd`]\n * **Assembly:** `cvtsi2sd xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f64` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017002,"byte_end":7017067,"line_start":1274,"line_end":1274,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017068,"byte_end":7017075,"line_start":1275,"line_end":1275,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017076,"byte_end":7017099,"line_start":1276,"line_end":1276,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017100,"byte_end":7017142,"line_start":1277,"line_end":1277,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i32_replace_m128d_s(a, 5_i32);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017143,"byte_end":7017193,"line_start":1278,"line_end":1278,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017194,"byte_end":7017235,"line_start":1279,"line_end":1279,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017236,"byte_end":7017243,"line_start":1280,"line_end":1280,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_sd`]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017244,"byte_end":7017283,"line_start":1281,"line_end":1281,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r32`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017284,"byte_end":7017323,"line_start":1282,"line_end":1282,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017324,"byte_end":7017335,"line_start":1283,"line_end":1283,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017336,"byte_end":7017353,"line_start":1284,"line_end":1284,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017858,"byte_end":7017873,"line_start":1300,"line_end":1300,"column_start":8,"column_end":23},"name":"set_i32_m128i_s","qualname":"::x86_x64::sse2::set_i32_m128i_s","value":"pub fn set_i32_m128i_s(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i32; 4] = set_i32_m128i_s(1_i32).into();\n let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017520,"byte_end":7017593,"line_start":1290,"line_end":1290,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017594,"byte_end":7017601,"line_start":1291,"line_end":1291,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017602,"byte_end":7017625,"line_start":1292,"line_end":1292,"column_start":1,"column_end":24}},{"value":"/ let a: [i32; 4] = set_i32_m128i_s(1_i32).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017626,"byte_end":7017678,"line_start":1293,"line_end":1293,"column_start":1,"column_end":53}},{"value":"/ let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017679,"byte_end":7017734,"line_start":1294,"line_end":1294,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017735,"byte_end":7017756,"line_start":1295,"line_end":1295,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017757,"byte_end":7017764,"line_start":1296,"line_end":1296,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017765,"byte_end":7017776,"line_start":1297,"line_end":1297,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017777,"byte_end":7017794,"line_start":1298,"line_end":1298,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018383,"byte_end":7018410,"line_start":1317,"line_end":1317,"column_start":8,"column_end":35},"name":"convert_i64_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i64_replace_m128d_s","value":"pub fn convert_i64_replace_m128d_s(m128d, i64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i64` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i64_replace_m128d_s(a, 5_i64);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi64_sd`]\n * **Assembly:** `cvtsi2sd xmm, r64`\n","sig":null,"attributes":[{"value":"/ Convert `i64` to `f64` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7017937,"byte_end":7018002,"line_start":1304,"line_end":1304,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018003,"byte_end":7018010,"line_start":1305,"line_end":1305,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018011,"byte_end":7018034,"line_start":1306,"line_end":1306,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018035,"byte_end":7018077,"line_start":1307,"line_end":1307,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i64_replace_m128d_s(a, 5_i64);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018078,"byte_end":7018128,"line_start":1308,"line_end":1308,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018129,"byte_end":7018170,"line_start":1309,"line_end":1309,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018171,"byte_end":7018178,"line_start":1310,"line_end":1310,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi64_sd`]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018179,"byte_end":7018218,"line_start":1311,"line_end":1311,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r64`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018219,"byte_end":7018258,"line_start":1312,"line_end":1312,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018259,"byte_end":7018270,"line_start":1313,"line_end":1313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018271,"byte_end":7018288,"line_start":1314,"line_end":1314,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018289,"byte_end":7018319,"line_start":1315,"line_end":1315,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018853,"byte_end":7018868,"line_start":1332,"line_end":1332,"column_start":8,"column_end":23},"name":"set_i64_m128i_s","qualname":"::x86_x64::sse2::set_i64_m128i_s","value":"pub fn set_i64_m128i_s(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i64; 2] = set_i64_m128i_s(1_i64).into();\n let b: [i64; 2] = m128i::from([1_i64, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018486,"byte_end":7018559,"line_start":1321,"line_end":1321,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018560,"byte_end":7018567,"line_start":1322,"line_end":1322,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018568,"byte_end":7018591,"line_start":1323,"line_end":1323,"column_start":1,"column_end":24}},{"value":"/ let a: [i64; 2] = set_i64_m128i_s(1_i64).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018592,"byte_end":7018644,"line_start":1324,"line_end":1324,"column_start":1,"column_end":53}},{"value":"/ let b: [i64; 2] = m128i::from([1_i64, 0]).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018645,"byte_end":7018698,"line_start":1325,"line_end":1325,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018699,"byte_end":7018720,"line_start":1326,"line_end":1326,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018721,"byte_end":7018728,"line_start":1327,"line_end":1327,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018729,"byte_end":7018740,"line_start":1328,"line_end":1328,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018741,"byte_end":7018758,"line_start":1329,"line_end":1329,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018759,"byte_end":7018789,"line_start":1330,"line_end":1330,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019406,"byte_end":7019436,"line_start":1349,"line_end":1349,"column_start":8,"column_end":38},"name":"convert_m128_s_replace_m128d_s","qualname":"::x86_x64::sse2::convert_m128_s_replace_m128d_s","value":"pub fn convert_m128_s_replace_m128d_s(m128d, m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower `f32` to `f64` and replace the low lane of the input\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let c = convert_m128_s_replace_m128d_s(a, b);\n assert_eq!(c.to_array(), [3.0, 2.5]);\n ```\n * **Intrinsic:** [`_mm_cvtss_sd`]\n * **Assembly:** `cvtss2sd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the lower `f32` to `f64` and replace the low lane of the input","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7018932,"byte_end":7019007,"line_start":1336,"line_end":1336,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019008,"byte_end":7019015,"line_start":1337,"line_end":1337,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019016,"byte_end":7019039,"line_start":1338,"line_end":1338,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019040,"byte_end":7019082,"line_start":1339,"line_end":1339,"column_start":1,"column_end":43}},{"value":"/ let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019083,"byte_end":7019134,"line_start":1340,"line_end":1340,"column_start":1,"column_end":52}},{"value":"/ let c = convert_m128_s_replace_m128d_s(a, b);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019135,"byte_end":7019184,"line_start":1341,"line_end":1341,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019185,"byte_end":7019226,"line_start":1342,"line_end":1342,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019227,"byte_end":7019234,"line_start":1343,"line_end":1343,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtss_sd`]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019235,"byte_end":7019272,"line_start":1344,"line_end":1344,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtss2sd xmm, xmm`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019273,"byte_end":7019312,"line_start":1345,"line_end":1345,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019313,"byte_end":7019324,"line_start":1346,"line_end":1346,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019325,"byte_end":7019342,"line_start":1347,"line_end":1347,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019857,"byte_end":7019880,"line_start":1363,"line_end":1363,"column_start":8,"column_end":31},"name":"truncate_m128d_to_m128i","qualname":"::x86_x64::sse2::truncate_m128d_to_m128i","value":"pub fn truncate_m128d_to_m128i(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.1, 2.6]);\n let b = truncate_m128d_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019513,"byte_end":7019589,"line_start":1353,"line_end":1353,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019590,"byte_end":7019597,"line_start":1354,"line_end":1354,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019598,"byte_end":7019621,"line_start":1355,"line_end":1355,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.1, 2.6]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019622,"byte_end":7019664,"line_start":1356,"line_end":1356,"column_start":1,"column_end":43}},{"value":"/ let b = truncate_m128d_to_m128i(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019665,"byte_end":7019704,"line_start":1357,"line_end":1357,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019705,"byte_end":7019755,"line_start":1358,"line_end":1358,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019756,"byte_end":7019763,"line_start":1359,"line_end":1359,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019764,"byte_end":7019775,"line_start":1360,"line_end":1360,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019776,"byte_end":7019793,"line_start":1361,"line_end":1361,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020267,"byte_end":7020289,"line_start":1377,"line_end":1377,"column_start":8,"column_end":30},"name":"truncate_m128_to_m128i","qualname":"::x86_x64::sse2::truncate_m128_to_m128i","value":"pub fn truncate_m128_to_m128i(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);\n let b = truncate_m128_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f32` lanes to `i32` lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019947,"byte_end":7019991,"line_start":1367,"line_end":1367,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7019992,"byte_end":7019999,"line_start":1368,"line_end":1368,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020000,"byte_end":7020023,"line_start":1369,"line_end":1369,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020024,"byte_end":7020075,"line_start":1370,"line_end":1370,"column_start":1,"column_end":52}},{"value":"/ let b = truncate_m128_to_m128i(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020076,"byte_end":7020114,"line_start":1371,"line_end":1371,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020115,"byte_end":7020165,"line_start":1372,"line_end":1372,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020166,"byte_end":7020173,"line_start":1373,"line_end":1373,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020174,"byte_end":7020185,"line_start":1374,"line_end":1374,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020186,"byte_end":7020203,"line_start":1375,"line_end":1375,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020625,"byte_end":7020648,"line_start":1390,"line_end":1390,"column_start":8,"column_end":31},"name":"truncate_to_i32_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i32_m128d_s","value":"pub fn truncate_to_i32_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i32`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i32`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020355,"byte_end":7020397,"line_start":1381,"line_end":1381,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020398,"byte_end":7020405,"line_start":1382,"line_end":1382,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020406,"byte_end":7020429,"line_start":1383,"line_end":1383,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020430,"byte_end":7020472,"line_start":1384,"line_end":1384,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020473,"byte_end":7020523,"line_start":1385,"line_end":1385,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020524,"byte_end":7020531,"line_start":1386,"line_end":1386,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020532,"byte_end":7020543,"line_start":1387,"line_end":1387,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020544,"byte_end":7020561,"line_start":1388,"line_end":1388,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021006,"byte_end":7021029,"line_start":1404,"line_end":1404,"column_start":8,"column_end":31},"name":"truncate_to_i64_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i64_m128d_s","value":"pub fn truncate_to_i64_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i64`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i64`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020705,"byte_end":7020747,"line_start":1394,"line_end":1394,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020748,"byte_end":7020755,"line_start":1395,"line_end":1395,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020756,"byte_end":7020779,"line_start":1396,"line_end":1396,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020780,"byte_end":7020822,"line_start":1397,"line_end":1397,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020823,"byte_end":7020873,"line_start":1398,"line_end":1398,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020874,"byte_end":7020881,"line_start":1399,"line_end":1399,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020882,"byte_end":7020893,"line_start":1400,"line_end":1400,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020894,"byte_end":7020911,"line_start":1401,"line_end":1401,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7020912,"byte_end":7020942,"line_start":1402,"line_end":1402,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021405,"byte_end":7021414,"line_start":1419,"line_end":1419,"column_start":8,"column_end":17},"name":"div_m128d","qualname":"::x86_x64::sse2::div_m128d","value":"pub fn div_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 42.0]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = div_m128d(a, b).to_array();\n assert_eq!(c, [0.92, -7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021086,"byte_end":7021107,"line_start":1408,"line_end":1408,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021108,"byte_end":7021115,"line_start":1409,"line_end":1409,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021116,"byte_end":7021139,"line_start":1410,"line_end":1410,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 42.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021140,"byte_end":7021184,"line_start":1411,"line_end":1411,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021185,"byte_end":7021230,"line_start":1412,"line_end":1412,"column_start":1,"column_end":46}},{"value":"/ let c = div_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021231,"byte_end":7021270,"line_start":1413,"line_end":1413,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [0.92, -7.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021271,"byte_end":7021303,"line_start":1414,"line_end":1414,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021304,"byte_end":7021311,"line_start":1415,"line_end":1415,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021312,"byte_end":7021323,"line_start":1416,"line_end":1416,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021324,"byte_end":7021341,"line_start":1417,"line_end":1417,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021837,"byte_end":7021848,"line_start":1434,"line_end":1434,"column_start":8,"column_end":19},"name":"div_m128d_s","qualname":"::x86_x64::sse2::div_m128d_s","value":"pub fn div_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a / b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = div_m128d_s(a, b).to_array();\n assert_eq!(c, [0.92, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a / b`, high lane unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021490,"byte_end":7021535,"line_start":1423,"line_end":1423,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021536,"byte_end":7021543,"line_start":1424,"line_end":1424,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021544,"byte_end":7021567,"line_start":1425,"line_end":1425,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021568,"byte_end":7021612,"line_start":1426,"line_end":1426,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021613,"byte_end":7021660,"line_start":1427,"line_end":1427,"column_start":1,"column_end":48}},{"value":"/ let c = div_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021661,"byte_end":7021702,"line_start":1428,"line_end":1428,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.92, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021703,"byte_end":7021735,"line_start":1429,"line_end":1429,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021736,"byte_end":7021743,"line_start":1430,"line_end":1430,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021744,"byte_end":7021755,"line_start":1431,"line_end":1431,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7021756,"byte_end":7021773,"line_start":1432,"line_end":1432,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024424,"byte_end":7024434,"line_start":1510,"line_end":1510,"column_start":8,"column_end":18},"name":"load_m128d","qualname":"::x86_x64::sse2::load_m128d","value":"pub fn load_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_m128d(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024135,"byte_end":7024175,"line_start":1500,"line_end":1500,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024176,"byte_end":7024183,"line_start":1501,"line_end":1501,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024184,"byte_end":7024207,"line_start":1502,"line_end":1502,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024208,"byte_end":7024252,"line_start":1503,"line_end":1503,"column_start":1,"column_end":45}},{"value":"/ let b = load_m128d(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024253,"byte_end":7024280,"line_start":1504,"line_end":1504,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024281,"byte_end":7024322,"line_start":1505,"line_end":1505,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024323,"byte_end":7024330,"line_start":1506,"line_end":1506,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024331,"byte_end":7024342,"line_start":1507,"line_end":1507,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024343,"byte_end":7024360,"line_start":1508,"line_end":1508,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024888,"byte_end":7024908,"line_start":1525,"line_end":1525,"column_start":8,"column_end":28},"name":"load_f64_splat_m128d","qualname":"::x86_x64::sse2::load_f64_splat_m128d","value":"pub fn load_f64_splat_m128d(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f64` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_splat_m128d(&a);\n assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f64` reference into all lanes of a register.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024525,"byte_end":7024584,"line_start":1514,"line_end":1514,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024585,"byte_end":7024592,"line_start":1515,"line_end":1515,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024593,"byte_end":7024616,"line_start":1516,"line_end":1516,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024617,"byte_end":7024633,"line_start":1517,"line_end":1517,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_splat_m128d(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024634,"byte_end":7024671,"line_start":1518,"line_end":1518,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024672,"byte_end":7024741,"line_start":1519,"line_end":1519,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024742,"byte_end":7024749,"line_start":1520,"line_end":1520,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024750,"byte_end":7024761,"line_start":1521,"line_end":1521,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024762,"byte_end":7024779,"line_start":1522,"line_end":1522,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024780,"byte_end":7024824,"line_start":1523,"line_end":1523,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025326,"byte_end":7025342,"line_start":1540,"line_end":1540,"column_start":8,"column_end":24},"name":"load_f64_m128d_s","qualname":"::x86_x64::sse2::load_f64_m128d_s","value":"pub fn load_f64_m128d_s(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_m128d_s(&a);\n assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into the low lane of the register.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7024968,"byte_end":7025026,"line_start":1529,"line_end":1529,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025027,"byte_end":7025034,"line_start":1530,"line_end":1530,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025035,"byte_end":7025058,"line_start":1531,"line_end":1531,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025059,"byte_end":7025075,"line_start":1532,"line_end":1532,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_m128d_s(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025076,"byte_end":7025109,"line_start":1533,"line_end":1533,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025110,"byte_end":7025179,"line_start":1534,"line_end":1534,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025180,"byte_end":7025187,"line_start":1535,"line_end":1535,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025188,"byte_end":7025199,"line_start":1536,"line_end":1536,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025200,"byte_end":7025217,"line_start":1537,"line_end":1537,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025218,"byte_end":7025262,"line_start":1538,"line_end":1538,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":703},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025700,"byte_end":7025710,"line_start":1554,"line_end":1554,"column_start":8,"column_end":18},"name":"load_m128i","qualname":"::x86_x64::sse2::load_m128i","value":"pub fn load_m128i(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = load_m128i(&a);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025401,"byte_end":7025441,"line_start":1544,"line_end":1544,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025442,"byte_end":7025449,"line_start":1545,"line_end":1545,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025450,"byte_end":7025473,"line_start":1546,"line_end":1546,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025474,"byte_end":7025512,"line_start":1547,"line_end":1547,"column_start":1,"column_end":39}},{"value":"/ let b = load_m128i(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025513,"byte_end":7025540,"line_start":1548,"line_end":1548,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025541,"byte_end":7025598,"line_start":1549,"line_end":1549,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025599,"byte_end":7025606,"line_start":1550,"line_end":1550,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025607,"byte_end":7025618,"line_start":1551,"line_end":1551,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025619,"byte_end":7025636,"line_start":1552,"line_end":1552,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026157,"byte_end":7026180,"line_start":1569,"line_end":1569,"column_start":8,"column_end":31},"name":"load_replace_high_m128d","qualname":"::x86_x64::sse2::load_replace_high_m128d","value":"pub fn load_replace_high_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_high_m128d(a, &double);\n assert_eq!(b.to_array(), [1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the high lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025808,"byte_end":7025873,"line_start":1558,"line_end":1558,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025874,"byte_end":7025881,"line_start":1559,"line_end":1559,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025882,"byte_end":7025905,"line_start":1560,"line_end":1560,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025906,"byte_end":7025942,"line_start":1561,"line_end":1561,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025943,"byte_end":7025964,"line_start":1562,"line_end":1562,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_high_m128d(a, &double);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7025965,"byte_end":7026013,"line_start":1563,"line_end":1563,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(b.to_array(), [1.0, 7.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026014,"byte_end":7026055,"line_start":1564,"line_end":1564,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026056,"byte_end":7026063,"line_start":1565,"line_end":1565,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026064,"byte_end":7026075,"line_start":1566,"line_end":1566,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026076,"byte_end":7026093,"line_start":1567,"line_end":1567,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026549,"byte_end":7026565,"line_start":1583,"line_end":1583,"column_start":8,"column_end":24},"name":"load_i64_m128i_s","qualname":"::x86_x64::sse2::load_i64_m128i_s","value":"pub fn load_i64_m128i_s(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the low `i64` into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = load_i64_m128i_s(&a);\n assert_eq!([1_i64, 0], <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the low `i64` into a register.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026255,"byte_end":7026295,"line_start":1573,"line_end":1573,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026296,"byte_end":7026303,"line_start":1574,"line_end":1574,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026304,"byte_end":7026327,"line_start":1575,"line_end":1575,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026328,"byte_end":7026364,"line_start":1576,"line_end":1576,"column_start":1,"column_end":37}},{"value":"/ let b = load_i64_m128i_s(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026365,"byte_end":7026398,"line_start":1577,"line_end":1577,"column_start":1,"column_end":34}},{"value":"/ assert_eq!([1_i64, 0], <[i64; 2]>::from(b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026399,"byte_end":7026447,"line_start":1578,"line_end":1578,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026448,"byte_end":7026455,"line_start":1579,"line_end":1579,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026456,"byte_end":7026467,"line_start":1580,"line_end":1580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026468,"byte_end":7026485,"line_start":1581,"line_end":1581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027011,"byte_end":7027033,"line_start":1598,"line_end":1598,"column_start":8,"column_end":30},"name":"load_replace_low_m128d","qualname":"::x86_x64::sse2::load_replace_low_m128d","value":"pub fn load_replace_low_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_low_m128d(a, &double);\n assert_eq!(b.to_array(), [7.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the low lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026664,"byte_end":7026728,"line_start":1587,"line_end":1587,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026729,"byte_end":7026736,"line_start":1588,"line_end":1588,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026737,"byte_end":7026760,"line_start":1589,"line_end":1589,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026761,"byte_end":7026797,"line_start":1590,"line_end":1590,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026798,"byte_end":7026819,"line_start":1591,"line_end":1591,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_low_m128d(a, &double);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026820,"byte_end":7026867,"line_start":1592,"line_end":1592,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(b.to_array(), [7.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026868,"byte_end":7026909,"line_start":1593,"line_end":1593,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026910,"byte_end":7026917,"line_start":1594,"line_end":1594,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026918,"byte_end":7026929,"line_start":1595,"line_end":1595,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7026930,"byte_end":7026947,"line_start":1596,"line_end":1596,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027455,"byte_end":7027473,"line_start":1612,"line_end":1612,"column_start":8,"column_end":26},"name":"load_reverse_m128d","qualname":"::x86_x64::sse2::load_reverse_m128d","value":"pub fn load_reverse_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_reverse_m128d(&a);\n assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027108,"byte_end":7027168,"line_start":1602,"line_end":1602,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027169,"byte_end":7027176,"line_start":1603,"line_end":1603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027177,"byte_end":7027200,"line_start":1604,"line_end":1604,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027201,"byte_end":7027245,"line_start":1605,"line_end":1605,"column_start":1,"column_end":45}},{"value":"/ let b = load_reverse_m128d(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027246,"byte_end":7027281,"line_start":1606,"line_end":1606,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027282,"byte_end":7027353,"line_start":1607,"line_end":1607,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027354,"byte_end":7027361,"line_start":1608,"line_end":1608,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027362,"byte_end":7027373,"line_start":1609,"line_end":1609,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027374,"byte_end":7027391,"line_start":1610,"line_end":1610,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028041,"byte_end":7028061,"line_start":1630,"line_end":1630,"column_start":8,"column_end":28},"name":"load_unaligned_m128d","qualname":"::x86_x64::sse2::load_unaligned_m128d","value":"pub fn load_unaligned_m128d(&[f64; ]) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027565,"byte_end":7027605,"line_start":1616,"line_end":1616,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027606,"byte_end":7027609,"line_start":1617,"line_end":1617,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027610,"byte_end":7027688,"line_start":1618,"line_end":1618,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 8-byte","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027689,"byte_end":7027769,"line_start":1619,"line_end":1619,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027770,"byte_end":7027782,"line_start":1620,"line_end":1620,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027783,"byte_end":7027790,"line_start":1621,"line_end":1621,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027791,"byte_end":7027814,"line_start":1622,"line_end":1622,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0];","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027815,"byte_end":7027840,"line_start":1623,"line_end":1623,"column_start":1,"column_end":26}},{"value":"/ let b = load_unaligned_m128d(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027841,"byte_end":7027878,"line_start":1624,"line_end":1624,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027879,"byte_end":7027939,"line_start":1625,"line_end":1625,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027940,"byte_end":7027947,"line_start":1626,"line_end":1626,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027948,"byte_end":7027959,"line_start":1627,"line_end":1627,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7027960,"byte_end":7027977,"line_start":1628,"line_end":1628,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028687,"byte_end":7028707,"line_start":1649,"line_end":1649,"column_start":8,"column_end":28},"name":"load_unaligned_m128i","qualname":"::x86_x64::sse2::load_unaligned_m128i","value":"pub fn load_unaligned_m128i(&[u8; ]) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028159,"byte_end":7028199,"line_start":1634,"line_end":1634,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028200,"byte_end":7028203,"line_start":1635,"line_end":1635,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028204,"byte_end":7028282,"line_start":1636,"line_end":1636,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is less","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028283,"byte_end":7028356,"line_start":1637,"line_end":1637,"column_start":1,"column_end":74}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028357,"byte_end":7028369,"line_start":1638,"line_end":1638,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028370,"byte_end":7028377,"line_start":1639,"line_end":1639,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028378,"byte_end":7028401,"line_start":1640,"line_end":1640,"column_start":1,"column_end":24}},{"value":"/ let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028402,"byte_end":7028470,"line_start":1641,"line_end":1641,"column_start":1,"column_end":69}},{"value":"/ let b = load_unaligned_m128i(&a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028471,"byte_end":7028508,"line_start":1642,"line_end":1642,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, <[u8; 16]>::from(b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028509,"byte_end":7028548,"line_start":1643,"line_end":1643,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028549,"byte_end":7028556,"line_start":1644,"line_end":1644,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028557,"byte_end":7028568,"line_start":1645,"line_end":1645,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028569,"byte_end":7028586,"line_start":1646,"line_end":1646,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028587,"byte_end":7028623,"line_start":1647,"line_end":1647,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029288,"byte_end":7029316,"line_start":1665,"line_end":1665,"column_start":8,"column_end":36},"name":"mul_i16_horizontal_add_m128i","qualname":"::x86_x64::sse2::mul_i16_horizontal_add_m128i","value":"pub fn mul_i16_horizontal_add_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`\n values to produce the final output.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();\n assert_eq!(c, [17, 53, 67, -81]);\n ```\n","sig":null,"attributes":[{"value":"/ Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028812,"byte_end":7028890,"line_start":1653,"line_end":1653,"column_start":1,"column_end":79}},{"value":"/ values to produce the final output.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028891,"byte_end":7028930,"line_start":1654,"line_end":1654,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028931,"byte_end":7028938,"line_start":1655,"line_end":1655,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028939,"byte_end":7028962,"line_start":1656,"line_end":1656,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7028963,"byte_end":7029021,"line_start":1657,"line_end":1657,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029022,"byte_end":7029083,"line_start":1658,"line_end":1658,"column_start":1,"column_end":62}},{"value":"/ let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029084,"byte_end":7029148,"line_start":1659,"line_end":1659,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(c, [17, 53, 67, -81]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029149,"byte_end":7029186,"line_start":1660,"line_end":1660,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029187,"byte_end":7029194,"line_start":1661,"line_end":1661,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029195,"byte_end":7029206,"line_start":1662,"line_end":1662,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029207,"byte_end":7029224,"line_start":1663,"line_end":1663,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029897,"byte_end":7029909,"line_start":1683,"line_end":1683,"column_start":8,"column_end":20},"name":"max_u8_m128i","qualname":"::x86_x64::sse2::max_u8_m128i","value":"pub fn max_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,\n ]);\n let c: [u8; 16] = max_u8_m128i(a, b).into();\n assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `u8`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029396,"byte_end":7029440,"line_start":1669,"line_end":1669,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029441,"byte_end":7029448,"line_start":1670,"line_end":1670,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029449,"byte_end":7029472,"line_start":1671,"line_end":1671,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029473,"byte_end":7029484,"line_start":1672,"line_end":1672,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029485,"byte_end":7029562,"line_start":1673,"line_end":1673,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029563,"byte_end":7029588,"line_start":1674,"line_end":1674,"column_start":1,"column_end":26}},{"value":"/   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029589,"byte_end":7029657,"line_start":1675,"line_end":1675,"column_start":1,"column_end":69}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029658,"byte_end":7029665,"line_start":1676,"line_end":1676,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = max_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029666,"byte_end":7029714,"line_start":1677,"line_end":1677,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029715,"byte_end":7029795,"line_start":1678,"line_end":1678,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029796,"byte_end":7029803,"line_start":1679,"line_end":1679,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029804,"byte_end":7029815,"line_start":1680,"line_end":1680,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029816,"byte_end":7029833,"line_start":1681,"line_end":1681,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":716},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030390,"byte_end":7030403,"line_start":1698,"line_end":1698,"column_start":8,"column_end":21},"name":"max_i16_m128i","qualname":"::x86_x64::sse2::max_i16_m128i","value":"pub fn max_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = max_i16_m128i(a, b).into();\n assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7029987,"byte_end":7030032,"line_start":1687,"line_end":1687,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030033,"byte_end":7030040,"line_start":1688,"line_end":1688,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030041,"byte_end":7030064,"line_start":1689,"line_end":1689,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030065,"byte_end":7030123,"line_start":1690,"line_end":1690,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030124,"byte_end":7030185,"line_start":1691,"line_end":1691,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = max_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030186,"byte_end":7030235,"line_start":1692,"line_end":1692,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030236,"byte_end":7030288,"line_start":1693,"line_end":1693,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030289,"byte_end":7030296,"line_start":1694,"line_end":1694,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030297,"byte_end":7030308,"line_start":1695,"line_end":1695,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030309,"byte_end":7030326,"line_start":1696,"line_end":1696,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030798,"byte_end":7030807,"line_start":1713,"line_end":1713,"column_start":8,"column_end":17},"name":"max_m128d","qualname":"::x86_x64::sse2::max_m128d","value":"pub fn max_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([5.0, 2.0]);\n let b = m128d::from_array([1.0, 6.0]);\n let c = max_m128d(a, b).to_array();\n assert_eq!(c, [5.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030482,"byte_end":7030507,"line_start":1702,"line_end":1702,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030508,"byte_end":7030515,"line_start":1703,"line_end":1703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030516,"byte_end":7030539,"line_start":1704,"line_end":1704,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([5.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030540,"byte_end":7030582,"line_start":1705,"line_end":1705,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030583,"byte_end":7030625,"line_start":1706,"line_end":1706,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030626,"byte_end":7030665,"line_start":1707,"line_end":1707,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [5.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030666,"byte_end":7030696,"line_start":1708,"line_end":1708,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030697,"byte_end":7030704,"line_start":1709,"line_end":1709,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030705,"byte_end":7030716,"line_start":1710,"line_end":1710,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030717,"byte_end":7030734,"line_start":1711,"line_end":1711,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031226,"byte_end":7031237,"line_start":1728,"line_end":1728,"column_start":8,"column_end":19},"name":"max_m128d_s","qualname":"::x86_x64::sse2::max_m128d_s","value":"pub fn max_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = max_m128d_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030883,"byte_end":7030931,"line_start":1717,"line_end":1717,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030932,"byte_end":7030939,"line_start":1718,"line_end":1718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030940,"byte_end":7030963,"line_start":1719,"line_end":1719,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7030964,"byte_end":7031007,"line_start":1720,"line_end":1720,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031008,"byte_end":7031050,"line_start":1721,"line_end":1721,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031051,"byte_end":7031092,"line_start":1722,"line_end":1722,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [5.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031093,"byte_end":7031124,"line_start":1723,"line_end":1723,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031125,"byte_end":7031132,"line_start":1724,"line_end":1724,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031133,"byte_end":7031144,"line_start":1725,"line_end":1725,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031145,"byte_end":7031162,"line_start":1726,"line_end":1726,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031796,"byte_end":7031808,"line_start":1745,"line_end":1745,"column_start":8,"column_end":20},"name":"min_u8_m128i","qualname":"::x86_x64::sse2::min_u8_m128i","value":"pub fn min_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b =\n   m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);\n let c: [u8; 16] = min_u8_m128i(a, b).into();\n assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `u8`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031313,"byte_end":7031357,"line_start":1732,"line_end":1732,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031358,"byte_end":7031365,"line_start":1733,"line_end":1733,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031366,"byte_end":7031389,"line_start":1734,"line_end":1734,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031390,"byte_end":7031401,"line_start":1735,"line_end":1735,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031402,"byte_end":7031479,"line_start":1736,"line_end":1736,"column_start":1,"column_end":78}},{"value":"/ let b =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031480,"byte_end":7031491,"line_start":1737,"line_end":1737,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031492,"byte_end":7031570,"line_start":1738,"line_end":1738,"column_start":1,"column_end":79}},{"value":"/ let c: [u8; 16] = min_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031571,"byte_end":7031619,"line_start":1739,"line_end":1739,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031620,"byte_end":7031694,"line_start":1740,"line_end":1740,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031695,"byte_end":7031702,"line_start":1741,"line_end":1741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031703,"byte_end":7031714,"line_start":1742,"line_end":1742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031715,"byte_end":7031732,"line_start":1743,"line_end":1743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032292,"byte_end":7032305,"line_start":1760,"line_end":1760,"column_start":8,"column_end":21},"name":"min_i16_m128i","qualname":"::x86_x64::sse2::min_i16_m128i","value":"pub fn min_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = min_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031886,"byte_end":7031931,"line_start":1749,"line_end":1749,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031932,"byte_end":7031939,"line_start":1750,"line_end":1750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031940,"byte_end":7031963,"line_start":1751,"line_end":1751,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7031964,"byte_end":7032022,"line_start":1752,"line_end":1752,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032023,"byte_end":7032084,"line_start":1753,"line_end":1753,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = min_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032085,"byte_end":7032134,"line_start":1754,"line_end":1754,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032135,"byte_end":7032190,"line_start":1755,"line_end":1755,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032191,"byte_end":7032198,"line_start":1756,"line_end":1756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032199,"byte_end":7032210,"line_start":1757,"line_end":1757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032211,"byte_end":7032228,"line_start":1758,"line_end":1758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032701,"byte_end":7032710,"line_start":1775,"line_end":1775,"column_start":8,"column_end":17},"name":"min_m128d","qualname":"::x86_x64::sse2::min_m128d","value":"pub fn min_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = min_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032384,"byte_end":7032409,"line_start":1764,"line_end":1764,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032410,"byte_end":7032417,"line_start":1765,"line_end":1765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032418,"byte_end":7032441,"line_start":1766,"line_end":1766,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032442,"byte_end":7032485,"line_start":1767,"line_end":1767,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032486,"byte_end":7032528,"line_start":1768,"line_end":1768,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032529,"byte_end":7032568,"line_start":1769,"line_end":1769,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [1.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032569,"byte_end":7032599,"line_start":1770,"line_end":1770,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032600,"byte_end":7032607,"line_start":1771,"line_end":1771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032608,"byte_end":7032619,"line_start":1772,"line_end":1772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032620,"byte_end":7032637,"line_start":1773,"line_end":1773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033129,"byte_end":7033140,"line_start":1790,"line_end":1790,"column_start":8,"column_end":19},"name":"min_m128d_s","qualname":"::x86_x64::sse2::min_m128d_s","value":"pub fn min_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([0.0, 6.0]);\n let c = min_m128d_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032786,"byte_end":7032834,"line_start":1779,"line_end":1779,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032835,"byte_end":7032842,"line_start":1780,"line_end":1780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032843,"byte_end":7032866,"line_start":1781,"line_end":1781,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032867,"byte_end":7032910,"line_start":1782,"line_end":1782,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([0.0, 6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032911,"byte_end":7032953,"line_start":1783,"line_end":1783,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032954,"byte_end":7032995,"line_start":1784,"line_end":1784,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7032996,"byte_end":7033027,"line_start":1785,"line_end":1785,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033028,"byte_end":7033035,"line_start":1786,"line_end":1786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033036,"byte_end":7033047,"line_start":1787,"line_end":1787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033048,"byte_end":7033065,"line_start":1788,"line_end":1788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033525,"byte_end":7033541,"line_start":1804,"line_end":1804,"column_start":8,"column_end":24},"name":"copy_i64_m128i_s","qualname":"::x86_x64::sse2::copy_i64_m128i_s","value":"pub fn copy_i64_m128i_s(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Copy the low `i64` lane to a new register, upper bits 0.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = copy_i64_m128i_s(a);\n assert_eq!(<[i64; 2]>::from(b), [1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copy the low `i64` lane to a new register, upper bits 0.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033216,"byte_end":7033276,"line_start":1794,"line_end":1794,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033277,"byte_end":7033284,"line_start":1795,"line_end":1795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033285,"byte_end":7033308,"line_start":1796,"line_end":1796,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033309,"byte_end":7033345,"line_start":1797,"line_end":1797,"column_start":1,"column_end":37}},{"value":"/ let b = copy_i64_m128i_s(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033346,"byte_end":7033378,"line_start":1798,"line_end":1798,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(b), [1, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033379,"byte_end":7033423,"line_start":1799,"line_end":1799,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033424,"byte_end":7033431,"line_start":1800,"line_end":1800,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033432,"byte_end":7033443,"line_start":1801,"line_end":1801,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033444,"byte_end":7033461,"line_start":1802,"line_end":1802,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033976,"byte_end":7034002,"line_start":1819,"line_end":1819,"column_start":8,"column_end":34},"name":"copy_replace_low_f64_m128d","qualname":"::x86_x64::sse2::copy_replace_low_f64_m128d","value":"pub fn copy_replace_low_f64_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Copies the `a` value and replaces the low lane with the low `b` value.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let b = m128d::from([3.0, 4.0]);\n let c = copy_replace_low_f64_m128d(a, b);\n assert_eq!(c.to_array(), [3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copies the `a` value and replaces the low lane with the low `b` value.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033606,"byte_end":7033680,"line_start":1808,"line_end":1808,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033681,"byte_end":7033688,"line_start":1809,"line_end":1809,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033689,"byte_end":7033712,"line_start":1810,"line_end":1810,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033713,"byte_end":7033749,"line_start":1811,"line_end":1811,"column_start":1,"column_end":37}},{"value":"/ let b = m128d::from([3.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033750,"byte_end":7033786,"line_start":1812,"line_end":1812,"column_start":1,"column_end":37}},{"value":"/ let c = copy_replace_low_f64_m128d(a, b);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033787,"byte_end":7033832,"line_start":1813,"line_end":1813,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033833,"byte_end":7033874,"line_start":1814,"line_end":1814,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033875,"byte_end":7033882,"line_start":1815,"line_end":1815,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033883,"byte_end":7033894,"line_start":1816,"line_end":1816,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7033895,"byte_end":7033912,"line_start":1817,"line_end":1817,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034506,"byte_end":7034524,"line_start":1837,"line_end":1837,"column_start":8,"column_end":26},"name":"move_mask_i8_m128i","qualname":"::x86_x64::sse2::move_mask_i8_m128i","value":"pub fn move_mask_i8_m128i(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the `i8` sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the `i8` sign bit of each lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034079,"byte_end":7034122,"line_start":1823,"line_end":1823,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034123,"byte_end":7034126,"line_start":1824,"line_end":1824,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034127,"byte_end":7034190,"line_start":1825,"line_end":1825,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034191,"byte_end":7034198,"line_start":1826,"line_end":1826,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034199,"byte_end":7034222,"line_start":1827,"line_end":1827,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034223,"byte_end":7034248,"line_start":1828,"line_end":1828,"column_start":1,"column_end":26}},{"value":"/   0_i8, -11, -2, 13, 4, 15, -6, 17, 8, 19, -20, 21, 22, 23, -24, 127,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034249,"byte_end":7034322,"line_start":1829,"line_end":1829,"column_start":1,"column_end":74}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034323,"byte_end":7034330,"line_start":1830,"line_end":1830,"column_start":1,"column_end":8}},{"value":"/ let i = move_mask_i8_m128i(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034331,"byte_end":7034365,"line_start":1831,"line_end":1831,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(i, 0b0100010001000110);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034366,"byte_end":7034404,"line_start":1832,"line_end":1832,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034405,"byte_end":7034412,"line_start":1833,"line_end":1833,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034413,"byte_end":7034424,"line_start":1834,"line_end":1834,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034425,"byte_end":7034442,"line_start":1835,"line_end":1835,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034914,"byte_end":7034929,"line_start":1853,"line_end":1853,"column_start":8,"column_end":23},"name":"move_mask_m128d","qualname":"::x86_x64::sse2::move_mask_m128d","value":"pub fn move_mask_m128d(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034583,"byte_end":7034621,"line_start":1841,"line_end":1841,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034622,"byte_end":7034625,"line_start":1842,"line_end":1842,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034626,"byte_end":7034678,"line_start":1843,"line_end":1843,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034679,"byte_end":7034686,"line_start":1844,"line_end":1844,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034687,"byte_end":7034710,"line_start":1845,"line_end":1845,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([-1.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034711,"byte_end":7034755,"line_start":1846,"line_end":1846,"column_start":1,"column_end":45}},{"value":"/ let i = move_mask_m128d(a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034756,"byte_end":7034787,"line_start":1847,"line_end":1847,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(i, 0b01);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034788,"byte_end":7034812,"line_start":1848,"line_end":1848,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034813,"byte_end":7034820,"line_start":1849,"line_end":1849,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034821,"byte_end":7034832,"line_start":1850,"line_end":1850,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034833,"byte_end":7034850,"line_start":1851,"line_end":1851,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035416,"byte_end":7035439,"line_start":1869,"line_end":1869,"column_start":8,"column_end":31},"name":"mul_widen_u32_odd_m128i","qualname":"::x86_x64::sse2::mul_widen_u32_odd_m128i","value":"pub fn mul_widen_u32_odd_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","sig":null,"attributes":[{"value":"/ Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7034986,"byte_end":7035059,"line_start":1857,"line_end":1857,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035060,"byte_end":7035063,"line_start":1858,"line_end":1858,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035064,"byte_end":7035071,"line_start":1859,"line_end":1859,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035072,"byte_end":7035095,"line_start":1860,"line_end":1860,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 7, u32::MAX, 7]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035096,"byte_end":7035141,"line_start":1861,"line_end":1861,"column_start":1,"column_end":46}},{"value":"/ let b = m128i::from([5, 7, u32::MAX, 7]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035142,"byte_end":7035187,"line_start":1862,"line_end":1862,"column_start":1,"column_end":46}},{"value":"/ let c: [u64; 2] = mul_widen_u32_odd_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035188,"byte_end":7035247,"line_start":1863,"line_end":1863,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [(1 * 5), (u32::MAX as u64 * u32::MAX as u64)]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035248,"byte_end":7035314,"line_start":1864,"line_end":1864,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035315,"byte_end":7035322,"line_start":1865,"line_end":1865,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035323,"byte_end":7035334,"line_start":1866,"line_end":1866,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035335,"byte_end":7035352,"line_start":1867,"line_end":1867,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035841,"byte_end":7035850,"line_start":1884,"line_end":1884,"column_start":8,"column_end":17},"name":"mul_m128d","qualname":"::x86_x64::sse2::mul_m128d","value":"pub fn mul_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = mul_m128d(a, b).to_array();\n assert_eq!(c, [9200.0, -525.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035518,"byte_end":7035539,"line_start":1873,"line_end":1873,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035540,"byte_end":7035547,"line_start":1874,"line_end":1874,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035548,"byte_end":7035571,"line_start":1875,"line_end":1875,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035572,"byte_end":7035616,"line_start":1876,"line_end":1876,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035617,"byte_end":7035662,"line_start":1877,"line_end":1877,"column_start":1,"column_end":46}},{"value":"/ let c = mul_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035663,"byte_end":7035702,"line_start":1878,"line_end":1878,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [9200.0, -525.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035703,"byte_end":7035739,"line_start":1879,"line_end":1879,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035740,"byte_end":7035747,"line_start":1880,"line_end":1880,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035748,"byte_end":7035759,"line_start":1881,"line_end":1881,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035760,"byte_end":7035777,"line_start":1882,"line_end":1882,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036275,"byte_end":7036286,"line_start":1899,"line_end":1899,"column_start":8,"column_end":19},"name":"mul_m128d_s","qualname":"::x86_x64::sse2::mul_m128d_s","value":"pub fn mul_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a * b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = mul_m128d_s(a, b).to_array();\n assert_eq!(c, [9200.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a * b`, high lane unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035926,"byte_end":7035971,"line_start":1888,"line_end":1888,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035972,"byte_end":7035979,"line_start":1889,"line_end":1889,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7035980,"byte_end":7036003,"line_start":1890,"line_end":1890,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036004,"byte_end":7036048,"line_start":1891,"line_end":1891,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036049,"byte_end":7036096,"line_start":1892,"line_end":1892,"column_start":1,"column_end":48}},{"value":"/ let c = mul_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036097,"byte_end":7036138,"line_start":1893,"line_end":1893,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [9200.0, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036139,"byte_end":7036173,"line_start":1894,"line_end":1894,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036174,"byte_end":7036181,"line_start":1895,"line_end":1895,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036182,"byte_end":7036193,"line_start":1896,"line_end":1896,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036194,"byte_end":7036211,"line_start":1897,"line_end":1897,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036831,"byte_end":7036854,"line_start":1915,"line_end":1915,"column_start":8,"column_end":31},"name":"mul_i16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_high_m128i","value":"pub fn mul_i16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036362,"byte_end":7036435,"line_start":1903,"line_end":1903,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036436,"byte_end":7036454,"line_start":1904,"line_end":1904,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036455,"byte_end":7036462,"line_start":1905,"line_end":1905,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036463,"byte_end":7036486,"line_start":1906,"line_end":1906,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036487,"byte_end":7036552,"line_start":1907,"line_end":1907,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036553,"byte_end":7036621,"line_start":1908,"line_end":1908,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036622,"byte_end":7036681,"line_start":1909,"line_end":1909,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036682,"byte_end":7036729,"line_start":1910,"line_end":1910,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036730,"byte_end":7036737,"line_start":1911,"line_end":1911,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036738,"byte_end":7036749,"line_start":1912,"line_end":1912,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036750,"byte_end":7036767,"line_start":1913,"line_end":1913,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037406,"byte_end":7037429,"line_start":1931,"line_end":1931,"column_start":8,"column_end":31},"name":"mul_u16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_u16_keep_high_m128i","value":"pub fn mul_u16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);\n let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);\n let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7036935,"byte_end":7037008,"line_start":1919,"line_end":1919,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037009,"byte_end":7037027,"line_start":1920,"line_end":1920,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037028,"byte_end":7037035,"line_start":1921,"line_end":1921,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037036,"byte_end":7037059,"line_start":1922,"line_end":1922,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037060,"byte_end":7037124,"line_start":1923,"line_end":1923,"column_start":1,"column_end":65}},{"value":"/ let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037125,"byte_end":7037192,"line_start":1924,"line_end":1924,"column_start":1,"column_end":68}},{"value":"/ let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037193,"byte_end":7037252,"line_start":1925,"line_end":1925,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037253,"byte_end":7037304,"line_start":1926,"line_end":1926,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037305,"byte_end":7037312,"line_start":1927,"line_end":1927,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037313,"byte_end":7037324,"line_start":1928,"line_end":1928,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037325,"byte_end":7037342,"line_start":1929,"line_end":1929,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037993,"byte_end":7038015,"line_start":1947,"line_end":1947,"column_start":8,"column_end":30},"name":"mul_i16_keep_low_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_low_m128i","value":"pub fn mul_i16_keep_low_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();\n assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037510,"byte_end":7037582,"line_start":1935,"line_end":1935,"column_start":1,"column_end":73}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037583,"byte_end":7037601,"line_start":1936,"line_end":1936,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037602,"byte_end":7037609,"line_start":1937,"line_end":1937,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037610,"byte_end":7037633,"line_start":1938,"line_end":1938,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037634,"byte_end":7037699,"line_start":1939,"line_end":1939,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037700,"byte_end":7037768,"line_start":1940,"line_end":1940,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037769,"byte_end":7037827,"line_start":1941,"line_end":1941,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037828,"byte_end":7037891,"line_start":1942,"line_end":1942,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037892,"byte_end":7037899,"line_start":1943,"line_end":1943,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037900,"byte_end":7037911,"line_start":1944,"line_end":1944,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7037912,"byte_end":7037929,"line_start":1945,"line_end":1945,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038409,"byte_end":7038420,"line_start":1962,"line_end":1962,"column_start":8,"column_end":19},"name":"bitor_m128d","qualname":"::x86_x64::sse2::bitor_m128d","value":"pub fn bitor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitor_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038096,"byte_end":7038116,"line_start":1951,"line_end":1951,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038117,"byte_end":7038124,"line_start":1952,"line_end":1952,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038125,"byte_end":7038148,"line_start":1953,"line_end":1953,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038149,"byte_end":7038191,"line_start":1954,"line_end":1954,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038192,"byte_end":7038234,"line_start":1955,"line_end":1955,"column_start":1,"column_end":43}},{"value":"/ let c = bitor_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038235,"byte_end":7038276,"line_start":1956,"line_end":1956,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038277,"byte_end":7038307,"line_start":1957,"line_end":1957,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038308,"byte_end":7038315,"line_start":1958,"line_end":1958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038316,"byte_end":7038327,"line_start":1959,"line_end":1959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038328,"byte_end":7038345,"line_start":1960,"line_end":1960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038808,"byte_end":7038819,"line_start":1977,"line_end":1977,"column_start":8,"column_end":19},"name":"bitor_m128i","qualname":"::x86_x64::sse2::bitor_m128i","value":"pub fn bitor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitor_m128i(a, b).into();\n assert_eq!(c, [1, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038495,"byte_end":7038515,"line_start":1966,"line_end":1966,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038516,"byte_end":7038523,"line_start":1967,"line_end":1967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038524,"byte_end":7038547,"line_start":1968,"line_end":1968,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038548,"byte_end":7038586,"line_start":1969,"line_end":1969,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038587,"byte_end":7038625,"line_start":1970,"line_end":1970,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitor_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038626,"byte_end":7038673,"line_start":1971,"line_end":1971,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [1, 1, 1, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038674,"byte_end":7038706,"line_start":1972,"line_end":1972,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038707,"byte_end":7038714,"line_start":1973,"line_end":1973,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038715,"byte_end":7038726,"line_start":1974,"line_end":1974,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038727,"byte_end":7038744,"line_start":1975,"line_end":1975,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039342,"byte_end":7039362,"line_start":1992,"line_end":1992,"column_start":8,"column_end":28},"name":"pack_i16_to_i8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_i8_m128i","value":"pub fn pack_i16_to_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `i8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);\n let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `i8`, and pack the values.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038897,"byte_end":7038955,"line_start":1981,"line_end":1981,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038956,"byte_end":7038963,"line_start":1982,"line_end":1982,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038964,"byte_end":7038987,"line_start":1983,"line_end":1983,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7038988,"byte_end":7039042,"line_start":1984,"line_end":1984,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039043,"byte_end":7039104,"line_start":1985,"line_end":1985,"column_start":1,"column_end":62}},{"value":"/ let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039105,"byte_end":7039161,"line_start":1986,"line_end":1986,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039162,"byte_end":7039240,"line_start":1987,"line_end":1987,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039241,"byte_end":7039248,"line_start":1988,"line_end":1988,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039249,"byte_end":7039260,"line_start":1989,"line_end":1989,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039261,"byte_end":7039278,"line_start":1990,"line_end":1990,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039829,"byte_end":7039850,"line_start":2007,"line_end":2007,"column_start":8,"column_end":29},"name":"pack_i32_to_i16_m128i","qualname":"::x86_x64::sse2::pack_i32_to_i16_m128i","value":"pub fn pack_i32_to_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i32` to `i16`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i32, 2, 3, 4]);\n let b = m128i::from([5_i32, 6, 7, 8]);\n let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i32` to `i16`, and pack the values.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039443,"byte_end":7039502,"line_start":1996,"line_end":1996,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039503,"byte_end":7039510,"line_start":1997,"line_end":1997,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039511,"byte_end":7039534,"line_start":1998,"line_end":1998,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039535,"byte_end":7039577,"line_start":1999,"line_end":1999,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([5_i32, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039578,"byte_end":7039620,"line_start":2000,"line_end":2000,"column_start":1,"column_end":43}},{"value":"/ let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039621,"byte_end":7039678,"line_start":2001,"line_end":2001,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039679,"byte_end":7039727,"line_start":2002,"line_end":2002,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039728,"byte_end":7039735,"line_start":2003,"line_end":2003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039736,"byte_end":7039747,"line_start":2004,"line_end":2004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039748,"byte_end":7039765,"line_start":2005,"line_end":2005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040410,"byte_end":7040430,"line_start":2025,"line_end":2025,"column_start":8,"column_end":28},"name":"pack_i16_to_u8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_u8_m128i","value":"pub fn pack_i16_to_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `u8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);\n let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `u8`, and pack the values.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039931,"byte_end":7039989,"line_start":2011,"line_end":2011,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039990,"byte_end":7039997,"line_start":2012,"line_end":2012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7039998,"byte_end":7040021,"line_start":2013,"line_end":2013,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040022,"byte_end":7040080,"line_start":2014,"line_end":2014,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040081,"byte_end":7040144,"line_start":2015,"line_end":2015,"column_start":1,"column_end":64}},{"value":"/ let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040145,"byte_end":7040201,"line_start":2016,"line_end":2016,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040202,"byte_end":7040217,"line_start":2017,"line_end":2017,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040218,"byte_end":7040226,"line_start":2018,"line_end":2018,"column_start":1,"column_end":9}},{"value":"/   [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040227,"byte_end":7040301,"line_start":2019,"line_end":2019,"column_start":1,"column_end":75}},{"value":"/ );","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040302,"byte_end":7040308,"line_start":2020,"line_end":2020,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040309,"byte_end":7040316,"line_start":2021,"line_end":2021,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040317,"byte_end":7040328,"line_start":2022,"line_end":2022,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040329,"byte_end":7040346,"line_start":2023,"line_end":2023,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041187,"byte_end":7041211,"line_start":2048,"line_end":2048,"column_start":8,"column_end":32},"name":"sum_of_u8_abs_diff_m128i","qualname":"::x86_x64::sse2::sum_of_u8_abs_diff_m128i","value":"pub fn sum_of_u8_abs_diff_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute \"sum of `u8` absolute differences\".","sig":null,"attributes":[{"value":"/ Compute \"sum of `u8` absolute differences\".","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040512,"byte_end":7040559,"line_start":2029,"line_end":2029,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040560,"byte_end":7040563,"line_start":2030,"line_end":2030,"column_start":1,"column_end":4}},{"value":"/ * `u8` lanewise `abs(a - b)`, producing `u8` intermediate values.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040564,"byte_end":7040633,"line_start":2031,"line_end":2031,"column_start":1,"column_end":70}},{"value":"/ * Sum the first eight and second eight values.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040634,"byte_end":7040684,"line_start":2032,"line_end":2032,"column_start":1,"column_end":51}},{"value":"/ * Place into the low 16 bits of two `u64` lanes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040685,"byte_end":7040737,"line_start":2033,"line_end":2033,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040738,"byte_end":7040745,"line_start":2034,"line_end":2034,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040746,"byte_end":7040769,"line_start":2035,"line_end":2035,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040770,"byte_end":7040795,"line_start":2036,"line_end":2036,"column_start":1,"column_end":26}},{"value":"/   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040796,"byte_end":7040864,"line_start":2037,"line_end":2037,"column_start":1,"column_end":69}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040865,"byte_end":7040872,"line_start":2038,"line_end":2038,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040873,"byte_end":7040898,"line_start":2039,"line_end":2039,"column_start":1,"column_end":26}},{"value":"/   20_u8, 110, 250, 103, 34, 105, 60, 217, 8, 19, 210, 201, 202, 203, 204, 127,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040899,"byte_end":7040981,"line_start":2040,"line_end":2040,"column_start":1,"column_end":83}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040982,"byte_end":7040989,"line_start":2041,"line_end":2041,"column_start":1,"column_end":8}},{"value":"/ let c: [u64; 2] = sum_of_u8_abs_diff_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7040990,"byte_end":7041050,"line_start":2042,"line_end":2042,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [831_u64, 910]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041051,"byte_end":7041085,"line_start":2043,"line_end":2043,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041086,"byte_end":7041093,"line_start":2044,"line_end":2044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041094,"byte_end":7041105,"line_start":2045,"line_end":2045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041106,"byte_end":7041123,"line_start":2046,"line_end":2046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041794,"byte_end":7041806,"line_start":2065,"line_end":2065,"column_start":8,"column_end":20},"name":"set_i8_m128i","qualname":"::x86_x64::sse2::set_i8_m128i","value":"pub fn set_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                    i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041289,"byte_end":7041351,"line_start":2052,"line_end":2052,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041352,"byte_end":7041359,"line_start":2053,"line_end":2053,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041360,"byte_end":7041383,"line_start":2054,"line_end":2054,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041384,"byte_end":7041395,"line_start":2055,"line_end":2055,"column_start":1,"column_end":12}},{"value":"/   m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041396,"byte_end":7041473,"line_start":2056,"line_end":2056,"column_start":1,"column_end":78}},{"value":"/ let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041474,"byte_end":7041556,"line_start":2057,"line_end":2057,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041557,"byte_end":7041614,"line_start":2058,"line_end":2058,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041615,"byte_end":7041622,"line_start":2059,"line_end":2059,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041623,"byte_end":7041634,"line_start":2060,"line_end":2060,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041635,"byte_end":7041652,"line_start":2061,"line_end":2061,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041653,"byte_end":7041689,"line_start":2062,"line_end":2062,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7041690,"byte_end":7041730,"line_start":2063,"line_end":2063,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042463,"byte_end":7042476,"line_start":2084,"line_end":2084,"column_start":8,"column_end":21},"name":"set_i16_m128i","qualname":"::x86_x64::sse2::set_i16_m128i","value":"pub fn set_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042021,"byte_end":7042083,"line_start":2072,"line_end":2072,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042084,"byte_end":7042091,"line_start":2073,"line_end":2073,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042092,"byte_end":7042115,"line_start":2074,"line_end":2074,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042116,"byte_end":7042170,"line_start":2075,"line_end":2075,"column_start":1,"column_end":55}},{"value":"/ let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042171,"byte_end":7042225,"line_start":2076,"line_end":2076,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042226,"byte_end":7042283,"line_start":2077,"line_end":2077,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042284,"byte_end":7042291,"line_start":2078,"line_end":2078,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042292,"byte_end":7042303,"line_start":2079,"line_end":2079,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042304,"byte_end":7042321,"line_start":2080,"line_end":2080,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042322,"byte_end":7042358,"line_start":2081,"line_end":2081,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042359,"byte_end":7042399,"line_start":2082,"line_end":2082,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042950,"byte_end":7042963,"line_start":2100,"line_end":2100,"column_start":8,"column_end":21},"name":"set_i32_m128i","qualname":"::x86_x64::sse2::set_i32_m128i","value":"pub fn set_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([3, 2, 1, 0]);\n let b = set_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042618,"byte_end":7042680,"line_start":2090,"line_end":2090,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042681,"byte_end":7042688,"line_start":2091,"line_end":2091,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042689,"byte_end":7042712,"line_start":2092,"line_end":2092,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042713,"byte_end":7042751,"line_start":2093,"line_end":2093,"column_start":1,"column_end":39}},{"value":"/ let b = set_i32_m128i(0, 1, 2, 3);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042752,"byte_end":7042790,"line_start":2094,"line_end":2094,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042791,"byte_end":7042848,"line_start":2095,"line_end":2095,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042849,"byte_end":7042856,"line_start":2096,"line_end":2096,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042857,"byte_end":7042868,"line_start":2097,"line_end":2097,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7042869,"byte_end":7042886,"line_start":2098,"line_end":2098,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043380,"byte_end":7043393,"line_start":2114,"line_end":2114,"column_start":8,"column_end":21},"name":"set_i64_m128i","qualname":"::x86_x64::sse2::set_i64_m128i","value":"pub fn set_i64_m128i(i64, i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 0]);\n let b = set_i64_m128i(0, 1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043056,"byte_end":7043118,"line_start":2104,"line_end":2104,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043119,"byte_end":7043126,"line_start":2105,"line_end":2105,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043127,"byte_end":7043150,"line_start":2106,"line_end":2106,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043151,"byte_end":7043187,"line_start":2107,"line_end":2107,"column_start":1,"column_end":37}},{"value":"/ let b = set_i64_m128i(0, 1);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043188,"byte_end":7043220,"line_start":2108,"line_end":2108,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043221,"byte_end":7043278,"line_start":2109,"line_end":2109,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043279,"byte_end":7043286,"line_start":2110,"line_end":2110,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043287,"byte_end":7043298,"line_start":2111,"line_end":2111,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043299,"byte_end":7043316,"line_start":2112,"line_end":2112,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043781,"byte_end":7043790,"line_start":2128,"line_end":2128,"column_start":8,"column_end":17},"name":"set_m128d","qualname":"::x86_x64::sse2::set_m128d","value":"pub fn set_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043465,"byte_end":7043527,"line_start":2118,"line_end":2118,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043528,"byte_end":7043535,"line_start":2119,"line_end":2119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043536,"byte_end":7043559,"line_start":2120,"line_end":2120,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043560,"byte_end":7043602,"line_start":2121,"line_end":2121,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d(0.0, 1.0);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043603,"byte_end":7043635,"line_start":2122,"line_end":2122,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043636,"byte_end":7043679,"line_start":2123,"line_end":2123,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043680,"byte_end":7043687,"line_start":2124,"line_end":2124,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043688,"byte_end":7043699,"line_start":2125,"line_end":2125,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043700,"byte_end":7043717,"line_start":2126,"line_end":2126,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044158,"byte_end":7044169,"line_start":2142,"line_end":2142,"column_start":8,"column_end":19},"name":"set_m128d_s","qualname":"::x86_x64::sse2::set_m128d_s","value":"pub fn set_m128d_s(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into the low lane of a `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d_s(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into the low lane of a `m128d`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043858,"byte_end":7043907,"line_start":2132,"line_end":2132,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043908,"byte_end":7043915,"line_start":2133,"line_end":2133,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043916,"byte_end":7043939,"line_start":2134,"line_end":2134,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043940,"byte_end":7043982,"line_start":2135,"line_end":2135,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d_s(1.0);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7043983,"byte_end":7044012,"line_start":2136,"line_end":2136,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044013,"byte_end":7044056,"line_start":2137,"line_end":2137,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044057,"byte_end":7044064,"line_start":2138,"line_end":2138,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044065,"byte_end":7044076,"line_start":2139,"line_end":2139,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044077,"byte_end":7044094,"line_start":2140,"line_end":2140,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044532,"byte_end":7044547,"line_start":2156,"line_end":2156,"column_start":8,"column_end":23},"name":"set_splat_m128d","qualname":"::x86_x64::sse2::set_splat_m128d","value":"pub fn set_splat_m128d(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Splats the args into both lanes of the `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 1.0]);\n let b = set_splat_m128d(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Splats the args into both lanes of the `m128d`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044226,"byte_end":7044277,"line_start":2146,"line_end":2146,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044278,"byte_end":7044285,"line_start":2147,"line_end":2147,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044286,"byte_end":7044309,"line_start":2148,"line_end":2148,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044310,"byte_end":7044352,"line_start":2149,"line_end":2149,"column_start":1,"column_end":43}},{"value":"/ let b = set_splat_m128d(1.0);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044353,"byte_end":7044386,"line_start":2150,"line_end":2150,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044387,"byte_end":7044430,"line_start":2151,"line_end":2151,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044431,"byte_end":7044438,"line_start":2152,"line_end":2152,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044439,"byte_end":7044450,"line_start":2153,"line_end":2153,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044451,"byte_end":7044468,"line_start":2154,"line_end":2154,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044958,"byte_end":7044976,"line_start":2170,"line_end":2170,"column_start":8,"column_end":26},"name":"set_splat_i8_m128i","qualname":"::x86_x64::sse2::set_splat_i8_m128i","value":"pub fn set_splat_i8_m128i(i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i8` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i8_m128i(1);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i8` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044605,"byte_end":7044653,"line_start":2160,"line_end":2160,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044654,"byte_end":7044661,"line_start":2161,"line_end":2161,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044662,"byte_end":7044685,"line_start":2162,"line_end":2162,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044686,"byte_end":7044763,"line_start":2163,"line_end":2163,"column_start":1,"column_end":78}},{"value":"/ let b = set_splat_i8_m128i(1);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044764,"byte_end":7044798,"line_start":2164,"line_end":2164,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044799,"byte_end":7044856,"line_start":2165,"line_end":2165,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044857,"byte_end":7044864,"line_start":2166,"line_end":2166,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044865,"byte_end":7044876,"line_start":2167,"line_end":2167,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7044877,"byte_end":7044894,"line_start":2168,"line_end":2168,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045367,"byte_end":7045386,"line_start":2184,"line_end":2184,"column_start":8,"column_end":27},"name":"set_splat_i16_m128i","qualname":"::x86_x64::sse2::set_splat_i16_m128i","value":"pub fn set_splat_i16_m128i(i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i16` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i16_m128i(1);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i16` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045035,"byte_end":7045084,"line_start":2174,"line_end":2174,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045085,"byte_end":7045092,"line_start":2175,"line_end":2175,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045093,"byte_end":7045116,"line_start":2176,"line_end":2176,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045117,"byte_end":7045171,"line_start":2177,"line_end":2177,"column_start":1,"column_end":55}},{"value":"/ let b = set_splat_i16_m128i(1);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045172,"byte_end":7045207,"line_start":2178,"line_end":2178,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045208,"byte_end":7045265,"line_start":2179,"line_end":2179,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045266,"byte_end":7045273,"line_start":2180,"line_end":2180,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045274,"byte_end":7045285,"line_start":2181,"line_end":2181,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045286,"byte_end":7045303,"line_start":2182,"line_end":2182,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045763,"byte_end":7045782,"line_start":2198,"line_end":2198,"column_start":8,"column_end":27},"name":"set_splat_i32_m128i","qualname":"::x86_x64::sse2::set_splat_i32_m128i","value":"pub fn set_splat_i32_m128i(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i32` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 1, 1, 1]);\n let b = set_splat_i32_m128i(1);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i32` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045447,"byte_end":7045496,"line_start":2188,"line_end":2188,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045497,"byte_end":7045504,"line_start":2189,"line_end":2189,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045505,"byte_end":7045528,"line_start":2190,"line_end":2190,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045529,"byte_end":7045567,"line_start":2191,"line_end":2191,"column_start":1,"column_end":39}},{"value":"/ let b = set_splat_i32_m128i(1);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045568,"byte_end":7045603,"line_start":2192,"line_end":2192,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045604,"byte_end":7045661,"line_start":2193,"line_end":2193,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045662,"byte_end":7045669,"line_start":2194,"line_end":2194,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045670,"byte_end":7045681,"line_start":2195,"line_end":2195,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045682,"byte_end":7045699,"line_start":2196,"line_end":2196,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046158,"byte_end":7046177,"line_start":2212,"line_end":2212,"column_start":8,"column_end":27},"name":"set_splat_i64_m128i","qualname":"::x86_x64::sse2::set_splat_i64_m128i","value":"pub fn set_splat_i64_m128i(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i64` to both lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 1]);\n let b = set_splat_i64_m128i(1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i64` to both lanes of the `m128i`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045843,"byte_end":7045893,"line_start":2202,"line_end":2202,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045894,"byte_end":7045901,"line_start":2203,"line_end":2203,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045902,"byte_end":7045925,"line_start":2204,"line_end":2204,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045926,"byte_end":7045962,"line_start":2205,"line_end":2205,"column_start":1,"column_end":37}},{"value":"/ let b = set_splat_i64_m128i(1);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045963,"byte_end":7045998,"line_start":2206,"line_end":2206,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7045999,"byte_end":7046056,"line_start":2207,"line_end":2207,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046057,"byte_end":7046064,"line_start":2208,"line_end":2208,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046065,"byte_end":7046076,"line_start":2209,"line_end":2209,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046077,"byte_end":7046094,"line_start":2210,"line_end":2210,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046765,"byte_end":7046786,"line_start":2231,"line_end":2231,"column_start":8,"column_end":29},"name":"set_reversed_i8_m128i","qualname":"::x86_x64::sse2::set_reversed_i8_m128i","value":"pub fn set_reversed_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                             i8, i8, i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = set_reversed_i8_m128i(\n   0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n );\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046239,"byte_end":7046300,"line_start":2216,"line_end":2216,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046301,"byte_end":7046308,"line_start":2217,"line_end":2217,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046309,"byte_end":7046332,"line_start":2218,"line_end":2218,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046333,"byte_end":7046344,"line_start":2219,"line_end":2219,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046345,"byte_end":7046422,"line_start":2220,"line_end":2220,"column_start":1,"column_end":78}},{"value":"/ let b = set_reversed_i8_m128i(","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046423,"byte_end":7046457,"line_start":2221,"line_end":2221,"column_start":1,"column_end":35}},{"value":"/   0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046458,"byte_end":7046520,"line_start":2222,"line_end":2222,"column_start":1,"column_end":63}},{"value":"/ );","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046521,"byte_end":7046527,"line_start":2223,"line_end":2223,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046528,"byte_end":7046585,"line_start":2224,"line_end":2224,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046586,"byte_end":7046593,"line_start":2225,"line_end":2225,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046594,"byte_end":7046605,"line_start":2226,"line_end":2226,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046606,"byte_end":7046623,"line_start":2227,"line_end":2227,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046624,"byte_end":7046660,"line_start":2228,"line_end":2228,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7046661,"byte_end":7046701,"line_start":2229,"line_end":2229,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047458,"byte_end":7047480,"line_start":2252,"line_end":2252,"column_start":8,"column_end":30},"name":"set_reversed_i16_m128i","qualname":"::x86_x64::sse2::set_reversed_i16_m128i","value":"pub fn set_reversed_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);\n let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047008,"byte_end":7047069,"line_start":2240,"line_end":2240,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047070,"byte_end":7047077,"line_start":2241,"line_end":2241,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047078,"byte_end":7047101,"line_start":2242,"line_end":2242,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047102,"byte_end":7047156,"line_start":2243,"line_end":2243,"column_start":1,"column_end":55}},{"value":"/ let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047157,"byte_end":7047220,"line_start":2244,"line_end":2244,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047221,"byte_end":7047278,"line_start":2245,"line_end":2245,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047279,"byte_end":7047286,"line_start":2246,"line_end":2246,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047287,"byte_end":7047298,"line_start":2247,"line_end":2247,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047299,"byte_end":7047316,"line_start":2248,"line_end":2248,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047317,"byte_end":7047353,"line_start":2249,"line_end":2249,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047354,"byte_end":7047394,"line_start":2250,"line_end":2250,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047963,"byte_end":7047985,"line_start":2268,"line_end":2268,"column_start":8,"column_end":30},"name":"set_reversed_i32_m128i","qualname":"::x86_x64::sse2::set_reversed_i32_m128i","value":"pub fn set_reversed_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0, 1, 2, 3]);\n let b = set_reversed_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047623,"byte_end":7047684,"line_start":2258,"line_end":2258,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047685,"byte_end":7047692,"line_start":2259,"line_end":2259,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047693,"byte_end":7047716,"line_start":2260,"line_end":2260,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047717,"byte_end":7047755,"line_start":2261,"line_end":2261,"column_start":1,"column_end":39}},{"value":"/ let b = set_reversed_i32_m128i(0, 1, 2, 3);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047756,"byte_end":7047803,"line_start":2262,"line_end":2262,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047804,"byte_end":7047861,"line_start":2263,"line_end":2263,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047862,"byte_end":7047869,"line_start":2264,"line_end":2264,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047870,"byte_end":7047881,"line_start":2265,"line_end":2265,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7047882,"byte_end":7047899,"line_start":2266,"line_end":2266,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048403,"byte_end":7048421,"line_start":2282,"line_end":2282,"column_start":8,"column_end":26},"name":"set_reversed_m128d","qualname":"::x86_x64::sse2::set_reversed_m128d","value":"pub fn set_reversed_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([0.0, 1.0]);\n let b = set_reversed_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the low lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048079,"byte_end":7048140,"line_start":2272,"line_end":2272,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048141,"byte_end":7048148,"line_start":2273,"line_end":2273,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048149,"byte_end":7048172,"line_start":2274,"line_end":2274,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048173,"byte_end":7048215,"line_start":2275,"line_end":2275,"column_start":1,"column_end":43}},{"value":"/ let b = set_reversed_m128d(0.0, 1.0);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048216,"byte_end":7048257,"line_start":2276,"line_end":2276,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048258,"byte_end":7048301,"line_start":2277,"line_end":2277,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048302,"byte_end":7048309,"line_start":2278,"line_end":2278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048310,"byte_end":7048321,"line_start":2279,"line_end":2279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048322,"byte_end":7048339,"line_start":2280,"line_end":2280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048705,"byte_end":7048717,"line_start":2295,"line_end":2295,"column_start":8,"column_end":20},"name":"zeroed_m128i","qualname":"::x86_x64::sse2::zeroed_m128i","value":"pub fn zeroed_m128i() -> m128i","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128i();\n assert_eq!(u128::from(a), 0);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048490,"byte_end":7048509,"line_start":2286,"line_end":2286,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048510,"byte_end":7048517,"line_start":2287,"line_end":2287,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048518,"byte_end":7048541,"line_start":2288,"line_end":2288,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128i();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048542,"byte_end":7048569,"line_start":2289,"line_end":2289,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(u128::from(a), 0);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048570,"byte_end":7048603,"line_start":2290,"line_end":2290,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048604,"byte_end":7048611,"line_start":2291,"line_end":2291,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048612,"byte_end":7048623,"line_start":2292,"line_end":2292,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048624,"byte_end":7048641,"line_start":2293,"line_end":2293,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048998,"byte_end":7049010,"line_start":2308,"line_end":2308,"column_start":8,"column_end":20},"name":"zeroed_m128d","qualname":"::x86_x64::sse2::zeroed_m128d","value":"pub fn zeroed_m128d() -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Both lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128d();\n assert_eq!(a.to_array(), [0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Both lanes zero.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048774,"byte_end":7048794,"line_start":2299,"line_end":2299,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048795,"byte_end":7048802,"line_start":2300,"line_end":2300,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048803,"byte_end":7048826,"line_start":2301,"line_end":2301,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128d();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048827,"byte_end":7048854,"line_start":2302,"line_end":2302,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_array(), [0.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048855,"byte_end":7048896,"line_start":2303,"line_end":2303,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048897,"byte_end":7048904,"line_start":2304,"line_end":2304,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048905,"byte_end":7048916,"line_start":2305,"line_end":2305,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7048917,"byte_end":7048934,"line_start":2306,"line_end":2306,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053701,"byte_end":7053718,"line_start":2440,"line_end":2440,"column_start":8,"column_end":25},"name":"shl_all_u16_m128i","qualname":"::x86_x64::sse2::shl_all_u16_m128i","value":"pub fn shl_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053212,"byte_end":7053289,"line_start":2424,"line_end":2424,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053290,"byte_end":7053293,"line_start":2425,"line_end":2425,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053294,"byte_end":7053314,"line_start":2426,"line_end":2426,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053315,"byte_end":7053322,"line_start":2427,"line_end":2427,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053323,"byte_end":7053346,"line_start":2428,"line_end":2428,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053347,"byte_end":7053401,"line_start":2429,"line_end":2429,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053402,"byte_end":7053438,"line_start":2430,"line_end":2430,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shl_all_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053439,"byte_end":7053492,"line_start":2431,"line_end":2431,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053493,"byte_end":7053508,"line_start":2432,"line_end":2432,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053509,"byte_end":7053517,"line_start":2433,"line_end":2433,"column_start":1,"column_end":9}},{"value":"/   [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053518,"byte_end":7053592,"line_start":2434,"line_end":2434,"column_start":1,"column_end":75}},{"value":"/ );","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053593,"byte_end":7053599,"line_start":2435,"line_end":2435,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053600,"byte_end":7053607,"line_start":2436,"line_end":2436,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053608,"byte_end":7053619,"line_start":2437,"line_end":2437,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053620,"byte_end":7053637,"line_start":2438,"line_end":2438,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054228,"byte_end":7054245,"line_start":2457,"line_end":2457,"column_start":8,"column_end":25},"name":"shl_all_u32_m128i","qualname":"::x86_x64::sse2::shl_all_u32_m128i","value":"pub fn shl_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053805,"byte_end":7053882,"line_start":2444,"line_end":2444,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053883,"byte_end":7053886,"line_start":2445,"line_end":2445,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053887,"byte_end":7053907,"line_start":2446,"line_end":2446,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053908,"byte_end":7053915,"line_start":2447,"line_end":2447,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053916,"byte_end":7053939,"line_start":2448,"line_end":2448,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053940,"byte_end":7053982,"line_start":2449,"line_end":2449,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7053983,"byte_end":7054019,"line_start":2450,"line_end":2450,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shl_all_u32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054020,"byte_end":7054073,"line_start":2451,"line_end":2451,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054074,"byte_end":7054126,"line_start":2452,"line_end":2452,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054127,"byte_end":7054134,"line_start":2453,"line_end":2453,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054135,"byte_end":7054146,"line_start":2454,"line_end":2454,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054147,"byte_end":7054164,"line_start":2455,"line_end":2455,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":762},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054733,"byte_end":7054750,"line_start":2474,"line_end":2474,"column_start":8,"column_end":25},"name":"shl_all_u64_m128i","qualname":"::x86_x64::sse2::shl_all_u64_m128i","value":"pub fn shl_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054332,"byte_end":7054409,"line_start":2461,"line_end":2461,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054410,"byte_end":7054413,"line_start":2462,"line_end":2462,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054414,"byte_end":7054434,"line_start":2463,"line_end":2463,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054435,"byte_end":7054442,"line_start":2464,"line_end":2464,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054443,"byte_end":7054466,"line_start":2465,"line_end":2465,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054467,"byte_end":7054503,"line_start":2466,"line_end":2466,"column_start":1,"column_end":37}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054504,"byte_end":7054540,"line_start":2467,"line_end":2467,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_all_u64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054541,"byte_end":7054594,"line_start":2468,"line_end":2468,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054595,"byte_end":7054631,"line_start":2469,"line_end":2469,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054632,"byte_end":7054639,"line_start":2470,"line_end":2470,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054640,"byte_end":7054651,"line_start":2471,"line_end":2471,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7054652,"byte_end":7054669,"line_start":2472,"line_end":2472,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057088,"byte_end":7057098,"line_start":2554,"line_end":2554,"column_start":8,"column_end":18},"name":"sqrt_m128d","qualname":"::x86_x64::sse2::sqrt_m128d","value":"pub fn sqrt_m128d(m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([25.0, 16.0]);\n let b = sqrt_m128d(a).to_array();\n assert_eq!(b, [5.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7056817,"byte_end":7056840,"line_start":2544,"line_end":2544,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7056841,"byte_end":7056848,"line_start":2545,"line_end":2545,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7056849,"byte_end":7056872,"line_start":2546,"line_end":2546,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([25.0, 16.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7056873,"byte_end":7056917,"line_start":2547,"line_end":2547,"column_start":1,"column_end":45}},{"value":"/ let b = sqrt_m128d(a).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7056918,"byte_end":7056955,"line_start":2548,"line_end":2548,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [5.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7056956,"byte_end":7056986,"line_start":2549,"line_end":2549,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7056987,"byte_end":7056994,"line_start":2550,"line_end":2550,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7056995,"byte_end":7057006,"line_start":2551,"line_end":2551,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057007,"byte_end":7057024,"line_start":2552,"line_end":2552,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057512,"byte_end":7057524,"line_start":2569,"line_end":2569,"column_start":8,"column_end":20},"name":"sqrt_m128d_s","qualname":"::x86_x64::sse2::sqrt_m128d_s","value":"pub fn sqrt_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(b)`, upper lane is unchanged from `a`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = m128d::from_array([25.0, 4.0]);\n let c = sqrt_m128d_s(a, b);\n assert_eq!(c.to_array(), [5.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(b)`, upper lane is unchanged from `a`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057160,"byte_end":7057217,"line_start":2558,"line_end":2558,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057218,"byte_end":7057225,"line_start":2559,"line_end":2559,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057226,"byte_end":7057249,"line_start":2560,"line_end":2560,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057250,"byte_end":7057292,"line_start":2561,"line_end":2561,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([25.0, 4.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057293,"byte_end":7057336,"line_start":2562,"line_end":2562,"column_start":1,"column_end":44}},{"value":"/ let c = sqrt_m128d_s(a, b);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057337,"byte_end":7057368,"line_start":2563,"line_end":2563,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057369,"byte_end":7057410,"line_start":2564,"line_end":2564,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057411,"byte_end":7057418,"line_start":2565,"line_end":2565,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057419,"byte_end":7057430,"line_start":2566,"line_end":2566,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057431,"byte_end":7057448,"line_start":2567,"line_end":2567,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058109,"byte_end":7058126,"line_start":2589,"line_end":2589,"column_start":8,"column_end":25},"name":"shr_all_i16_m128i","qualname":"::x86_x64::sse2::shr_all_i16_m128i","value":"pub fn shr_all_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057601,"byte_end":7057679,"line_start":2573,"line_end":2573,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057680,"byte_end":7057683,"line_start":2574,"line_end":2574,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057684,"byte_end":7057714,"line_start":2575,"line_end":2575,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057715,"byte_end":7057722,"line_start":2576,"line_end":2576,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057723,"byte_end":7057746,"line_start":2577,"line_end":2577,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057747,"byte_end":7057805,"line_start":2578,"line_end":2578,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057806,"byte_end":7057842,"line_start":2579,"line_end":2579,"column_start":1,"column_end":37}},{"value":"/ let c: [i16; 8] = shr_all_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057843,"byte_end":7057896,"line_start":2580,"line_end":2580,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057897,"byte_end":7057912,"line_start":2581,"line_end":2581,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057913,"byte_end":7057921,"line_start":2582,"line_end":2582,"column_start":1,"column_end":9}},{"value":"/   [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7057922,"byte_end":7058000,"line_start":2583,"line_end":2583,"column_start":1,"column_end":79}},{"value":"/ );","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058001,"byte_end":7058007,"line_start":2584,"line_end":2584,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058008,"byte_end":7058015,"line_start":2585,"line_end":2585,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058016,"byte_end":7058027,"line_start":2586,"line_end":2586,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058028,"byte_end":7058045,"line_start":2587,"line_end":2587,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":769},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058651,"byte_end":7058668,"line_start":2606,"line_end":2606,"column_start":8,"column_end":25},"name":"shr_all_i32_m128i","qualname":"::x86_x64::sse2::shr_all_i32_m128i","value":"pub fn shr_all_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058213,"byte_end":7058291,"line_start":2593,"line_end":2593,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058292,"byte_end":7058295,"line_start":2594,"line_end":2594,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058296,"byte_end":7058326,"line_start":2595,"line_end":2595,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058327,"byte_end":7058334,"line_start":2596,"line_end":2596,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058335,"byte_end":7058358,"line_start":2597,"line_end":2597,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058359,"byte_end":7058403,"line_start":2598,"line_end":2598,"column_start":1,"column_end":45}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058404,"byte_end":7058440,"line_start":2599,"line_end":2599,"column_start":1,"column_end":37}},{"value":"/ let c: [i32; 4] = shr_all_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058441,"byte_end":7058494,"line_start":2600,"line_end":2600,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058495,"byte_end":7058549,"line_start":2601,"line_end":2601,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058550,"byte_end":7058557,"line_start":2602,"line_end":2602,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058558,"byte_end":7058569,"line_start":2603,"line_end":2603,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7058570,"byte_end":7058587,"line_start":2604,"line_end":2604,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060749,"byte_end":7060766,"line_start":2683,"line_end":2683,"column_start":8,"column_end":25},"name":"shr_all_u16_m128i","qualname":"::x86_x64::sse2::shr_all_u16_m128i","value":"pub fn shr_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060191,"byte_end":7060269,"line_start":2659,"line_end":2659,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060270,"byte_end":7060273,"line_start":2660,"line_end":2660,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060274,"byte_end":7060281,"line_start":2661,"line_end":2661,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060282,"byte_end":7060305,"line_start":2662,"line_end":2662,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060306,"byte_end":7060368,"line_start":2663,"line_end":2663,"column_start":1,"column_end":63}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060369,"byte_end":7060405,"line_start":2664,"line_end":2664,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shr_all_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060406,"byte_end":7060459,"line_start":2665,"line_end":2665,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060460,"byte_end":7060475,"line_start":2666,"line_end":2666,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060476,"byte_end":7060484,"line_start":2667,"line_end":2667,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060485,"byte_end":7060492,"line_start":2668,"line_end":2668,"column_start":1,"column_end":8}},{"value":"/     1_u16 >> 3,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060493,"byte_end":7060512,"line_start":2669,"line_end":2669,"column_start":1,"column_end":20}},{"value":"/     2 >> 3,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060513,"byte_end":7060528,"line_start":2670,"line_end":2670,"column_start":1,"column_end":16}},{"value":"/     3 >> 3,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060529,"byte_end":7060544,"line_start":2671,"line_end":2671,"column_start":1,"column_end":16}},{"value":"/     4 >> 3,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060545,"byte_end":7060560,"line_start":2672,"line_end":2672,"column_start":1,"column_end":16}},{"value":"/     100 >> 3,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060561,"byte_end":7060578,"line_start":2673,"line_end":2673,"column_start":1,"column_end":18}},{"value":"/     200 >> 3,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060579,"byte_end":7060596,"line_start":2674,"line_end":2674,"column_start":1,"column_end":18}},{"value":"/     300 >> 3,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060597,"byte_end":7060614,"line_start":2675,"line_end":2675,"column_start":1,"column_end":18}},{"value":"/     400 >> 3,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060615,"byte_end":7060632,"line_start":2676,"line_end":2676,"column_start":1,"column_end":18}},{"value":"/   ]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060633,"byte_end":7060640,"line_start":2677,"line_end":2677,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060641,"byte_end":7060647,"line_start":2678,"line_end":2678,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060648,"byte_end":7060655,"line_start":2679,"line_end":2679,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060656,"byte_end":7060667,"line_start":2680,"line_end":2680,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060668,"byte_end":7060685,"line_start":2681,"line_end":2681,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061265,"byte_end":7061282,"line_start":2699,"line_end":2699,"column_start":8,"column_end":25},"name":"shr_all_u32_m128i","qualname":"::x86_x64::sse2::shr_all_u32_m128i","value":"pub fn shr_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060853,"byte_end":7060931,"line_start":2687,"line_end":2687,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060932,"byte_end":7060935,"line_start":2688,"line_end":2688,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060936,"byte_end":7060943,"line_start":2689,"line_end":2689,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060944,"byte_end":7060967,"line_start":2690,"line_end":2690,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 300, 400]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7060968,"byte_end":7061014,"line_start":2691,"line_end":2691,"column_start":1,"column_end":47}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061015,"byte_end":7061051,"line_start":2692,"line_end":2692,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shr_all_u32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061052,"byte_end":7061105,"line_start":2693,"line_end":2693,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061106,"byte_end":7061163,"line_start":2694,"line_end":2694,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061164,"byte_end":7061171,"line_start":2695,"line_end":2695,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061172,"byte_end":7061183,"line_start":2696,"line_end":2696,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061184,"byte_end":7061201,"line_start":2697,"line_end":2697,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061773,"byte_end":7061790,"line_start":2716,"line_end":2716,"column_start":8,"column_end":25},"name":"shr_all_u64_m128i","qualname":"::x86_x64::sse2::shr_all_u64_m128i","value":"pub fn shr_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061369,"byte_end":7061447,"line_start":2703,"line_end":2703,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061448,"byte_end":7061451,"line_start":2704,"line_end":2704,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061452,"byte_end":7061472,"line_start":2705,"line_end":2705,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061473,"byte_end":7061480,"line_start":2706,"line_end":2706,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061481,"byte_end":7061504,"line_start":2707,"line_end":2707,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 56]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061505,"byte_end":7061542,"line_start":2708,"line_end":2708,"column_start":1,"column_end":38}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061543,"byte_end":7061579,"line_start":2709,"line_end":2709,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shr_all_u64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061580,"byte_end":7061633,"line_start":2710,"line_end":2710,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 56 >> 3]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061634,"byte_end":7061671,"line_start":2711,"line_end":2711,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061672,"byte_end":7061679,"line_start":2712,"line_end":2712,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061680,"byte_end":7061691,"line_start":2713,"line_end":2713,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7061692,"byte_end":7061709,"line_start":2714,"line_end":2714,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064550,"byte_end":7064561,"line_start":2814,"line_end":2814,"column_start":8,"column_end":19},"name":"store_m128d","qualname":"::x86_x64::sse2::store_m128d","value":"pub fn store_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064220,"byte_end":7064264,"line_start":2803,"line_end":2803,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064265,"byte_end":7064272,"line_start":2804,"line_end":2804,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064273,"byte_end":7064296,"line_start":2805,"line_end":2805,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064297,"byte_end":7064341,"line_start":2806,"line_end":2806,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064342,"byte_end":7064373,"line_start":2807,"line_end":2807,"column_start":1,"column_end":32}},{"value":"/ store_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064374,"byte_end":7064401,"line_start":2808,"line_end":2808,"column_start":1,"column_end":28}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064402,"byte_end":7064427,"line_start":2809,"line_end":2809,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064428,"byte_end":7064460,"line_start":2810,"line_end":2810,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064461,"byte_end":7064468,"line_start":2811,"line_end":2811,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064469,"byte_end":7064486,"line_start":2812,"line_end":2812,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":779},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064948,"byte_end":7064961,"line_start":2828,"line_end":2828,"column_start":8,"column_end":21},"name":"store_m128d_s","qualname":"::x86_x64::sse2::store_m128d_s","value":"pub fn store_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_m128d_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064652,"byte_end":7064705,"line_start":2818,"line_end":2818,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064706,"byte_end":7064713,"line_start":2819,"line_end":2819,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064714,"byte_end":7064737,"line_start":2820,"line_end":2820,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064738,"byte_end":7064782,"line_start":2821,"line_end":2821,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064783,"byte_end":7064803,"line_start":2822,"line_end":2822,"column_start":1,"column_end":21}},{"value":"/ store_m128d_s(&mut f, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064804,"byte_end":7064833,"line_start":2823,"line_end":2823,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064834,"byte_end":7064858,"line_start":2824,"line_end":2824,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064859,"byte_end":7064866,"line_start":2825,"line_end":2825,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7064867,"byte_end":7064884,"line_start":2826,"line_end":2826,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065394,"byte_end":7065411,"line_start":2843,"line_end":2843,"column_start":8,"column_end":25},"name":"store_splat_m128d","qualname":"::x86_x64::sse2::store_splat_m128d","value":"pub fn store_splat_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_splat_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065036,"byte_end":7065102,"line_start":2832,"line_end":2832,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065103,"byte_end":7065110,"line_start":2833,"line_end":2833,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065111,"byte_end":7065134,"line_start":2834,"line_end":2834,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065135,"byte_end":7065179,"line_start":2835,"line_end":2835,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065180,"byte_end":7065211,"line_start":2836,"line_end":2836,"column_start":1,"column_end":32}},{"value":"/ store_splat_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065212,"byte_end":7065245,"line_start":2837,"line_end":2837,"column_start":1,"column_end":34}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065246,"byte_end":7065271,"line_start":2838,"line_end":2838,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065272,"byte_end":7065304,"line_start":2839,"line_end":2839,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065305,"byte_end":7065312,"line_start":2840,"line_end":2840,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065313,"byte_end":7065330,"line_start":2841,"line_end":2841,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065833,"byte_end":7065844,"line_start":2858,"line_end":2858,"column_start":8,"column_end":19},"name":"store_m128i","qualname":"::x86_x64::sse2::store_m128i","value":"pub fn store_m128i(&mut m128i, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let mut b = zeroed_m128i();\n store_m128i(&mut b, a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065503,"byte_end":7065547,"line_start":2847,"line_end":2847,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065548,"byte_end":7065555,"line_start":2848,"line_end":2848,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065556,"byte_end":7065579,"line_start":2849,"line_end":2849,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065580,"byte_end":7065618,"line_start":2850,"line_end":2850,"column_start":1,"column_end":39}},{"value":"/ let mut b = zeroed_m128i();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065619,"byte_end":7065650,"line_start":2851,"line_end":2851,"column_start":1,"column_end":32}},{"value":"/ store_m128i(&mut b, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065651,"byte_end":7065678,"line_start":2852,"line_end":2852,"column_start":1,"column_end":28}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065679,"byte_end":7065710,"line_start":2853,"line_end":2853,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065711,"byte_end":7065743,"line_start":2854,"line_end":2854,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065744,"byte_end":7065751,"line_start":2855,"line_end":2855,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065752,"byte_end":7065769,"line_start":2856,"line_end":2856,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066221,"byte_end":7066239,"line_start":2872,"line_end":2872,"column_start":8,"column_end":26},"name":"store_high_m128d_s","qualname":"::x86_x64::sse2::store_high_m128d_s","value":"pub fn store_high_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the high lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_high_m128d_s(&mut f, a);\n assert_eq!(f, 12.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the high lane value to the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065919,"byte_end":7065973,"line_start":2862,"line_end":2862,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065974,"byte_end":7065981,"line_start":2863,"line_end":2863,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7065982,"byte_end":7066005,"line_start":2864,"line_end":2864,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066006,"byte_end":7066050,"line_start":2865,"line_end":2865,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066051,"byte_end":7066071,"line_start":2866,"line_end":2866,"column_start":1,"column_end":21}},{"value":"/ store_high_m128d_s(&mut f, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066072,"byte_end":7066106,"line_start":2867,"line_end":2867,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(f, 12.0);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066107,"byte_end":7066131,"line_start":2868,"line_end":2868,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066132,"byte_end":7066139,"line_start":2869,"line_end":2869,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066140,"byte_end":7066157,"line_start":2870,"line_end":2870,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066638,"byte_end":7066655,"line_start":2887,"line_end":2887,"column_start":8,"column_end":25},"name":"store_i64_m128i_s","qualname":"::x86_x64::sse2::store_i64_m128i_s","value":"pub fn store_i64_m128i_s(&mut i64, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let mut b = 0_i64;\n store_i64_m128i_s(&mut b, a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066315,"byte_end":7066359,"line_start":2876,"line_end":2876,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066360,"byte_end":7066367,"line_start":2877,"line_end":2877,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066368,"byte_end":7066391,"line_start":2878,"line_end":2878,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066392,"byte_end":7066428,"line_start":2879,"line_end":2879,"column_start":1,"column_end":37}},{"value":"/ let mut b = 0_i64;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066429,"byte_end":7066451,"line_start":2880,"line_end":2880,"column_start":1,"column_end":23}},{"value":"/ store_i64_m128i_s(&mut b, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066452,"byte_end":7066485,"line_start":2881,"line_end":2881,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066486,"byte_end":7066511,"line_start":2882,"line_end":2882,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066512,"byte_end":7066519,"line_start":2883,"line_end":2883,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066520,"byte_end":7066537,"line_start":2884,"line_end":2884,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066538,"byte_end":7066574,"line_start":2885,"line_end":2885,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":784},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067089,"byte_end":7067109,"line_start":2902,"line_end":2902,"column_start":8,"column_end":28},"name":"store_reversed_m128d","qualname":"::x86_x64::sse2::store_reversed_m128d","value":"pub fn store_reversed_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_reversed_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066750,"byte_end":7066794,"line_start":2891,"line_end":2891,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066795,"byte_end":7066802,"line_start":2892,"line_end":2892,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066803,"byte_end":7066826,"line_start":2893,"line_end":2893,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066827,"byte_end":7066871,"line_start":2894,"line_end":2894,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066872,"byte_end":7066903,"line_start":2895,"line_end":2895,"column_start":1,"column_end":32}},{"value":"/ store_reversed_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066904,"byte_end":7066940,"line_start":2896,"line_end":2896,"column_start":1,"column_end":37}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066941,"byte_end":7066966,"line_start":2897,"line_end":2897,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [12.0, 10.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7066967,"byte_end":7066999,"line_start":2898,"line_end":2898,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067000,"byte_end":7067007,"line_start":2899,"line_end":2899,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067008,"byte_end":7067025,"line_start":2900,"line_end":2900,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067511,"byte_end":7067532,"line_start":2916,"line_end":2916,"column_start":8,"column_end":29},"name":"store_unaligned_m128d","qualname":"::x86_x64::sse2::store_unaligned_m128d","value":"pub fn store_unaligned_m128d(&mut [f64; ], m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = [0.0, 0.0];\n store_unaligned_m128d(&mut b, a);\n assert_eq!(b, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067201,"byte_end":7067245,"line_start":2906,"line_end":2906,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067246,"byte_end":7067253,"line_start":2907,"line_end":2907,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067254,"byte_end":7067277,"line_start":2908,"line_end":2908,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067278,"byte_end":7067322,"line_start":2909,"line_end":2909,"column_start":1,"column_end":45}},{"value":"/ let mut b = [0.0, 0.0];","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067323,"byte_end":7067350,"line_start":2910,"line_end":2910,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067351,"byte_end":7067388,"line_start":2911,"line_end":2911,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [10.0, 12.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067389,"byte_end":7067421,"line_start":2912,"line_end":2912,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067422,"byte_end":7067429,"line_start":2913,"line_end":2913,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067430,"byte_end":7067447,"line_start":2914,"line_end":2914,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068014,"byte_end":7068035,"line_start":2931,"line_end":2931,"column_start":8,"column_end":29},"name":"store_unaligned_m128i","qualname":"::x86_x64::sse2::store_unaligned_m128i","value":"pub fn store_unaligned_m128i(&mut [u8; ], m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let mut b = [0_u8; 16];\n store_unaligned_m128i(&mut b, a);\n assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067614,"byte_end":7067658,"line_start":2920,"line_end":2920,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067659,"byte_end":7067666,"line_start":2921,"line_end":2921,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067667,"byte_end":7067690,"line_start":2922,"line_end":2922,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067691,"byte_end":7067702,"line_start":2923,"line_end":2923,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067703,"byte_end":7067780,"line_start":2924,"line_end":2924,"column_start":1,"column_end":78}},{"value":"/ let mut b = [0_u8; 16];","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067781,"byte_end":7067808,"line_start":2925,"line_end":2925,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128i(&mut b, a);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067809,"byte_end":7067846,"line_start":2926,"line_end":2926,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067847,"byte_end":7067924,"line_start":2927,"line_end":2927,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067925,"byte_end":7067932,"line_start":2928,"line_end":2928,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7067933,"byte_end":7067950,"line_start":2929,"line_end":2929,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068653,"byte_end":7068665,"line_start":2952,"line_end":2952,"column_start":8,"column_end":20},"name":"sub_i8_m128i","qualname":"::x86_x64::sse2::sub_i8_m128i","value":"pub fn sub_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = sub_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068127,"byte_end":7068167,"line_start":2935,"line_end":2935,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068168,"byte_end":7068175,"line_start":2936,"line_end":2936,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068176,"byte_end":7068199,"line_start":2937,"line_end":2937,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068200,"byte_end":7068211,"line_start":2938,"line_end":2938,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068212,"byte_end":7068289,"line_start":2939,"line_end":2939,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068290,"byte_end":7068315,"line_start":2940,"line_end":2940,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068316,"byte_end":7068386,"line_start":2941,"line_end":2941,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068387,"byte_end":7068394,"line_start":2942,"line_end":2942,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = sub_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068395,"byte_end":7068443,"line_start":2943,"line_end":2943,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068444,"byte_end":7068459,"line_start":2944,"line_end":2944,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068460,"byte_end":7068468,"line_start":2945,"line_end":2945,"column_start":1,"column_end":9}},{"value":"/   [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068469,"byte_end":7068544,"line_start":2946,"line_end":2946,"column_start":1,"column_end":76}},{"value":"/ );","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068545,"byte_end":7068551,"line_start":2947,"line_end":2947,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068552,"byte_end":7068559,"line_start":2948,"line_end":2948,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068560,"byte_end":7068571,"line_start":2949,"line_end":2949,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068572,"byte_end":7068589,"line_start":2950,"line_end":2950,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069151,"byte_end":7069164,"line_start":2967,"line_end":2967,"column_start":8,"column_end":21},"name":"sub_i16_m128i","qualname":"::x86_x64::sse2::sub_i16_m128i","value":"pub fn sub_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);\n let c: [i16; 8] = sub_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068743,"byte_end":7068784,"line_start":2956,"line_end":2956,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068785,"byte_end":7068792,"line_start":2957,"line_end":2957,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068793,"byte_end":7068816,"line_start":2958,"line_end":2958,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068817,"byte_end":7068875,"line_start":2959,"line_end":2959,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068876,"byte_end":7068941,"line_start":2960,"line_end":2960,"column_start":1,"column_end":66}},{"value":"/ let c: [i16; 8] = sub_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068942,"byte_end":7068991,"line_start":2961,"line_end":2961,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7068992,"byte_end":7069049,"line_start":2962,"line_end":2962,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069050,"byte_end":7069057,"line_start":2963,"line_end":2963,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069058,"byte_end":7069069,"line_start":2964,"line_end":2964,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069070,"byte_end":7069087,"line_start":2965,"line_end":2965,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":791},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069591,"byte_end":7069604,"line_start":2982,"line_end":2982,"column_start":8,"column_end":21},"name":"sub_i32_m128i","qualname":"::x86_x64::sse2::sub_i32_m128i","value":"pub fn sub_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([50, 60, 70, 87]);\n let c: [i32; 4] = sub_i32_m128i(a, b).into();\n assert_eq!(c, [-49, -58, -67, -83]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069243,"byte_end":7069284,"line_start":2971,"line_end":2971,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069285,"byte_end":7069292,"line_start":2972,"line_end":2972,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069293,"byte_end":7069316,"line_start":2973,"line_end":2973,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069317,"byte_end":7069355,"line_start":2974,"line_end":2974,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([50, 60, 70, 87]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069356,"byte_end":7069398,"line_start":2975,"line_end":2975,"column_start":1,"column_end":43}},{"value":"/ let c: [i32; 4] = sub_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069399,"byte_end":7069448,"line_start":2976,"line_end":2976,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-49, -58, -67, -83]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069449,"byte_end":7069489,"line_start":2977,"line_end":2977,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069490,"byte_end":7069497,"line_start":2978,"line_end":2978,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069498,"byte_end":7069509,"line_start":2979,"line_end":2979,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069510,"byte_end":7069527,"line_start":2980,"line_end":2980,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070019,"byte_end":7070032,"line_start":2997,"line_end":2997,"column_start":8,"column_end":21},"name":"sub_i64_m128i","qualname":"::x86_x64::sse2::sub_i64_m128i","value":"pub fn sub_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = sub_i64_m128i(a, b).into();\n assert_eq!(c, [9093, 86]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i64`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069683,"byte_end":7069724,"line_start":2986,"line_end":2986,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069725,"byte_end":7069732,"line_start":2987,"line_end":2987,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069733,"byte_end":7069756,"line_start":2988,"line_end":2988,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069757,"byte_end":7069795,"line_start":2989,"line_end":2989,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069796,"byte_end":7069836,"line_start":2990,"line_end":2990,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = sub_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069837,"byte_end":7069886,"line_start":2991,"line_end":2991,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [9093, 86]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069887,"byte_end":7069917,"line_start":2992,"line_end":2992,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069918,"byte_end":7069925,"line_start":2993,"line_end":2993,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069926,"byte_end":7069937,"line_start":2994,"line_end":2994,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7069938,"byte_end":7069955,"line_start":2995,"line_end":2995,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":793},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070430,"byte_end":7070439,"line_start":3012,"line_end":3012,"column_start":8,"column_end":17},"name":"sub_m128d","qualname":"::x86_x64::sse2::sub_m128d","value":"pub fn sub_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = sub_m128d(a, b).to_array();\n assert_eq!(c, [-8.0, 93.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070111,"byte_end":7070132,"line_start":3001,"line_end":3001,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070133,"byte_end":7070140,"line_start":3002,"line_end":3002,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070141,"byte_end":7070164,"line_start":3003,"line_end":3003,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070165,"byte_end":7070209,"line_start":3004,"line_end":3004,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070210,"byte_end":7070255,"line_start":3005,"line_end":3005,"column_start":1,"column_end":46}},{"value":"/ let c = sub_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070256,"byte_end":7070295,"line_start":3006,"line_end":3006,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [-8.0, 93.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070296,"byte_end":7070328,"line_start":3007,"line_end":3007,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070329,"byte_end":7070336,"line_start":3008,"line_end":3008,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070337,"byte_end":7070348,"line_start":3009,"line_end":3009,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070349,"byte_end":7070366,"line_start":3010,"line_end":3010,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070862,"byte_end":7070873,"line_start":3027,"line_end":3027,"column_start":8,"column_end":19},"name":"sub_m128d_s","qualname":"::x86_x64::sse2::sub_m128d_s","value":"pub fn sub_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a - b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = sub_m128d_s(a, b).to_array();\n assert_eq!(c, [-8.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a - b`, high lane unchanged.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070515,"byte_end":7070560,"line_start":3016,"line_end":3016,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070561,"byte_end":7070568,"line_start":3017,"line_end":3017,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070569,"byte_end":7070592,"line_start":3018,"line_end":3018,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070593,"byte_end":7070637,"line_start":3019,"line_end":3019,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070638,"byte_end":7070685,"line_start":3020,"line_end":3020,"column_start":1,"column_end":48}},{"value":"/ let c = sub_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070686,"byte_end":7070727,"line_start":3021,"line_end":3021,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [-8.0, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070728,"byte_end":7070760,"line_start":3022,"line_end":3022,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070761,"byte_end":7070768,"line_start":3023,"line_end":3023,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070769,"byte_end":7070780,"line_start":3024,"line_end":3024,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070781,"byte_end":7070798,"line_start":3025,"line_end":3025,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":795},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071502,"byte_end":7071525,"line_start":3048,"line_end":3048,"column_start":8,"column_end":31},"name":"sub_saturating_i8_m128i","qualname":"::x86_x64::sse2::sub_saturating_i8_m128i","value":"pub fn sub_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);\n let b = m128i::from([\n   0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7070949,"byte_end":7071000,"line_start":3031,"line_end":3031,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071001,"byte_end":7071008,"line_start":3032,"line_end":3032,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071009,"byte_end":7071032,"line_start":3033,"line_end":3033,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071033,"byte_end":7071044,"line_start":3034,"line_end":3034,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071045,"byte_end":7071127,"line_start":3035,"line_end":3035,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071128,"byte_end":7071153,"line_start":3036,"line_end":3036,"column_start":1,"column_end":26}},{"value":"/   0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071154,"byte_end":7071223,"line_start":3037,"line_end":3037,"column_start":1,"column_end":70}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071224,"byte_end":7071231,"line_start":3038,"line_end":3038,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071232,"byte_end":7071291,"line_start":3039,"line_end":3039,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071292,"byte_end":7071307,"line_start":3040,"line_end":3040,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071308,"byte_end":7071316,"line_start":3041,"line_end":3041,"column_start":1,"column_end":9}},{"value":"/   [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071317,"byte_end":7071393,"line_start":3042,"line_end":3042,"column_start":1,"column_end":77}},{"value":"/ );","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071394,"byte_end":7071400,"line_start":3043,"line_end":3043,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071401,"byte_end":7071408,"line_start":3044,"line_end":3044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071409,"byte_end":7071420,"line_start":3045,"line_end":3045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071421,"byte_end":7071438,"line_start":3046,"line_end":3046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":796},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072043,"byte_end":7072067,"line_start":3063,"line_end":3063,"column_start":8,"column_end":32},"name":"sub_saturating_i16_m128i","qualname":"::x86_x64::sse2::sub_saturating_i16_m128i","value":"pub fn sub_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);\n let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071604,"byte_end":7071656,"line_start":3052,"line_end":3052,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071657,"byte_end":7071664,"line_start":3053,"line_end":3053,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071665,"byte_end":7071688,"line_start":3054,"line_end":3054,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071689,"byte_end":7071747,"line_start":3055,"line_end":3055,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071748,"byte_end":7071818,"line_start":3056,"line_end":3056,"column_start":1,"column_end":71}},{"value":"/ let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071819,"byte_end":7071879,"line_start":3057,"line_end":3057,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071880,"byte_end":7071941,"line_start":3058,"line_end":3058,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071942,"byte_end":7071949,"line_start":3059,"line_end":3059,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071950,"byte_end":7071961,"line_start":3060,"line_end":3060,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7071962,"byte_end":7071979,"line_start":3061,"line_end":3061,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072657,"byte_end":7072680,"line_start":3080,"line_end":3080,"column_start":8,"column_end":31},"name":"sub_saturating_u8_m128i","qualname":"::x86_x64::sse2::sub_saturating_u8_m128i","value":"pub fn sub_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);\n let b =\n   m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();\n assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u8`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072147,"byte_end":7072198,"line_start":3067,"line_end":3067,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072199,"byte_end":7072206,"line_start":3068,"line_end":3068,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072207,"byte_end":7072230,"line_start":3069,"line_end":3069,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072231,"byte_end":7072242,"line_start":3070,"line_end":3070,"column_start":1,"column_end":12}},{"value":"/   m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072243,"byte_end":7072324,"line_start":3071,"line_end":3071,"column_start":1,"column_end":82}},{"value":"/ let b =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072325,"byte_end":7072336,"line_start":3072,"line_end":3072,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072337,"byte_end":7072419,"line_start":3073,"line_end":3073,"column_start":1,"column_end":83}},{"value":"/ let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072420,"byte_end":7072479,"line_start":3074,"line_end":3074,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072480,"byte_end":7072555,"line_start":3075,"line_end":3075,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072556,"byte_end":7072563,"line_start":3076,"line_end":3076,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072564,"byte_end":7072575,"line_start":3077,"line_end":3077,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072576,"byte_end":7072593,"line_start":3078,"line_end":3078,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073204,"byte_end":7073228,"line_start":3095,"line_end":3095,"column_start":8,"column_end":32},"name":"sub_saturating_u16_m128i","qualname":"::x86_x64::sse2::sub_saturating_u16_m128i","value":"pub fn sub_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);\n let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);\n let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u16`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072759,"byte_end":7072811,"line_start":3084,"line_end":3084,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072812,"byte_end":7072819,"line_start":3085,"line_end":3085,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072820,"byte_end":7072843,"line_start":3086,"line_end":3086,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072844,"byte_end":7072914,"line_start":3087,"line_end":3087,"column_start":1,"column_end":71}},{"value":"/ let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072915,"byte_end":7072987,"line_start":3088,"line_end":3088,"column_start":1,"column_end":73}},{"value":"/ let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7072988,"byte_end":7073048,"line_start":3089,"line_end":3089,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073049,"byte_end":7073102,"line_start":3090,"line_end":3090,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073103,"byte_end":7073110,"line_start":3091,"line_end":3091,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073111,"byte_end":7073122,"line_start":3092,"line_end":3092,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073123,"byte_end":7073140,"line_start":3093,"line_end":3093,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073854,"byte_end":7073874,"line_start":3116,"line_end":3116,"column_start":8,"column_end":28},"name":"unpack_high_i8_m128i","qualname":"::x86_x64::sse2::unpack_high_i8_m128i","value":"pub fn unpack_high_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i8` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073308,"byte_end":7073365,"line_start":3099,"line_end":3099,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073366,"byte_end":7073373,"line_start":3100,"line_end":3100,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073374,"byte_end":7073397,"line_start":3101,"line_end":3101,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073398,"byte_end":7073409,"line_start":3102,"line_end":3102,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073410,"byte_end":7073487,"line_start":3103,"line_end":3103,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073488,"byte_end":7073513,"line_start":3104,"line_end":3104,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073514,"byte_end":7073584,"line_start":3105,"line_end":3105,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073585,"byte_end":7073592,"line_start":3106,"line_end":3106,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073593,"byte_end":7073649,"line_start":3107,"line_end":3107,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073650,"byte_end":7073665,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073666,"byte_end":7073674,"line_start":3109,"line_end":3109,"column_start":1,"column_end":9}},{"value":"/   [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073675,"byte_end":7073745,"line_start":3110,"line_end":3110,"column_start":1,"column_end":71}},{"value":"/ );","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073746,"byte_end":7073752,"line_start":3111,"line_end":3111,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073753,"byte_end":7073760,"line_start":3112,"line_end":3112,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073761,"byte_end":7073772,"line_start":3113,"line_end":3113,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073773,"byte_end":7073790,"line_start":3114,"line_end":3114,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074384,"byte_end":7074405,"line_start":3131,"line_end":3131,"column_start":8,"column_end":29},"name":"unpack_high_i16_m128i","qualname":"::x86_x64::sse2::unpack_high_i16_m128i","value":"pub fn unpack_high_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();\n assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i16` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7073957,"byte_end":7074015,"line_start":3120,"line_end":3120,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074016,"byte_end":7074023,"line_start":3121,"line_end":3121,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074024,"byte_end":7074047,"line_start":3122,"line_end":3122,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074048,"byte_end":7074106,"line_start":3123,"line_end":3123,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074107,"byte_end":7074168,"line_start":3124,"line_end":3124,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074169,"byte_end":7074226,"line_start":3125,"line_end":3125,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074227,"byte_end":7074282,"line_start":3126,"line_end":3126,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074283,"byte_end":7074290,"line_start":3127,"line_end":3127,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074291,"byte_end":7074302,"line_start":3128,"line_end":3128,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074303,"byte_end":7074320,"line_start":3129,"line_end":3129,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074850,"byte_end":7074871,"line_start":3146,"line_end":3146,"column_start":8,"column_end":29},"name":"unpack_high_i32_m128i","qualname":"::x86_x64::sse2::unpack_high_i32_m128i","value":"pub fn unpack_high_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();\n assert_eq!(c, [3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i32` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074489,"byte_end":7074547,"line_start":3135,"line_end":3135,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074548,"byte_end":7074555,"line_start":3136,"line_end":3136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074556,"byte_end":7074579,"line_start":3137,"line_end":3137,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074580,"byte_end":7074618,"line_start":3138,"line_end":3138,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074619,"byte_end":7074657,"line_start":3139,"line_end":3139,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074658,"byte_end":7074715,"line_start":3140,"line_end":3140,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [3, 7, 4, 8]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074716,"byte_end":7074748,"line_start":3141,"line_end":3141,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074749,"byte_end":7074756,"line_start":3142,"line_end":3142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074757,"byte_end":7074768,"line_start":3143,"line_end":3143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074769,"byte_end":7074786,"line_start":3144,"line_end":3144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075313,"byte_end":7075334,"line_start":3161,"line_end":3161,"column_start":8,"column_end":29},"name":"unpack_high_i64_m128i","qualname":"::x86_x64::sse2::unpack_high_i64_m128i","value":"pub fn unpack_high_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();\n assert_eq!(c, [87, 1]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i64` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7074955,"byte_end":7075013,"line_start":3150,"line_end":3150,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075014,"byte_end":7075021,"line_start":3151,"line_end":3151,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075022,"byte_end":7075045,"line_start":3152,"line_end":3152,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075046,"byte_end":7075084,"line_start":3153,"line_end":3153,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075085,"byte_end":7075125,"line_start":3154,"line_end":3154,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075126,"byte_end":7075183,"line_start":3155,"line_end":3155,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [87, 1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075184,"byte_end":7075211,"line_start":3156,"line_end":3156,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075212,"byte_end":7075219,"line_start":3157,"line_end":3157,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075220,"byte_end":7075231,"line_start":3158,"line_end":3158,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075232,"byte_end":7075249,"line_start":3159,"line_end":3159,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075776,"byte_end":7075793,"line_start":3176,"line_end":3176,"column_start":8,"column_end":25},"name":"unpack_high_m128d","qualname":"::x86_x64::sse2::unpack_high_m128d","value":"pub fn unpack_high_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_high_m128d(a, b).to_array();\n assert_eq!(c, [87.5, -6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075418,"byte_end":7075470,"line_start":3165,"line_end":3165,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075471,"byte_end":7075478,"line_start":3166,"line_end":3166,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075479,"byte_end":7075502,"line_start":3167,"line_end":3167,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075503,"byte_end":7075547,"line_start":3168,"line_end":3168,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075548,"byte_end":7075593,"line_start":3169,"line_end":3169,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_high_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075594,"byte_end":7075641,"line_start":3170,"line_end":3170,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [87.5, -6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075642,"byte_end":7075674,"line_start":3171,"line_end":3171,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075675,"byte_end":7075682,"line_start":3172,"line_end":3172,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075683,"byte_end":7075694,"line_start":3173,"line_end":3173,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075695,"byte_end":7075712,"line_start":3174,"line_end":3174,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076396,"byte_end":7076415,"line_start":3194,"line_end":3194,"column_start":8,"column_end":27},"name":"unpack_low_i8_m128i","qualname":"::x86_x64::sse2::unpack_low_i8_m128i","value":"pub fn unpack_low_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i8` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075874,"byte_end":7075930,"line_start":3180,"line_end":3180,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075931,"byte_end":7075938,"line_start":3181,"line_end":3181,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075939,"byte_end":7075962,"line_start":3182,"line_end":3182,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075963,"byte_end":7075974,"line_start":3183,"line_end":3183,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7075975,"byte_end":7076052,"line_start":3184,"line_end":3184,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076053,"byte_end":7076078,"line_start":3185,"line_end":3185,"column_start":1,"column_end":26}},{"value":"/   12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076079,"byte_end":7076153,"line_start":3186,"line_end":3186,"column_start":1,"column_end":75}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076154,"byte_end":7076161,"line_start":3187,"line_end":3187,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076162,"byte_end":7076217,"line_start":3188,"line_end":3188,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076218,"byte_end":7076294,"line_start":3189,"line_end":3189,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076295,"byte_end":7076302,"line_start":3190,"line_end":3190,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076303,"byte_end":7076314,"line_start":3191,"line_end":3191,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076315,"byte_end":7076332,"line_start":3192,"line_end":3192,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076912,"byte_end":7076932,"line_start":3209,"line_end":3209,"column_start":8,"column_end":28},"name":"unpack_low_i16_m128i","qualname":"::x86_x64::sse2::unpack_low_i16_m128i","value":"pub fn unpack_low_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i16` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076498,"byte_end":7076555,"line_start":3198,"line_end":3198,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076556,"byte_end":7076563,"line_start":3199,"line_end":3199,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076564,"byte_end":7076587,"line_start":3200,"line_end":3200,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076588,"byte_end":7076646,"line_start":3201,"line_end":3201,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076647,"byte_end":7076708,"line_start":3202,"line_end":3202,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076709,"byte_end":7076765,"line_start":3203,"line_end":3203,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076766,"byte_end":7076810,"line_start":3204,"line_end":3204,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076811,"byte_end":7076818,"line_start":3205,"line_end":3205,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076819,"byte_end":7076830,"line_start":3206,"line_end":3206,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7076831,"byte_end":7076848,"line_start":3207,"line_end":3207,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":806},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077375,"byte_end":7077395,"line_start":3224,"line_end":3224,"column_start":8,"column_end":28},"name":"unpack_low_i32_m128i","qualname":"::x86_x64::sse2::unpack_low_i32_m128i","value":"pub fn unpack_low_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i32` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077016,"byte_end":7077073,"line_start":3213,"line_end":3213,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077074,"byte_end":7077081,"line_start":3214,"line_end":3214,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077082,"byte_end":7077105,"line_start":3215,"line_end":3215,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077106,"byte_end":7077144,"line_start":3216,"line_end":3216,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077145,"byte_end":7077183,"line_start":3217,"line_end":3217,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077184,"byte_end":7077240,"line_start":3218,"line_end":3218,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077241,"byte_end":7077273,"line_start":3219,"line_end":3219,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077274,"byte_end":7077281,"line_start":3220,"line_end":3220,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077282,"byte_end":7077293,"line_start":3221,"line_end":3221,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077294,"byte_end":7077311,"line_start":3222,"line_end":3222,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077839,"byte_end":7077859,"line_start":3239,"line_end":3239,"column_start":8,"column_end":28},"name":"unpack_low_i64_m128i","qualname":"::x86_x64::sse2::unpack_low_i64_m128i","value":"pub fn unpack_low_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();\n assert_eq!(c, [92, -9001]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i64` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077479,"byte_end":7077536,"line_start":3228,"line_end":3228,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077537,"byte_end":7077544,"line_start":3229,"line_end":3229,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077545,"byte_end":7077568,"line_start":3230,"line_end":3230,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077569,"byte_end":7077607,"line_start":3231,"line_end":3231,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077608,"byte_end":7077648,"line_start":3232,"line_end":3232,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077649,"byte_end":7077705,"line_start":3233,"line_end":3233,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [92, -9001]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077706,"byte_end":7077737,"line_start":3234,"line_end":3234,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077738,"byte_end":7077745,"line_start":3235,"line_end":3235,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077746,"byte_end":7077757,"line_start":3236,"line_end":3236,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077758,"byte_end":7077775,"line_start":3237,"line_end":3237,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":808},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078300,"byte_end":7078316,"line_start":3254,"line_end":3254,"column_start":8,"column_end":24},"name":"unpack_low_m128d","qualname":"::x86_x64::sse2::unpack_low_m128d","value":"pub fn unpack_low_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_low_m128d(a, b).to_array();\n assert_eq!(c, [92.0, 100.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077943,"byte_end":7077994,"line_start":3243,"line_end":3243,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7077995,"byte_end":7078002,"line_start":3244,"line_end":3244,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078003,"byte_end":7078026,"line_start":3245,"line_end":3245,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078027,"byte_end":7078071,"line_start":3246,"line_end":3246,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078072,"byte_end":7078117,"line_start":3247,"line_end":3247,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_low_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078118,"byte_end":7078164,"line_start":3248,"line_end":3248,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [92.0, 100.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078165,"byte_end":7078198,"line_start":3249,"line_end":3249,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078199,"byte_end":7078206,"line_start":3250,"line_end":3250,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078207,"byte_end":7078218,"line_start":3251,"line_end":3251,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078219,"byte_end":7078236,"line_start":3252,"line_end":3252,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078711,"byte_end":7078723,"line_start":3269,"line_end":3269,"column_start":8,"column_end":20},"name":"bitxor_m128d","qualname":"::x86_x64::sse2::bitxor_m128d","value":"pub fn bitxor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitxor_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078397,"byte_end":7078417,"line_start":3258,"line_end":3258,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078418,"byte_end":7078425,"line_start":3259,"line_end":3259,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078426,"byte_end":7078449,"line_start":3260,"line_end":3260,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078450,"byte_end":7078492,"line_start":3261,"line_end":3261,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078493,"byte_end":7078535,"line_start":3262,"line_end":3262,"column_start":1,"column_end":43}},{"value":"/ let c = bitxor_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078536,"byte_end":7078578,"line_start":3263,"line_end":3263,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078579,"byte_end":7078609,"line_start":3264,"line_end":3264,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078610,"byte_end":7078617,"line_start":3265,"line_end":3265,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078618,"byte_end":7078629,"line_start":3266,"line_end":3266,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078630,"byte_end":7078647,"line_start":3267,"line_end":3267,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7079113,"byte_end":7079125,"line_start":3284,"line_end":3284,"column_start":8,"column_end":20},"name":"bitxor_m128i","qualname":"::x86_x64::sse2::bitxor_m128i","value":"pub fn bitxor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitxor_m128i(a, b).into();\n assert_eq!(c, [0, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078799,"byte_end":7078819,"line_start":3273,"line_end":3273,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078820,"byte_end":7078827,"line_start":3274,"line_end":3274,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078828,"byte_end":7078851,"line_start":3275,"line_end":3275,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078852,"byte_end":7078890,"line_start":3276,"line_end":3276,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078891,"byte_end":7078929,"line_start":3277,"line_end":3277,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitxor_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078930,"byte_end":7078978,"line_start":3278,"line_end":3278,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 1, 1, 0]);","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7078979,"byte_end":7079011,"line_start":3279,"line_end":3279,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7079012,"byte_end":7079019,"line_start":3280,"line_end":3280,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7079020,"byte_end":7079031,"line_start":3281,"line_end":3281,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7079032,"byte_end":7079049,"line_start":3282,"line_end":3282,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":10563,"byte_end":10585,"line_start":238,"line_end":238,"column_start":10,"column_end":32},"name":"read_timestamp_counter","qualname":"::x86_x64::read_timestamp_counter","value":"pub fn read_timestamp_counter() -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":11430,"byte_end":11454,"line_start":258,"line_end":258,"column_start":10,"column_end":34},"name":"read_timestamp_counter_p","qualname":"::x86_x64::read_timestamp_counter_p","value":"pub fn read_timestamp_counter_p(&mut u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value and store the processor signature.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":11745,"byte_end":11758,"line_start":270,"line_end":270,"column_start":10,"column_end":23},"name":"byte_swap_i32","qualname":"::x86_x64::byte_swap_i32","value":"pub fn byte_swap_i32(i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 32-bit value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":12089,"byte_end":12102,"line_start":283,"line_end":283,"column_start":10,"column_end":23},"name":"byte_swap_i64","qualname":"::x86_x64::byte_swap_i64","value":"pub fn byte_swap_i64(i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 64-bit value.","sig":null,"attributes":[{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":12051,"byte_end":12079,"line_start":282,"line_end":282,"column_start":3,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892919,"byte_end":6892923,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892986,"byte_end":6892990,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893076,"byte_end":6893080,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893226,"byte_end":6893230,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894248,"byte_end":6894252,"line_start":72,"line_end":72,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894347,"byte_end":6894351,"line_start":79,"line_end":79,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894373,"byte_end":6894377,"line_start":81,"line_end":81,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894505,"byte_end":6894509,"line_start":89,"line_end":89,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6895107,"byte_end":6895111,"line_start":113,"line_end":113,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6895573,"byte_end":6895577,"line_start":132,"line_end":132,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6896066,"byte_end":6896070,"line_start":151,"line_end":151,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6896567,"byte_end":6896571,"line_start":170,"line_end":170,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6897032,"byte_end":6897036,"line_start":189,"line_end":189,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6897497,"byte_end":6897501,"line_start":208,"line_end":208,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6898002,"byte_end":6898006,"line_start":227,"line_end":227,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6898504,"byte_end":6898508,"line_start":246,"line_end":246,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899916,"byte_end":6899921,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899984,"byte_end":6899989,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900076,"byte_end":6900081,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900230,"byte_end":6900235,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901250,"byte_end":6901255,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901350,"byte_end":6901355,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901377,"byte_end":6901382,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901510,"byte_end":6901515,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6902115,"byte_end":6902120,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6902535,"byte_end":6902540,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6902986,"byte_end":6902991,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6903453,"byte_end":6903458,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6903873,"byte_end":6903878,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6904293,"byte_end":6904298,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6904766,"byte_end":6904771,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6905236,"byte_end":6905241,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906754,"byte_end":6906759,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906822,"byte_end":6906827,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906914,"byte_end":6906919,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6907078,"byte_end":6907083,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6907178,"byte_end":6907183,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6907205,"byte_end":6907210,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6907348,"byte_end":6907353,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6907639,"byte_end":6907644,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6907941,"byte_end":6907946,"line_start":87,"line_end":87,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6908232,"byte_end":6908237,"line_start":103,"line_end":103,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6908534,"byte_end":6908539,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6908825,"byte_end":6908830,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6909127,"byte_end":6909132,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6909418,"byte_end":6909423,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6909717,"byte_end":6909722,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6909992,"byte_end":6909997,"line_start":205,"line_end":205,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6910332,"byte_end":6910337,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6910798,"byte_end":6910803,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6911297,"byte_end":6911302,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6911756,"byte_end":6911761,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6912227,"byte_end":6912232,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6912698,"byte_end":6912703,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6913161,"byte_end":6913166,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6913621,"byte_end":6913626,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915101,"byte_end":6915105,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915168,"byte_end":6915172,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915258,"byte_end":6915262,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915408,"byte_end":6915412,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916426,"byte_end":6916430,"line_start":70,"line_end":70,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916525,"byte_end":6916529,"line_start":77,"line_end":77,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916551,"byte_end":6916555,"line_start":79,"line_end":79,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916683,"byte_end":6916687,"line_start":87,"line_end":87,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6917285,"byte_end":6917289,"line_start":111,"line_end":111,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6917771,"byte_end":6917775,"line_start":130,"line_end":130,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6918276,"byte_end":6918280,"line_start":149,"line_end":149,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6918789,"byte_end":6918793,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6919274,"byte_end":6919278,"line_start":187,"line_end":187,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6919759,"byte_end":6919763,"line_start":206,"line_end":206,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6920276,"byte_end":6920280,"line_start":225,"line_end":225,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6920790,"byte_end":6920794,"line_start":244,"line_end":244,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922213,"byte_end":6922218,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922281,"byte_end":6922286,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922373,"byte_end":6922378,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922527,"byte_end":6922532,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":345},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923547,"byte_end":6923552,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923647,"byte_end":6923652,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923674,"byte_end":6923679,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923807,"byte_end":6923812,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6924412,"byte_end":6924417,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6924832,"byte_end":6924837,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6925283,"byte_end":6925288,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6925750,"byte_end":6925755,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6926170,"byte_end":6926175,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6926590,"byte_end":6926595,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6927063,"byte_end":6927068,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6927533,"byte_end":6927538,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929051,"byte_end":6929056,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929119,"byte_end":6929124,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929211,"byte_end":6929216,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929375,"byte_end":6929380,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929475,"byte_end":6929480,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929502,"byte_end":6929507,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929645,"byte_end":6929650,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929936,"byte_end":6929941,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6930239,"byte_end":6930244,"line_start":87,"line_end":87,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6930533,"byte_end":6930538,"line_start":103,"line_end":103,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6930837,"byte_end":6930842,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6931128,"byte_end":6931133,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6931430,"byte_end":6931435,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6931721,"byte_end":6931726,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6932025,"byte_end":6932030,"line_start":189,"line_end":189,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6932315,"byte_end":6932320,"line_start":205,"line_end":205,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6932665,"byte_end":6932670,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6933143,"byte_end":6933148,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6933654,"byte_end":6933659,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6934125,"byte_end":6934130,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6934616,"byte_end":6934621,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6935107,"byte_end":6935112,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6935582,"byte_end":6935587,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6936054,"byte_end":6936059,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976133,"byte_end":6976137,"line_start":1307,"line_end":1307,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976281,"byte_end":6976285,"line_start":1315,"line_end":1315,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976396,"byte_end":6976400,"line_start":1322,"line_end":1322,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976553,"byte_end":6976557,"line_start":1330,"line_end":1330,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976670,"byte_end":6976674,"line_start":1337,"line_end":1337,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976824,"byte_end":6976828,"line_start":1345,"line_end":1345,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976941,"byte_end":6976945,"line_start":1352,"line_end":1352,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977098,"byte_end":6977102,"line_start":1360,"line_end":1360,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977213,"byte_end":6977217,"line_start":1367,"line_end":1367,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977361,"byte_end":6977365,"line_start":1375,"line_end":1375,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977473,"byte_end":6977477,"line_start":1382,"line_end":1382,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977621,"byte_end":6977625,"line_start":1390,"line_end":1390,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977733,"byte_end":6977737,"line_start":1397,"line_end":1397,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977875,"byte_end":6977879,"line_start":1406,"line_end":1406,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6978242,"byte_end":6978246,"line_start":1420,"line_end":1420,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6978390,"byte_end":6978394,"line_start":1428,"line_end":1428,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6978508,"byte_end":6978512,"line_start":1435,"line_end":1435,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7079856,"byte_end":7079861,"line_start":3301,"line_end":3301,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":812},{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080006,"byte_end":7080011,"line_start":3309,"line_end":3309,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080122,"byte_end":7080127,"line_start":3316,"line_end":3316,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080281,"byte_end":7080286,"line_start":3324,"line_end":3324,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080399,"byte_end":7080404,"line_start":3331,"line_end":3331,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080555,"byte_end":7080560,"line_start":3339,"line_end":3339,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080673,"byte_end":7080678,"line_start":3346,"line_end":3346,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080832,"byte_end":7080837,"line_start":3354,"line_end":3354,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080948,"byte_end":7080953,"line_start":3361,"line_end":3361,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7081098,"byte_end":7081103,"line_start":3369,"line_end":3369,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7081211,"byte_end":7081216,"line_start":3376,"line_end":3376,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7081361,"byte_end":7081366,"line_start":3384,"line_end":3384,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7081474,"byte_end":7081479,"line_start":3391,"line_end":3391,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":842},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7081619,"byte_end":7081624,"line_start":3400,"line_end":3400,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7081988,"byte_end":7081993,"line_start":3414,"line_end":3414,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7082138,"byte_end":7082143,"line_start":3422,"line_end":3422,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7082257,"byte_end":7082262,"line_start":3429,"line_end":3429,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7082672,"byte_end":7082677,"line_start":3442,"line_end":3442,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7082831,"byte_end":7082836,"line_start":3450,"line_end":3450,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7082949,"byte_end":7082954,"line_start":3457,"line_end":3457,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7083105,"byte_end":7083110,"line_start":3465,"line_end":3465,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7083223,"byte_end":7083228,"line_start":3472,"line_end":3472,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7083382,"byte_end":7083387,"line_start":3480,"line_end":3480,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7083498,"byte_end":7083503,"line_start":3487,"line_end":3487,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7083855,"byte_end":7083860,"line_start":3501,"line_end":3501,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7084210,"byte_end":7084215,"line_start":3512,"line_end":3512,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":7113,"byte_end":7131,"line_start":138,"line_end":138,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":82}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892919,"byte_end":6892923,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":94},"to":{"krate":4,"index":18}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6892986,"byte_end":6892990,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":94},"to":{"krate":4,"index":114}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893076,"byte_end":6893080,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":94},"to":{"krate":4,"index":183}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6893226,"byte_end":6893230,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":94},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894248,"byte_end":6894252,"line_start":72,"line_end":72,"column_start":16,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2447}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894347,"byte_end":6894351,"line_start":79,"line_end":79,"column_start":15,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2832}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894373,"byte_end":6894377,"line_start":81,"line_end":81,"column_start":18,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2800}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6894505,"byte_end":6894509,"line_start":89,"line_end":89,"column_start":25,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6895107,"byte_end":6895111,"line_start":113,"line_end":113,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":8708}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6895573,"byte_end":6895577,"line_start":132,"line_end":132,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":8715}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6896066,"byte_end":6896070,"line_start":151,"line_end":151,"column_start":17,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":8719}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6896567,"byte_end":6896571,"line_start":170,"line_end":170,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":8727}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6897032,"byte_end":6897036,"line_start":189,"line_end":189,"column_start":19,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":8729}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6897497,"byte_end":6897501,"line_start":208,"line_end":208,"column_start":19,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":8721}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6898002,"byte_end":6898006,"line_start":227,"line_end":227,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":8723}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":6898504,"byte_end":6898508,"line_start":246,"line_end":246,"column_start":16,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":8717}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899916,"byte_end":6899921,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":140},"to":{"krate":4,"index":18}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6899984,"byte_end":6899989,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":140},"to":{"krate":4,"index":114}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900076,"byte_end":6900081,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":140},"to":{"krate":4,"index":183}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6900230,"byte_end":6900235,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901250,"byte_end":6901255,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2447}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901350,"byte_end":6901355,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2832}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901377,"byte_end":6901382,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2800}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6901510,"byte_end":6901515,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6902115,"byte_end":6902120,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":8708}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6902535,"byte_end":6902540,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":8715}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6902986,"byte_end":6902991,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":8719}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6903453,"byte_end":6903458,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":8727}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6903873,"byte_end":6903878,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":8729}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6904293,"byte_end":6904298,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":8721}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6904766,"byte_end":6904771,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":8723}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":6905236,"byte_end":6905241,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":8717}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906754,"byte_end":6906759,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":186},"to":{"krate":4,"index":18}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906822,"byte_end":6906827,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":186},"to":{"krate":4,"index":114}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6906914,"byte_end":6906919,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":186},"to":{"krate":4,"index":183}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6907078,"byte_end":6907083,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2447}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6907178,"byte_end":6907183,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2832}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6907205,"byte_end":6907210,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2800}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6907348,"byte_end":6907353,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6907639,"byte_end":6907644,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6907941,"byte_end":6907946,"line_start":87,"line_end":87,"column_start":25,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6908232,"byte_end":6908237,"line_start":103,"line_end":103,"column_start":25,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6908534,"byte_end":6908539,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6908825,"byte_end":6908830,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6909127,"byte_end":6909132,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6909418,"byte_end":6909423,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6909717,"byte_end":6909722,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6909992,"byte_end":6909997,"line_start":205,"line_end":205,"column_start":21,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6910332,"byte_end":6910337,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":8708}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6910798,"byte_end":6910803,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":8715}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6911297,"byte_end":6911302,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":8719}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6911756,"byte_end":6911761,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":8727}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6912227,"byte_end":6912232,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":8729}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6912698,"byte_end":6912703,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":8721}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6913161,"byte_end":6913166,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":8723}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":6913621,"byte_end":6913626,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":8717}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915101,"byte_end":6915105,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":288},"to":{"krate":4,"index":18}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915168,"byte_end":6915172,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":288},"to":{"krate":4,"index":114}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915258,"byte_end":6915262,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":288},"to":{"krate":4,"index":183}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6915408,"byte_end":6915412,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916426,"byte_end":6916430,"line_start":70,"line_end":70,"column_start":16,"column_end":20},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":2447}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916525,"byte_end":6916529,"line_start":77,"line_end":77,"column_start":15,"column_end":19},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":2832}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916551,"byte_end":6916555,"line_start":79,"line_end":79,"column_start":18,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":2800}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6916683,"byte_end":6916687,"line_start":87,"line_end":87,"column_start":25,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6917285,"byte_end":6917289,"line_start":111,"line_end":111,"column_start":16,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":8708}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6917771,"byte_end":6917775,"line_start":130,"line_end":130,"column_start":18,"column_end":22},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":8715}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6918276,"byte_end":6918280,"line_start":149,"line_end":149,"column_start":17,"column_end":21},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":8719}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6918789,"byte_end":6918793,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":8727}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6919274,"byte_end":6919278,"line_start":187,"line_end":187,"column_start":19,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":8729}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6919759,"byte_end":6919763,"line_start":206,"line_end":206,"column_start":19,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":8721}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6920276,"byte_end":6920280,"line_start":225,"line_end":225,"column_start":19,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":8723}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":6920790,"byte_end":6920794,"line_start":244,"line_end":244,"column_start":16,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":8717}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922213,"byte_end":6922218,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":334},"to":{"krate":4,"index":18}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922281,"byte_end":6922286,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":334},"to":{"krate":4,"index":114}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922373,"byte_end":6922378,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":334},"to":{"krate":4,"index":183}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6922527,"byte_end":6922532,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923547,"byte_end":6923552,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":2447}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923647,"byte_end":6923652,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":2832}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923674,"byte_end":6923679,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":2800}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6923807,"byte_end":6923812,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6924412,"byte_end":6924417,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":8708}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6924832,"byte_end":6924837,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":8715}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6925283,"byte_end":6925288,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":8719}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6925750,"byte_end":6925755,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":8727}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6926170,"byte_end":6926175,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":8729}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6926590,"byte_end":6926595,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":8721}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6927063,"byte_end":6927068,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":8723}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":6927533,"byte_end":6927538,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":8717}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929051,"byte_end":6929056,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":380},"to":{"krate":4,"index":18}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929119,"byte_end":6929124,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":380},"to":{"krate":4,"index":114}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929211,"byte_end":6929216,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":380},"to":{"krate":4,"index":183}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929375,"byte_end":6929380,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2447}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929475,"byte_end":6929480,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2832}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929502,"byte_end":6929507,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2800}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929645,"byte_end":6929650,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6929936,"byte_end":6929941,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6930239,"byte_end":6930244,"line_start":87,"line_end":87,"column_start":26,"column_end":31},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6930533,"byte_end":6930538,"line_start":103,"line_end":103,"column_start":26,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6930837,"byte_end":6930842,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6931128,"byte_end":6931133,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6931430,"byte_end":6931435,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6931721,"byte_end":6931726,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6932025,"byte_end":6932030,"line_start":189,"line_end":189,"column_start":26,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6932315,"byte_end":6932320,"line_start":205,"line_end":205,"column_start":26,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6932665,"byte_end":6932670,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":8708}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6933143,"byte_end":6933148,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":8715}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6933654,"byte_end":6933659,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":8719}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6934125,"byte_end":6934130,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":8727}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6934616,"byte_end":6934621,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":8729}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6935107,"byte_end":6935112,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":8721}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6935582,"byte_end":6935587,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":8723}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":6936054,"byte_end":6936059,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":8717}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976133,"byte_end":6976137,"line_start":1307,"line_end":1307,"column_start":14,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2889}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976281,"byte_end":6976285,"line_start":1315,"line_end":1315,"column_start":20,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2920}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976396,"byte_end":6976400,"line_start":1322,"line_end":1322,"column_start":17,"column_end":21},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2945}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976553,"byte_end":6976557,"line_start":1330,"line_end":1330,"column_start":23,"column_end":27},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2972}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976670,"byte_end":6976674,"line_start":1337,"line_end":1337,"column_start":16,"column_end":20},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2950}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976824,"byte_end":6976828,"line_start":1345,"line_end":1345,"column_start":22,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2976}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6976941,"byte_end":6976945,"line_start":1352,"line_end":1352,"column_start":17,"column_end":21},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2955}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977098,"byte_end":6977102,"line_start":1360,"line_end":1360,"column_start":23,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2980}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977213,"byte_end":6977217,"line_start":1367,"line_end":1367,"column_start":14,"column_end":18},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2904}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977361,"byte_end":6977365,"line_start":1375,"line_end":1375,"column_start":20,"column_end":24},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2932}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977473,"byte_end":6977477,"line_start":1382,"line_end":1382,"column_start":14,"column_end":18},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2899}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977621,"byte_end":6977625,"line_start":1390,"line_end":1390,"column_start":20,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2928}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977733,"byte_end":6977737,"line_start":1397,"line_end":1397,"column_start":14,"column_end":18},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2916}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6977875,"byte_end":6977879,"line_start":1406,"line_end":1406,"column_start":14,"column_end":18},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2941}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6978242,"byte_end":6978246,"line_start":1420,"line_end":1420,"column_start":14,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2894}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6978390,"byte_end":6978394,"line_start":1428,"line_end":1428,"column_start":20,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2924}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":6978508,"byte_end":6978512,"line_start":1435,"line_end":1435,"column_start":20,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2477}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7079856,"byte_end":7079861,"line_start":3301,"line_end":3301,"column_start":14,"column_end":19},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2889}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080006,"byte_end":7080011,"line_start":3309,"line_end":3309,"column_start":20,"column_end":25},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2920}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080122,"byte_end":7080127,"line_start":3316,"line_end":3316,"column_start":17,"column_end":22},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2945}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080281,"byte_end":7080286,"line_start":3324,"line_end":3324,"column_start":23,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2972}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080399,"byte_end":7080404,"line_start":3331,"line_end":3331,"column_start":16,"column_end":21},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2950}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080555,"byte_end":7080560,"line_start":3339,"line_end":3339,"column_start":22,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2976}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080673,"byte_end":7080678,"line_start":3346,"line_end":3346,"column_start":17,"column_end":22},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2955}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080832,"byte_end":7080837,"line_start":3354,"line_end":3354,"column_start":23,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2980}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7080948,"byte_end":7080953,"line_start":3361,"line_end":3361,"column_start":14,"column_end":19},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2904}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7081098,"byte_end":7081103,"line_start":3369,"line_end":3369,"column_start":20,"column_end":25},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2932}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7081211,"byte_end":7081216,"line_start":3376,"line_end":3376,"column_start":14,"column_end":19},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2899}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7081361,"byte_end":7081366,"line_start":3384,"line_end":3384,"column_start":20,"column_end":25},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2928}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7081474,"byte_end":7081479,"line_start":3391,"line_end":3391,"column_start":14,"column_end":19},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2916}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7081619,"byte_end":7081624,"line_start":3400,"line_end":3400,"column_start":14,"column_end":19},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2941}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7081988,"byte_end":7081993,"line_start":3414,"line_end":3414,"column_start":14,"column_end":19},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2894}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7082138,"byte_end":7082143,"line_start":3422,"line_end":3422,"column_start":20,"column_end":25},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2924}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7082257,"byte_end":7082262,"line_start":3429,"line_end":3429,"column_start":20,"column_end":25},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2477}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7082672,"byte_end":7082677,"line_start":3442,"line_end":3442,"column_start":17,"column_end":22},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2945}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7082831,"byte_end":7082836,"line_start":3450,"line_end":3450,"column_start":23,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2972}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7082949,"byte_end":7082954,"line_start":3457,"line_end":3457,"column_start":16,"column_end":21},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2950}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7083105,"byte_end":7083110,"line_start":3465,"line_end":3465,"column_start":22,"column_end":27},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2976}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7083223,"byte_end":7083228,"line_start":3472,"line_end":3472,"column_start":17,"column_end":22},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2955}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7083382,"byte_end":7083387,"line_start":3480,"line_end":3480,"column_start":23,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2980}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7083498,"byte_end":7083503,"line_start":3487,"line_end":3487,"column_start":14,"column_end":19},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2941}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7083855,"byte_end":7083860,"line_start":3501,"line_end":3501,"column_start":20,"column_end":25},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2477}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":7084210,"byte_end":7084215,"line_start":3512,"line_end":3512,"column_start":13,"column_end":18},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2482}}]}