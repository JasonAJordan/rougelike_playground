{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5","program":"C:\\Users\\Jason\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","ultraviolet","--edition=2018","C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=5d0269817d3f526e","-C","extra-filename=-5d0269817d3f526e","--out-dir","c:\\Users\\Jason\\Desktop\\codingall\\rust\\games\\rougelike_playground\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Jason\\Desktop\\codingall\\rust\\games\\rougelike_playground\\target\\rls\\debug\\deps","--extern","wide=c:\\Users\\Jason\\Desktop\\codingall\\rust\\games\\rougelike_playground\\target\\rls\\debug\\deps\\libwide-7d21c9ec2cdfdb2e.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Jason\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Jason\\Desktop\\codingall\\rust\\games\\rougelike_playground\\target\\rls\\debug\\deps\\libultraviolet-5d0269817d3f526e.rmeta"},"prelude":{"crate_id":{"name":"ultraviolet","disambiguator":[4401490609233146893,7782782102625072659]},"crate_root":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src","external_crates":[{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[3363949849689723475,17369360418877894296]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[3747384843019373223,13759942304014052535]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11478482899240340583,17122159790357076854]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11061011275580665867,9276968084265305739]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7114388531242619052,4066821940473693856]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[4334566463604478648,2723111479263688995]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17667198077615336603,6344526255197668589]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15696432714701482152,16902757851256734107]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1659229678336314589,8479756127813614445]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8130323418187167188,4636797448496712652]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[1920759351681616324,7198269701569904579]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[17999657139147790221,14614305851743788429]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":13,"id":{"name":"wide","disambiguator":[5560105794162920476,3443263230623653203]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":14,"id":{"name":"safe_arch","disambiguator":[14959983281459712726,400813391343494186]}},{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","num":15,"id":{"name":"bytemuck","disambiguator":[3759513641402560042,7121816604344875063]}}],"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":0,"byte_end":6346,"line_start":1,"line_end":132,"column_start":1,"column_end":30}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":102805,"byte_end":102806,"line_start":14,"line_end":14,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":50}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\mod.rs","byte_start":204218,"byte_end":204219,"line_start":6,"line_end":6,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Vec2x4, Vec2x8, Vec2","parent":{"krate":0,"index":127}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\mod.rs","byte_start":204235,"byte_end":204236,"line_start":7,"line_end":7,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Vec3x8, Vec3x4, Vec3","parent":{"krate":0,"index":127}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\mod.rs","byte_start":204252,"byte_end":204253,"line_start":8,"line_end":8,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Vec4, Vec4x4, Vec4x8","parent":{"krate":0,"index":127}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":5985,"byte_end":5986,"line_start":113,"line_end":113,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"Bivec2, Bivec3x4, Bivec2x8, Bivec3x8, Bivec2x4, Bivec3","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6044,"byte_end":6045,"line_start":116,"line_end":116,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6060,"byte_end":6061,"line_start":117,"line_end":117,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Mat4x8, Mat2x8, Mat3, Mat4, Mat3x8, Mat2x4, Mat4x4, Mat3x4, Mat2","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6078,"byte_end":6079,"line_start":118,"line_end":118,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"Rotor2, Rotor3x4, Rotor2x8, Rotor2x4, Rotor3, Rotor3x8","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6100,"byte_end":6101,"line_start":119,"line_end":119,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Isometry3, Isometry3x4, Isometry3x8","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6116,"byte_end":6117,"line_start":120,"line_end":120,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Vec3, Vec4, Vec2x4, Vec3x8, Vec4x4, Vec2x8, Vec4x8, Vec3x4, Vec2","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":13,"index":1024},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6156,"byte_end":6161,"line_start":124,"line_end":124,"column_start":15,"column_end":20},"alias_span":null,"name":"f32x4","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":13,"index":918},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6177,"byte_end":6182,"line_start":125,"line_end":125,"column_start":15,"column_end":20},"alias_span":null,"name":"f32x8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":13,"index":1301},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6198,"byte_end":6203,"line_start":126,"line_end":126,"column_start":15,"column_end":20},"alias_span":null,"name":"f64x2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":13,"index":1126},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6219,"byte_end":6224,"line_start":127,"line_end":127,"column_start":15,"column_end":20},"alias_span":null,"name":"f64x4","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":13,"index":1024},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6241,"byte_end":6246,"line_start":129,"line_end":129,"column_start":15,"column_end":20},"alias_span":null,"name":"m32x4","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":13,"index":918},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6271,"byte_end":6276,"line_start":130,"line_end":130,"column_start":15,"column_end":20},"alias_span":null,"name":"m32x8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":13,"index":1301},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6301,"byte_end":6306,"line_start":131,"line_end":131,"column_start":15,"column_end":20},"alias_span":null,"name":"m64x2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":13,"index":1126},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":6331,"byte_end":6336,"line_start":132,"line_end":132,"column_start":15,"column_end":20},"alias_span":null,"name":"m64x4","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":0,"byte_end":6346,"line_start":1,"line_end":132,"column_start":1,"column_end":30},"name":"","qualname":"::","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":30},{"krate":0,"index":42},{"krate":0,"index":50},{"krate":0,"index":116},{"krate":0,"index":122},{"krate":0,"index":127},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":245},{"krate":0,"index":248}],"decl_id":null,"docs":" # `ultraviolet`","sig":null,"attributes":[{"value":"/ # `ultraviolet`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":0,"byte_end":19,"line_start":1,"line_end":1,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":20,"byte_end":23,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This is a crate to computer-graphics and games-related linear and geometric algebra, but *fast*, both in terms","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":24,"byte_end":138,"line_start":3,"line_end":3,"column_start":1,"column_end":115}},{"value":"/ of productivity and in terms of runtime performance.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":139,"byte_end":195,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":196,"byte_end":199,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ In terms of productivity, ultraviolet uses no generics and is designed to be as straightforward","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":200,"byte_end":299,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ of an interface as possible, resulting in fast compilation times and clear code. In addition, the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":300,"byte_end":401,"line_start":7,"line_end":7,"column_start":1,"column_end":102}},{"value":"/ lack of generics and Rust type-system \"hacks\" result in clear and concise errors that are easy to","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":402,"byte_end":503,"line_start":8,"line_end":8,"column_start":1,"column_end":102}},{"value":"/ parse and fix for the user.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":504,"byte_end":535,"line_start":9,"line_end":9,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":536,"byte_end":539,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ In terms of runtime performance, ultraviolet was designed from the start with performance in mind.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":540,"byte_end":642,"line_start":11,"line_end":11,"column_start":1,"column_end":103}},{"value":"/ To do so, we provide two separate kinds of each type, each with nearly identical functionality,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":643,"byte_end":742,"line_start":12,"line_end":12,"column_start":1,"column_end":100}},{"value":"/ one with usual scalar f32 values, and the other a 'wide' type which uses SIMD f32x4 vectors for","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":743,"byte_end":842,"line_start":13,"line_end":13,"column_start":1,"column_end":100}},{"value":"/ each value. This design is clear and explicit in intent, and it also allows code to","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":843,"byte_end":930,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/ take full advantage of SIMD.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":931,"byte_end":963,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":964,"byte_end":967,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The 'wide' types use an \"SoA\" (Structure of Arrays) architecture","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":968,"byte_end":1036,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ such that each wide data structure actually contains the data for 4 or 8 of its associated data type and will do any operation","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1037,"byte_end":1167,"line_start":18,"line_end":18,"column_start":1,"column_end":131}},{"value":"/ on all of the simd 'lanes' at the same time. For example, a `Vec3x8` is equivalent to 8 `Vec3`s all bundled together into one","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1168,"byte_end":1297,"line_start":19,"line_end":19,"column_start":1,"column_end":130}},{"value":"/ data structure.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1298,"byte_end":1317,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1318,"byte_end":1321,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Doing this is potentially *much* (factor of 10) faster than an standard \"AoS\" (Array of Structs) layout,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1322,"byte_end":1430,"line_start":22,"line_end":22,"column_start":1,"column_end":109}},{"value":"/ though it does depend on your workload and algorithm requirements. Algorithms must be carefully architected to take full advantage","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1431,"byte_end":1565,"line_start":23,"line_end":23,"column_start":1,"column_end":135}},{"value":"/ of this, and doing so can be easier said than done, especially if your algorithm involves significant branching.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1566,"byte_end":1682,"line_start":24,"line_end":24,"column_start":1,"column_end":117}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1683,"byte_end":1686,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ `ultraviolet` was the first Rust math library to be designed in this \"AoSoA\" manner, though","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1687,"byte_end":1782,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ `nalgebra` now supports it for several of their data structures as well.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1783,"byte_end":1859,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1860,"byte_end":1863,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ## Benchmarks","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1864,"byte_end":1881,"line_start":29,"line_end":29,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1882,"byte_end":1885,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ See [`mathbench-rs`](https://github.com/bitshifter/mathbench-rs) for latest benchmarks.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1886,"byte_end":1977,"line_start":31,"line_end":31,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1978,"byte_end":1981,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ## Cargo Features","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":1982,"byte_end":2003,"line_start":33,"line_end":33,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2004,"byte_end":2007,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ To help further improve build times, `ultraviolet` puts various functionality under feature flags. For example, the 2d and 3d projective geometric algebras","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2008,"byte_end":2167,"line_start":35,"line_end":35,"column_start":1,"column_end":160}},{"value":"/ as well as f64 and integer types are disabled by default. In order to enable them, enable the corresponding crate feature flags in your `Cargo.toml`. For example:","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2168,"byte_end":2334,"line_start":36,"line_end":36,"column_start":1,"column_end":167}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2335,"byte_end":2338,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2339,"byte_end":2350,"line_start":38,"line_end":38,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2351,"byte_end":2369,"line_start":39,"line_end":39,"column_start":1,"column_end":19}},{"value":"/ ultraviolet = { version = \"0.6\", features = [ \"f64\", \"int\" ] }","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2370,"byte_end":2436,"line_start":40,"line_end":40,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2437,"byte_end":2444,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2445,"byte_end":2448,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Will enable the `f64` and `int` features. Here's a list of the available features:","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2449,"byte_end":2535,"line_start":43,"line_end":43,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2536,"byte_end":2539,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ * `f64` - Enable f64 bit wide floating point support. Naming convention is `D[Type]`, such as `DVec3x4` would be a collection of 4 3d vectors with f64 precision each.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2540,"byte_end":2710,"line_start":45,"line_end":45,"column_start":1,"column_end":171}},{"value":"/ * `int` - Enable integer vector types.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2711,"byte_end":2753,"line_start":46,"line_end":46,"column_start":1,"column_end":43}},{"value":"/ * `serde` - Enable Serialize and Deserialize implementations for many scalar types.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2754,"byte_end":2841,"line_start":47,"line_end":47,"column_start":1,"column_end":88}},{"value":"/ * `mint` - Enable interoperation with other math libraries through the `mint` interface","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2842,"byte_end":2933,"line_start":48,"line_end":48,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2934,"byte_end":2937,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ## Crate Features","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2938,"byte_end":2959,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2960,"byte_end":2963,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This crate is currently being dogfooded in my ray tracer [`rayn`](https://github.com/termhn/rayn),","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":2964,"byte_end":3066,"line_start":52,"line_end":52,"column_start":1,"column_end":103}},{"value":"/ and is being used by various independent Rust game developers for various projects.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":3067,"byte_end":3154,"line_start":53,"line_end":53,"column_start":1,"column_end":88}},{"value":"/ It does what those users have currently needed it to do.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":3155,"byte_end":3215,"line_start":54,"line_end":54,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":3216,"byte_end":3219,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ There are a couple relatively unique/novel features in this library, the most important being the use of the Geometric Algebra.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":3220,"byte_end":3351,"line_start":56,"line_end":56,"column_start":1,"column_end":132}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":3352,"byte_end":3355,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Instead of implementing complex number algebra (for 2d rotations) and Quaternion algebra (for 3d rotations), we use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":3356,"byte_end":3475,"line_start":58,"line_end":58,"column_start":1,"column_end":120}},{"value":"/ Rotors, a concept taken from Geometric Algebra, to represent 2d and 3d rotations.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":3476,"byte_end":3561,"line_start":59,"line_end":59,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":3562,"byte_end":3565,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ What this means for the programmer is that you will be using the `Rotor3` type in place of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":3566,"byte_end":3660,"line_start":61,"line_end":61,"column_start":1,"column_end":95}},{"value":"/ a Quaternion, though you can expect it to do basically all the same things that a Quaternion does. In fact, Quaternions","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":3661,"byte_end":3784,"line_start":62,"line_end":62,"column_start":1,"column_end":124}},{"value":"/ are directly isomorphic to Rotors (meaning they are in essense the same thing, just formulated differently). The reason this decision was made was twofold:","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":3785,"byte_end":3944,"line_start":63,"line_end":63,"column_start":1,"column_end":160}},{"value":"/ first, the derivation of the math is actually quite simple to understand. All the derivations for the code implemented in the Rotor structs in this","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":3945,"byte_end":4096,"line_start":64,"line_end":64,"column_start":1,"column_end":152}},{"value":"/ library are written out in the `derivations` folder of the GitHub repo; I derived them manually as part of the implementation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":4097,"byte_end":4227,"line_start":65,"line_end":65,"column_start":1,"column_end":131}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":4228,"byte_end":4231,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ On the other hand, Quaternions are often basically just seen as black boxes that we programmers use to do rotations because","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":4232,"byte_end":4359,"line_start":67,"line_end":67,"column_start":1,"column_end":128}},{"value":"/ they have some nice properties, but that we don't really understand. You can use Rotors this same way, but you can also easily","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":4360,"byte_end":4490,"line_start":68,"line_end":68,"column_start":1,"column_end":131}},{"value":"/ understand them. Second is that in some sense they can be seen as 'more correct' than Quaternions. Specifically, they","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":4491,"byte_end":4612,"line_start":69,"line_end":69,"column_start":1,"column_end":122}},{"value":"/ facilitate a more proper understanding of rotation as being something that occurs *within a plane* rather than something","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":4613,"byte_end":4737,"line_start":70,"line_end":70,"column_start":1,"column_end":125}},{"value":"/ that occurs *around an axis*, as it is generally thought. Finally, Rotors also generalize to 4 and even higher dimensions,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":4738,"byte_end":4864,"line_start":71,"line_end":71,"column_start":1,"column_end":127}},{"value":"/ and if someone wants to they could implement a Rotor4 which retains all the properties of a Rotor3/Quaternion but does rotation","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":4865,"byte_end":4996,"line_start":72,"line_end":72,"column_start":1,"column_end":132}},{"value":"/ in 4 dimensions instead, something which simply is not possible to do with Quaternions.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":4997,"byte_end":5088,"line_start":73,"line_end":73,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":5089,"byte_end":5092,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ If it's missing something you need it to do, bug me on the [GitHub issue tracker](https://github.com/termhn/ultraviolet/issues) and/or Rust community discord server","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":5093,"byte_end":5261,"line_start":75,"line_end":75,"column_start":1,"column_end":169}},{"value":"/ (I'm Fusha there) and I'll try to add it for you, if I believe it fits with the vision of the lib :)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":5262,"byte_end":5366,"line_start":76,"line_end":76,"column_start":1,"column_end":105}}]},{"kind":"Mod","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bivec","qualname":"::bivec","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":421},{"krate":0,"index":432},{"krate":0,"index":431},{"krate":0,"index":429},{"krate":0,"index":427},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":259},{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":434},{"krate":0,"index":445},{"krate":0,"index":444},{"krate":0,"index":442},{"krate":0,"index":440},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":313},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":341},{"krate":0,"index":344},{"krate":0,"index":347},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":447},{"krate":0,"index":458},{"krate":0,"index":457},{"krate":0,"index":455},{"krate":0,"index":453},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":367},{"krate":0,"index":383},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":411},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":631},{"krate":0,"index":644},{"krate":0,"index":643},{"krate":0,"index":641},{"krate":0,"index":639},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":481},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":507},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":646},{"krate":0,"index":659},{"krate":0,"index":658},{"krate":0,"index":656},{"krate":0,"index":654},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":559},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":661},{"krate":0,"index":674},{"krate":0,"index":673},{"krate":0,"index":671},{"krate":0,"index":669},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":595},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628}],"decl_id":null,"docs":" Bivectors, i.e. oriented areas.","sig":null,"attributes":[{"value":"/ Bivectors, i.e. oriented areas.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":7957,"byte_end":7992,"line_start":1,"line_end":1,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":7993,"byte_end":7996,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A bivector is an *oriented area*, and is equivalent","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":7997,"byte_end":8052,"line_start":3,"line_end":3,"column_start":1,"column_end":56}},{"value":"/ to the result of the exterior (wedge) product of two vectors, i.e.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8053,"byte_end":8123,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/ `u ∧ v`. This means it is the *oriented area* of the parallelogram","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8124,"byte_end":8196,"line_start":5,"line_end":5,"column_start":1,"column_end":71}},{"value":"/ created by attaching two vectors and then extending them into a parallelogram.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8197,"byte_end":8279,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8280,"byte_end":8283,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This may be hard to visualize at first, but bivectors are as fundamental as vectors. If vectors","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8284,"byte_end":8383,"line_start":8,"line_end":8,"column_start":1,"column_end":100}},{"value":"/ are a representation of *lines*, then bivectors are a representation of *planes*.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8384,"byte_end":8469,"line_start":9,"line_end":9,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8470,"byte_end":8473,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ A normalized bivector can be thought of as representing a plane of rotation and the *direction of rotation*","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8474,"byte_end":8585,"line_start":11,"line_end":11,"column_start":1,"column_end":112}},{"value":"/ inside that plane such that a *positive* rotation follows the orientation of the bivector. When","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8586,"byte_end":8685,"line_start":12,"line_end":12,"column_start":1,"column_end":100}},{"value":"/ you obtain a bivector by taking the exterior product of two vectors, the positive direction of rotation","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8686,"byte_end":8793,"line_start":13,"line_end":13,"column_start":1,"column_end":108}},{"value":"/ is defined as the one that *brings the first vector closer to the second*. For example, a bivector","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8794,"byte_end":8896,"line_start":14,"line_end":14,"column_start":1,"column_end":103}},{"value":"/ created by taking the exterior product `x ∧ y` of the x and y basis vectors will create a unit","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8897,"byte_end":8997,"line_start":15,"line_end":15,"column_start":1,"column_end":99}},{"value":"/ bivector that represents the xy plane, with orientation such that a positive rotation of `x` inside","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":8998,"byte_end":9101,"line_start":16,"line_end":16,"column_start":1,"column_end":104}},{"value":"/ the plane would bring `x` closer to `y`. This is why positive rotation is generally defined as","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9102,"byte_end":9200,"line_start":17,"line_end":17,"column_start":1,"column_end":99}},{"value":"/ \"counter clockwise\" in 2d, since such a rotation brings `x` to `y`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9201,"byte_end":9272,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9273,"byte_end":9276,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Much like vectors can be represented as a linear combination of *basis vectors*, i.e.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9277,"byte_end":9366,"line_start":20,"line_end":20,"column_start":1,"column_end":90}},{"value":"/ a vector \"component representation,\" bivectors can be represented as a linear combination","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9367,"byte_end":9460,"line_start":21,"line_end":21,"column_start":1,"column_end":94}},{"value":"/ of *basis bivectors*. If the basis vectors are the unit vectors in the direction of each","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9461,"byte_end":9553,"line_start":22,"line_end":22,"column_start":1,"column_end":93}},{"value":"/ canonical axis of a space, then the basis bivectors are the *unit area planes* in each of the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9554,"byte_end":9651,"line_start":23,"line_end":23,"column_start":1,"column_end":98}},{"value":"/ canonical planes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9652,"byte_end":9673,"line_start":24,"line_end":24,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9674,"byte_end":9677,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ In 2d, there is only one basis plane, the xy plane, which represents all of 2d space. As such, in 2d","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9678,"byte_end":9782,"line_start":26,"line_end":26,"column_start":1,"column_end":105}},{"value":"/ there is only *one* basis bivector, while there are *two* basis vectors. This means that a 2d bivector","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9783,"byte_end":9889,"line_start":27,"line_end":27,"column_start":1,"column_end":107}},{"value":"/ has only one component.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9890,"byte_end":9917,"line_start":28,"line_end":28,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9918,"byte_end":9921,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ In 3d, there are three basis planes, the xy plane, the xz plane, and the yz plane, which are respectively","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":9922,"byte_end":10031,"line_start":30,"line_end":30,"column_start":1,"column_end":110}},{"value":"/ the planes parallel to those combinations of the x, y, and z basis vectors. Therefore, a 3d bivector has","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10032,"byte_end":10140,"line_start":31,"line_end":31,"column_start":1,"column_end":109}},{"value":"/ three components, each of which represents the *projected area* of that bivector onto one of the three","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10141,"byte_end":10247,"line_start":32,"line_end":32,"column_start":1,"column_end":107}},{"value":"/ basis bivectors. This is analogous to how vector components represent the *projected length* of that vector","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10248,"byte_end":10359,"line_start":33,"line_end":33,"column_start":1,"column_end":112}},{"value":"/ onto each unit vector.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10360,"byte_end":10386,"line_start":34,"line_end":34,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":26379,"byte_end":26385,"line_start":583,"line_end":583,"column_start":6,"column_end":12},"name":"Bivec2","qualname":"::bivec::Bivec2","value":"Bivec2 { xy }","parent":null,"children":[{"krate":0,"index":422}],"decl_id":null,"docs":" A bivector in 2d space.","sig":null,"attributes":[{"value":"/ A bivector in 2d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10523,"byte_end":10550,"line_start":44,"line_end":44,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10559,"byte_end":10562,"line_start":45,"line_end":45,"column_start":9,"column_end":12}},{"value":"/ Since in 2d there is only one plane in the whole of 2d space, a 2d bivector","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10571,"byte_end":10650,"line_start":46,"line_end":46,"column_start":9,"column_end":88}},{"value":"/ has only one component.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10659,"byte_end":10686,"line_start":47,"line_end":47,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10695,"byte_end":10698,"line_start":48,"line_end":48,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on bivectors generally!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10707,"byte_end":10797,"line_start":49,"line_end":49,"column_start":9,"column_end":99}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10864,"byte_end":10874,"line_start":51,"line_end":51,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":26400,"byte_end":26408,"line_start":584,"line_end":584,"column_start":6,"column_end":14},"name":"Bivec2x4","qualname":"::bivec::Bivec2x4","value":"Bivec2x4 { xy }","parent":null,"children":[{"krate":0,"index":435}],"decl_id":null,"docs":" A bivector in 2d space.","sig":null,"attributes":[{"value":"/ A bivector in 2d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10523,"byte_end":10550,"line_start":44,"line_end":44,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10559,"byte_end":10562,"line_start":45,"line_end":45,"column_start":9,"column_end":12}},{"value":"/ Since in 2d there is only one plane in the whole of 2d space, a 2d bivector","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10571,"byte_end":10650,"line_start":46,"line_end":46,"column_start":9,"column_end":88}},{"value":"/ has only one component.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10659,"byte_end":10686,"line_start":47,"line_end":47,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10695,"byte_end":10698,"line_start":48,"line_end":48,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on bivectors generally!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10707,"byte_end":10797,"line_start":49,"line_end":49,"column_start":9,"column_end":99}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10864,"byte_end":10874,"line_start":51,"line_end":51,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":26425,"byte_end":26433,"line_start":585,"line_end":585,"column_start":6,"column_end":14},"name":"Bivec2x8","qualname":"::bivec::Bivec2x8","value":"Bivec2x8 { xy }","parent":null,"children":[{"krate":0,"index":448}],"decl_id":null,"docs":" A bivector in 2d space.","sig":null,"attributes":[{"value":"/ A bivector in 2d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10523,"byte_end":10550,"line_start":44,"line_end":44,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10559,"byte_end":10562,"line_start":45,"line_end":45,"column_start":9,"column_end":12}},{"value":"/ Since in 2d there is only one plane in the whole of 2d space, a 2d bivector","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10571,"byte_end":10650,"line_start":46,"line_end":46,"column_start":9,"column_end":88}},{"value":"/ has only one component.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10659,"byte_end":10686,"line_start":47,"line_end":47,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10695,"byte_end":10698,"line_start":48,"line_end":48,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on bivectors generally!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10707,"byte_end":10797,"line_start":49,"line_end":49,"column_start":9,"column_end":99}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":10864,"byte_end":10874,"line_start":51,"line_end":51,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":26573,"byte_end":26579,"line_start":596,"line_end":596,"column_start":5,"column_end":11},"name":"Bivec3","qualname":"::bivec::Bivec3","value":"Bivec3 { xy, xz, yz }","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634}],"decl_id":null,"docs":" A bivector in 3d space.","sig":null,"attributes":[{"value":"/ A bivector in 3d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17564,"byte_end":17591,"line_start":295,"line_end":295,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17600,"byte_end":17603,"line_start":296,"line_end":296,"column_start":9,"column_end":12}},{"value":"/ In 3d, a bivector has 3 components, each one representing the signed *projected area* of the bivector","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17612,"byte_end":17717,"line_start":297,"line_end":297,"column_start":9,"column_end":114}},{"value":"/ onto one of the 3 *basis bivectors*, which can be thought of as corresponding to each of the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17726,"byte_end":17822,"line_start":298,"line_end":298,"column_start":9,"column_end":105}},{"value":"/ three basis planes. This is analogous to the components of a 3d vector, which correspond to the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17831,"byte_end":17930,"line_start":299,"line_end":299,"column_start":9,"column_end":108}},{"value":"/ *projected length* of the vector onto the three basis *vectors. Since in 3d, there are three","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17939,"byte_end":18035,"line_start":300,"line_end":300,"column_start":9,"column_end":105}},{"value":"/ components for both vectors and bivectors, 3d bivectors have been historically confused with","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18044,"byte_end":18140,"line_start":301,"line_end":301,"column_start":9,"column_end":105}},{"value":"/ 3d vectors quite a lot.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18149,"byte_end":18176,"line_start":302,"line_end":302,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18185,"byte_end":18188,"line_start":303,"line_end":303,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on bivectors generally!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18197,"byte_end":18287,"line_start":304,"line_end":304,"column_start":9,"column_end":99}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18354,"byte_end":18364,"line_start":306,"line_end":306,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":26600,"byte_end":26608,"line_start":597,"line_end":597,"column_start":5,"column_end":13},"name":"Bivec3x4","qualname":"::bivec::Bivec3x4","value":"Bivec3x4 { xy, xz, yz }","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649}],"decl_id":null,"docs":" A bivector in 3d space.","sig":null,"attributes":[{"value":"/ A bivector in 3d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17564,"byte_end":17591,"line_start":295,"line_end":295,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17600,"byte_end":17603,"line_start":296,"line_end":296,"column_start":9,"column_end":12}},{"value":"/ In 3d, a bivector has 3 components, each one representing the signed *projected area* of the bivector","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17612,"byte_end":17717,"line_start":297,"line_end":297,"column_start":9,"column_end":114}},{"value":"/ onto one of the 3 *basis bivectors*, which can be thought of as corresponding to each of the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17726,"byte_end":17822,"line_start":298,"line_end":298,"column_start":9,"column_end":105}},{"value":"/ three basis planes. This is analogous to the components of a 3d vector, which correspond to the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17831,"byte_end":17930,"line_start":299,"line_end":299,"column_start":9,"column_end":108}},{"value":"/ *projected length* of the vector onto the three basis *vectors. Since in 3d, there are three","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17939,"byte_end":18035,"line_start":300,"line_end":300,"column_start":9,"column_end":105}},{"value":"/ components for both vectors and bivectors, 3d bivectors have been historically confused with","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18044,"byte_end":18140,"line_start":301,"line_end":301,"column_start":9,"column_end":105}},{"value":"/ 3d vectors quite a lot.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18149,"byte_end":18176,"line_start":302,"line_end":302,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18185,"byte_end":18188,"line_start":303,"line_end":303,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on bivectors generally!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18197,"byte_end":18287,"line_start":304,"line_end":304,"column_start":9,"column_end":99}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18354,"byte_end":18364,"line_start":306,"line_end":306,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":26633,"byte_end":26641,"line_start":598,"line_end":598,"column_start":5,"column_end":13},"name":"Bivec3x8","qualname":"::bivec::Bivec3x8","value":"Bivec3x8 { xy, xz, yz }","parent":null,"children":[{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664}],"decl_id":null,"docs":" A bivector in 3d space.","sig":null,"attributes":[{"value":"/ A bivector in 3d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17564,"byte_end":17591,"line_start":295,"line_end":295,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17600,"byte_end":17603,"line_start":296,"line_end":296,"column_start":9,"column_end":12}},{"value":"/ In 3d, a bivector has 3 components, each one representing the signed *projected area* of the bivector","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17612,"byte_end":17717,"line_start":297,"line_end":297,"column_start":9,"column_end":114}},{"value":"/ onto one of the 3 *basis bivectors*, which can be thought of as corresponding to each of the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17726,"byte_end":17822,"line_start":298,"line_end":298,"column_start":9,"column_end":105}},{"value":"/ three basis planes. This is analogous to the components of a 3d vector, which correspond to the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17831,"byte_end":17930,"line_start":299,"line_end":299,"column_start":9,"column_end":108}},{"value":"/ *projected length* of the vector onto the three basis *vectors. Since in 3d, there are three","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":17939,"byte_end":18035,"line_start":300,"line_end":300,"column_start":9,"column_end":105}},{"value":"/ components for both vectors and bivectors, 3d bivectors have been historically confused with","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18044,"byte_end":18140,"line_start":301,"line_end":301,"column_start":9,"column_end":105}},{"value":"/ 3d vectors quite a lot.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18149,"byte_end":18176,"line_start":302,"line_end":302,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18185,"byte_end":18188,"line_start":303,"line_end":303,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on bivectors generally!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18197,"byte_end":18287,"line_start":304,"line_end":304,"column_start":9,"column_end":99}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\bivec.rs","byte_start":18354,"byte_end":18364,"line_start":306,"line_end":306,"column_start":9,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"interp","qualname":"::interp","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":36},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764}],"decl_id":null,"docs":" Interpolation on types for which it makes sense.\n","sig":null,"attributes":[{"value":"/ Interpolation on types for which it makes sense.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":26801,"byte_end":26853,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":27536,"byte_end":27540,"line_start":16,"line_end":16,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::interp::Lerp","value":"Lerp<T>","parent":null,"children":[{"krate":0,"index":34}],"decl_id":null,"docs":" Pure linear interpolation, i.e. `(1.0 - t) * self + (t) * end`.","sig":null,"attributes":[{"value":"/ Pure linear interpolation, i.e. `(1.0 - t) * self + (t) * end`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":26869,"byte_end":26936,"line_start":4,"line_end":4,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":26937,"byte_end":26940,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ For interpolating `Rotor`s with linear interpolation, you almost certainly","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":26941,"byte_end":27019,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ want to normalize the returned `Rotor`. For example,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":27020,"byte_end":27076,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/ ```rs","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":27077,"byte_end":27086,"line_start":8,"line_end":8,"column_start":1,"column_end":10}},{"value":"/ let interpolated_rotor = rotor1.lerp(rotor2, 0.5).normalized();","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":27087,"byte_end":27154,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":27155,"byte_end":27162,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ For most cases (especially where perfomrance is the primary concern, like in","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":27163,"byte_end":27243,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ animation interpolation for games, this 'normalized lerp' or 'nlerp' is probably","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":27244,"byte_end":27328,"line_start":12,"line_end":12,"column_start":1,"column_end":85}},{"value":"/ what you want to use. However, there are situations in which you really want","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":27329,"byte_end":27409,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ the interpolation between two `Rotor`s to be of constant angular velocity. In this","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":27410,"byte_end":27496,"line_start":14,"line_end":14,"column_start":1,"column_end":87}},{"value":"/ case, check out `Slerp`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":27497,"byte_end":27525,"line_start":15,"line_end":15,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":27553,"byte_end":27557,"line_start":17,"line_end":17,"column_start":8,"column_end":12},"name":"lerp","qualname":"::interp::Lerp::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":29767,"byte_end":29772,"line_start":65,"line_end":65,"column_start":11,"column_end":16},"name":"Slerp","qualname":"::interp::Slerp","value":"Slerp<T>","parent":null,"children":[{"krate":0,"index":38}],"decl_id":null,"docs":" Spherical-linear interpolation.","sig":null,"attributes":[{"value":"/ Spherical-linear interpolation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":29293,"byte_end":29328,"line_start":57,"line_end":57,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":29329,"byte_end":29332,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Basically, interpolation that maintains a constant angular velocity","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":29333,"byte_end":29404,"line_start":59,"line_end":59,"column_start":1,"column_end":72}},{"value":"/ from one orientation on a unit hypersphere to another. This is sorta the \"high quality\" interpolation","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":29405,"byte_end":29510,"line_start":60,"line_end":60,"column_start":1,"column_end":106}},{"value":"/ for `Rotor`s, and it can also be used to interpolate other things, one example being interpolation of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":29511,"byte_end":29616,"line_start":61,"line_end":61,"column_start":1,"column_end":106}},{"value":"/ 3d normal vectors.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":29617,"byte_end":29639,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":29640,"byte_end":29643,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Note that you should often normalize the result returned by this operation, when working with `Rotor`s, etc!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":29644,"byte_end":29756,"line_start":64,"line_end":64,"column_start":1,"column_end":113}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\interp.rs","byte_start":29785,"byte_end":29790,"line_start":66,"line_end":66,"column_start":8,"column_end":13},"name":"slerp","qualname":"::interp::Slerp::slerp","value":"pub fn slerp(&Self, Self, T) -> Self","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mat","qualname":"::mat","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":973},{"krate":0,"index":983},{"krate":0,"index":982},{"krate":0,"index":980},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":986},{"krate":0,"index":766},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":816},{"krate":0,"index":822},{"krate":0,"index":826},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":988},{"krate":0,"index":998},{"krate":0,"index":997},{"krate":0,"index":995},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":1001},{"krate":0,"index":835},{"krate":0,"index":864},{"krate":0,"index":867},{"krate":0,"index":870},{"krate":0,"index":873},{"krate":0,"index":876},{"krate":0,"index":879},{"krate":0,"index":881},{"krate":0,"index":885},{"krate":0,"index":891},{"krate":0,"index":895},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":1003},{"krate":0,"index":1013},{"krate":0,"index":1012},{"krate":0,"index":1010},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1016},{"krate":0,"index":904},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":939},{"krate":0,"index":942},{"krate":0,"index":945},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":954},{"krate":0,"index":960},{"krate":0,"index":964},{"krate":0,"index":968},{"krate":0,"index":971},{"krate":0,"index":1264},{"krate":0,"index":1274},{"krate":0,"index":1273},{"krate":0,"index":1271},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1277},{"krate":0,"index":1018},{"krate":0,"index":1060},{"krate":0,"index":1063},{"krate":0,"index":1066},{"krate":0,"index":1069},{"krate":0,"index":1072},{"krate":0,"index":1075},{"krate":0,"index":1077},{"krate":0,"index":1081},{"krate":0,"index":1087},{"krate":0,"index":1091},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":1279},{"krate":0,"index":1289},{"krate":0,"index":1288},{"krate":0,"index":1286},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1292},{"krate":0,"index":1100},{"krate":0,"index":1142},{"krate":0,"index":1145},{"krate":0,"index":1148},{"krate":0,"index":1151},{"krate":0,"index":1154},{"krate":0,"index":1157},{"krate":0,"index":1159},{"krate":0,"index":1163},{"krate":0,"index":1169},{"krate":0,"index":1173},{"krate":0,"index":1177},{"krate":0,"index":1180},{"krate":0,"index":1294},{"krate":0,"index":1304},{"krate":0,"index":1303},{"krate":0,"index":1301},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1307},{"krate":0,"index":1182},{"krate":0,"index":1224},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":1233},{"krate":0,"index":1236},{"krate":0,"index":1239},{"krate":0,"index":1241},{"krate":0,"index":1245},{"krate":0,"index":1251},{"krate":0,"index":1255},{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1309},{"krate":0,"index":1311},{"krate":0,"index":1313},{"krate":0,"index":1576},{"krate":0,"index":1586},{"krate":0,"index":1585},{"krate":0,"index":1583},{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1589},{"krate":0,"index":1315},{"krate":0,"index":1362},{"krate":0,"index":1365},{"krate":0,"index":1368},{"krate":0,"index":1371},{"krate":0,"index":1374},{"krate":0,"index":1377},{"krate":0,"index":1379},{"krate":0,"index":1383},{"krate":0,"index":1389},{"krate":0,"index":1393},{"krate":0,"index":1397},{"krate":0,"index":1400},{"krate":0,"index":1591},{"krate":0,"index":1601},{"krate":0,"index":1600},{"krate":0,"index":1598},{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1604},{"krate":0,"index":1402},{"krate":0,"index":1449},{"krate":0,"index":1452},{"krate":0,"index":1455},{"krate":0,"index":1458},{"krate":0,"index":1461},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":1470},{"krate":0,"index":1476},{"krate":0,"index":1480},{"krate":0,"index":1484},{"krate":0,"index":1487},{"krate":0,"index":1606},{"krate":0,"index":1616},{"krate":0,"index":1615},{"krate":0,"index":1613},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1619},{"krate":0,"index":1489},{"krate":0,"index":1536},{"krate":0,"index":1539},{"krate":0,"index":1542},{"krate":0,"index":1545},{"krate":0,"index":1548},{"krate":0,"index":1551},{"krate":0,"index":1553},{"krate":0,"index":1557},{"krate":0,"index":1563},{"krate":0,"index":1567},{"krate":0,"index":1571},{"krate":0,"index":1574}],"decl_id":null,"docs":" Square matrices.\n","sig":null,"attributes":[{"value":"/ Square matrices.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":35791,"byte_end":35811,"line_start":1,"line_end":1,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":973},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46417,"byte_end":46421,"line_start":327,"line_end":327,"column_start":5,"column_end":9},"name":"Mat2","qualname":"::mat::Mat2","value":"Mat2 { cols }","parent":null,"children":[{"krate":0,"index":974}],"decl_id":null,"docs":" A 2x2 square matrix.","sig":null,"attributes":[{"value":"/ A 2x2 square matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":35948,"byte_end":35972,"line_start":8,"line_end":8,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":35981,"byte_end":35984,"line_start":9,"line_end":9,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 2d vectors.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":35993,"byte_end":36076,"line_start":10,"line_end":10,"column_start":9,"column_end":92}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":36134,"byte_end":36144,"line_start":12,"line_end":12,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":988},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46452,"byte_end":46458,"line_start":328,"line_end":328,"column_start":5,"column_end":11},"name":"Mat2x4","qualname":"::mat::Mat2x4","value":"Mat2x4 { cols }","parent":null,"children":[{"krate":0,"index":989}],"decl_id":null,"docs":" A 2x2 square matrix.","sig":null,"attributes":[{"value":"/ A 2x2 square matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":35948,"byte_end":35972,"line_start":8,"line_end":8,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":35981,"byte_end":35984,"line_start":9,"line_end":9,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 2d vectors.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":35993,"byte_end":36076,"line_start":10,"line_end":10,"column_start":9,"column_end":92}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":36134,"byte_end":36144,"line_start":12,"line_end":12,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1003},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46497,"byte_end":46503,"line_start":329,"line_end":329,"column_start":5,"column_end":11},"name":"Mat2x8","qualname":"::mat::Mat2x8","value":"Mat2x8 { cols }","parent":null,"children":[{"krate":0,"index":1004}],"decl_id":null,"docs":" A 2x2 square matrix.","sig":null,"attributes":[{"value":"/ A 2x2 square matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":35948,"byte_end":35972,"line_start":8,"line_end":8,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":35981,"byte_end":35984,"line_start":9,"line_end":9,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 2d vectors.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":35993,"byte_end":36076,"line_start":10,"line_end":10,"column_start":9,"column_end":92}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":36134,"byte_end":36144,"line_start":12,"line_end":12,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1264},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":66819,"byte_end":66823,"line_start":850,"line_end":850,"column_start":5,"column_end":9},"name":"Mat3","qualname":"::mat::Mat3","value":"Mat3 { cols }","parent":null,"children":[{"krate":0,"index":1265}],"decl_id":null,"docs":" A 3x3 square matrix.","sig":null,"attributes":[{"value":"/ A 3x3 square matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46850,"byte_end":46874,"line_start":341,"line_end":341,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46883,"byte_end":46886,"line_start":342,"line_end":342,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 3d vectors,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46895,"byte_end":46978,"line_start":343,"line_end":343,"column_start":9,"column_end":92}},{"value":"/ or for performing arbitrary transformations (linear +   translation, projection, etc)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46987,"byte_end":47076,"line_start":344,"line_end":344,"column_start":9,"column_end":98}},{"value":"/ on homogeneous 2d vectors","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":47085,"byte_end":47114,"line_start":345,"line_end":345,"column_start":9,"column_end":38}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":47172,"byte_end":47182,"line_start":347,"line_end":347,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1279},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":66876,"byte_end":66882,"line_start":851,"line_end":851,"column_start":5,"column_end":11},"name":"Mat3x4","qualname":"::mat::Mat3x4","value":"Mat3x4 { cols }","parent":null,"children":[{"krate":0,"index":1280}],"decl_id":null,"docs":" A 3x3 square matrix.","sig":null,"attributes":[{"value":"/ A 3x3 square matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46850,"byte_end":46874,"line_start":341,"line_end":341,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46883,"byte_end":46886,"line_start":342,"line_end":342,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 3d vectors,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46895,"byte_end":46978,"line_start":343,"line_end":343,"column_start":9,"column_end":92}},{"value":"/ or for performing arbitrary transformations (linear +   translation, projection, etc)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46987,"byte_end":47076,"line_start":344,"line_end":344,"column_start":9,"column_end":98}},{"value":"/ on homogeneous 2d vectors","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":47085,"byte_end":47114,"line_start":345,"line_end":345,"column_start":9,"column_end":38}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":47172,"byte_end":47182,"line_start":347,"line_end":347,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1294},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":66949,"byte_end":66955,"line_start":852,"line_end":852,"column_start":5,"column_end":11},"name":"Mat3x8","qualname":"::mat::Mat3x8","value":"Mat3x8 { cols }","parent":null,"children":[{"krate":0,"index":1295}],"decl_id":null,"docs":" A 3x3 square matrix.","sig":null,"attributes":[{"value":"/ A 3x3 square matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46850,"byte_end":46874,"line_start":341,"line_end":341,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46883,"byte_end":46886,"line_start":342,"line_end":342,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 3d vectors,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46895,"byte_end":46978,"line_start":343,"line_end":343,"column_start":9,"column_end":92}},{"value":"/ or for performing arbitrary transformations (linear +   translation, projection, etc)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":46987,"byte_end":47076,"line_start":344,"line_end":344,"column_start":9,"column_end":98}},{"value":"/ on homogeneous 2d vectors","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":47085,"byte_end":47114,"line_start":345,"line_end":345,"column_start":9,"column_end":38}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":47172,"byte_end":47182,"line_start":347,"line_end":347,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1576},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":99151,"byte_end":99155,"line_start":1615,"line_end":1615,"column_start":5,"column_end":9},"name":"Mat4","qualname":"::mat::Mat4","value":"Mat4 { cols }","parent":null,"children":[{"krate":0,"index":1577}],"decl_id":null,"docs":" A 4x4 square matrix.","sig":null,"attributes":[{"value":"/ A 4x4 square matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":70795,"byte_end":70819,"line_start":942,"line_end":942,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":70828,"byte_end":70831,"line_start":943,"line_end":943,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 4d vectors,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":70840,"byte_end":70923,"line_start":944,"line_end":944,"column_start":9,"column_end":92}},{"value":"/ or for performing arbitrary transformations (linear + translation, projection, etc)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":70932,"byte_end":71019,"line_start":945,"line_end":945,"column_start":9,"column_end":96}},{"value":"/ on homogeneous 3d vectors.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71028,"byte_end":71058,"line_start":946,"line_end":946,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71067,"byte_end":71070,"line_start":947,"line_end":947,"column_start":9,"column_end":12}},{"value":"/ Note that most constructors assume that the matrix will be used as a homogeneous 3d","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71079,"byte_end":71166,"line_start":948,"line_end":948,"column_start":9,"column_end":96}},{"value":"/ transformation matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71175,"byte_end":71201,"line_start":949,"line_end":949,"column_start":9,"column_end":35}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71259,"byte_end":71269,"line_start":951,"line_end":951,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1591},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":99213,"byte_end":99219,"line_start":1616,"line_end":1616,"column_start":5,"column_end":11},"name":"Mat4x4","qualname":"::mat::Mat4x4","value":"Mat4x4 { cols }","parent":null,"children":[{"krate":0,"index":1592}],"decl_id":null,"docs":" A 4x4 square matrix.","sig":null,"attributes":[{"value":"/ A 4x4 square matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":70795,"byte_end":70819,"line_start":942,"line_end":942,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":70828,"byte_end":70831,"line_start":943,"line_end":943,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 4d vectors,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":70840,"byte_end":70923,"line_start":944,"line_end":944,"column_start":9,"column_end":92}},{"value":"/ or for performing arbitrary transformations (linear + translation, projection, etc)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":70932,"byte_end":71019,"line_start":945,"line_end":945,"column_start":9,"column_end":96}},{"value":"/ on homogeneous 3d vectors.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71028,"byte_end":71058,"line_start":946,"line_end":946,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71067,"byte_end":71070,"line_start":947,"line_end":947,"column_start":9,"column_end":12}},{"value":"/ Note that most constructors assume that the matrix will be used as a homogeneous 3d","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71079,"byte_end":71166,"line_start":948,"line_end":948,"column_start":9,"column_end":96}},{"value":"/ transformation matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71175,"byte_end":71201,"line_start":949,"line_end":949,"column_start":9,"column_end":35}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71259,"byte_end":71269,"line_start":951,"line_end":951,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1606},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":99291,"byte_end":99297,"line_start":1617,"line_end":1617,"column_start":5,"column_end":11},"name":"Mat4x8","qualname":"::mat::Mat4x8","value":"Mat4x8 { cols }","parent":null,"children":[{"krate":0,"index":1607}],"decl_id":null,"docs":" A 4x4 square matrix.","sig":null,"attributes":[{"value":"/ A 4x4 square matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":70795,"byte_end":70819,"line_start":942,"line_end":942,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":70828,"byte_end":70831,"line_start":943,"line_end":943,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 4d vectors,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":70840,"byte_end":70923,"line_start":944,"line_end":944,"column_start":9,"column_end":92}},{"value":"/ or for performing arbitrary transformations (linear + translation, projection, etc)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":70932,"byte_end":71019,"line_start":945,"line_end":945,"column_start":9,"column_end":96}},{"value":"/ on homogeneous 3d vectors.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71028,"byte_end":71058,"line_start":946,"line_end":946,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71067,"byte_end":71070,"line_start":947,"line_end":947,"column_start":9,"column_end":12}},{"value":"/ Note that most constructors assume that the matrix will be used as a homogeneous 3d","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71079,"byte_end":71166,"line_start":948,"line_end":948,"column_start":9,"column_end":96}},{"value":"/ transformation matrix.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71175,"byte_end":71201,"line_start":949,"line_end":949,"column_start":9,"column_end":35}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\mat.rs","byte_start":71259,"byte_end":71269,"line_start":951,"line_end":951,"column_start":9,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"projection","qualname":"::projection","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":67},{"krate":0,"index":83},{"krate":0,"index":99},{"krate":0,"index":115}],"decl_id":null,"docs":" Utility functions to create projection matrices.","sig":null,"attributes":[{"value":"/ Utility functions to create projection matrices.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":102295,"byte_end":102347,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":102348,"byte_end":102351,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Each module contains versions for a certain kind of \"base\" coordinate systems, i.e. the coordinate","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":102352,"byte_end":102454,"line_start":3,"line_end":3,"column_start":1,"column_end":103}},{"value":"/ system that your client application is using. All of them assume +x is pointing to the right.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":102455,"byte_end":102552,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":102553,"byte_end":102556,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ The `rh_yup` module is publicly re-exported as it contains the functions for what is generally seen","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":102557,"byte_end":102660,"line_start":6,"line_end":6,"column_start":1,"column_end":104}},{"value":"/ as the 'standard' computer graphics coordinate space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":102661,"byte_end":102718,"line_start":7,"line_end":7,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lh_ydown","qualname":"::projection::lh_ydown","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"decl_id":null,"docs":" Projection matrices that are intended to be used when the base coordinate\n system (i.e. the one used by the application code) is left-handed, with the\n x-axis pointing right, y-axis pointing *down*, and z-axis pointing *out of\n the screen*.\n","sig":null,"attributes":[{"value":"/ Projection matrices that are intended to be used when the base coordinate","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":102809,"byte_end":102886,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/ system (i.e. the one used by the application code) is left-handed, with the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":102887,"byte_end":102966,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ x-axis pointing right, y-axis pointing *down*, and z-axis pointing *out of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":102967,"byte_end":103045,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ the screen*.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":103046,"byte_end":103062,"line_start":4,"line_end":4,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":103396,"byte_end":103411,"line_start":15,"line_end":15,"column_start":8,"column_end":23},"name":"orthographic_gl","qualname":"::projection::lh_ydown::orthographic_gl","value":"pub fn orthographic_gl(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with OpenGL.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":103103,"byte_end":103158,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":103159,"byte_end":103162,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":103163,"byte_end":103257,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/ and the destination space is left-handed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":103258,"byte_end":103302,"line_start":12,"line_end":12,"column_start":1,"column_end":45}},{"value":"/ and y-up, with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":103303,"byte_end":103378,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":103379,"byte_end":103388,"line_start":14,"line_end":14,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":104174,"byte_end":104189,"line_start":36,"line_end":36,"column_start":8,"column_end":23},"name":"orthographic_vk","qualname":"::projection::lh_ydown::orthographic_vk","value":"pub fn orthographic_vk(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with Vulkan.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":103879,"byte_end":103934,"line_start":30,"line_end":30,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":103935,"byte_end":103938,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":103939,"byte_end":104033,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ and the destination space is right-handed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":104034,"byte_end":104079,"line_start":33,"line_end":33,"column_start":1,"column_end":46}},{"value":"/ and y-down, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":104080,"byte_end":104156,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":104157,"byte_end":104166,"line_start":35,"line_end":35,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":104937,"byte_end":104957,"line_start":56,"line_end":56,"column_start":8,"column_end":28},"name":"orthographic_wgpu_dx","qualname":"::projection::lh_ydown::orthographic_wgpu_dx","value":"pub fn orthographic_wgpu_dx(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with WebGPU or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":104631,"byte_end":104697,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":104698,"byte_end":104701,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":104702,"byte_end":104796,"line_start":52,"line_end":52,"column_start":1,"column_end":95}},{"value":"/ and the destination space is be left-handed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":104797,"byte_end":104844,"line_start":53,"line_end":53,"column_start":1,"column_end":48}},{"value":"/ and y-up, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":104845,"byte_end":104919,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":104920,"byte_end":104929,"line_start":55,"line_end":55,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":105906,"byte_end":105920,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"perspective_gl","qualname":"::projection::lh_ydown::perspective_gl","value":"pub fn perspective_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":105427,"byte_end":105490,"line_start":77,"line_end":77,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":105491,"byte_end":105494,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":105495,"byte_end":105546,"line_start":79,"line_end":79,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":105547,"byte_end":105608,"line_start":80,"line_end":80,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":105609,"byte_end":105612,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":105613,"byte_end":105707,"line_start":82,"line_end":82,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":105708,"byte_end":105801,"line_start":83,"line_end":83,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":105802,"byte_end":105888,"line_start":84,"line_end":84,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":105889,"byte_end":105898,"line_start":85,"line_end":85,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":106829,"byte_end":106848,"line_start":109,"line_end":109,"column_start":8,"column_end":27},"name":"perspective_wgpu_dx","qualname":"::projection::lh_ydown::perspective_wgpu_dx","value":"pub fn perspective_wgpu_dx(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with WebGPU or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":106340,"byte_end":106414,"line_start":100,"line_end":100,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":106415,"byte_end":106418,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":106419,"byte_end":106470,"line_start":102,"line_end":102,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":106471,"byte_end":106532,"line_start":103,"line_end":103,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":106533,"byte_end":106536,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":106537,"byte_end":106631,"line_start":105,"line_end":105,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":106632,"byte_end":106725,"line_start":106,"line_end":106,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":106726,"byte_end":106811,"line_start":107,"line_end":107,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":106812,"byte_end":106821,"line_start":108,"line_end":108,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":107732,"byte_end":107746,"line_start":132,"line_end":132,"column_start":8,"column_end":22},"name":"perspective_vk","qualname":"::projection::lh_ydown::perspective_vk","value":"pub fn perspective_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":107251,"byte_end":107314,"line_start":123,"line_end":123,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":107315,"byte_end":107318,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":107319,"byte_end":107370,"line_start":125,"line_end":125,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":107371,"byte_end":107432,"line_start":126,"line_end":126,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":107433,"byte_end":107436,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":107437,"byte_end":107531,"line_start":128,"line_end":128,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":107532,"byte_end":107625,"line_start":129,"line_end":129,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":107626,"byte_end":107714,"line_start":130,"line_end":130,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":107715,"byte_end":107724,"line_start":131,"line_end":131,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108896,"byte_end":108921,"line_start":159,"line_end":159,"column_start":8,"column_end":33},"name":"perspective_infinite_z_gl","qualname":"::projection::lh_ydown::perspective_infinite_z_gl","value":"pub fn perspective_infinite_z_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108148,"byte_end":108237,"line_start":146,"line_end":146,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108238,"byte_end":108241,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108242,"byte_end":108339,"line_start":148,"line_end":148,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108340,"byte_end":108436,"line_start":149,"line_end":149,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108437,"byte_end":108480,"line_start":150,"line_end":150,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108481,"byte_end":108484,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108485,"byte_end":108536,"line_start":152,"line_end":152,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108537,"byte_end":108598,"line_start":153,"line_end":153,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108599,"byte_end":108602,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108603,"byte_end":108697,"line_start":155,"line_end":155,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108698,"byte_end":108791,"line_start":156,"line_end":156,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108792,"byte_end":108878,"line_start":157,"line_end":157,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":108879,"byte_end":108888,"line_start":158,"line_end":158,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110018,"byte_end":110043,"line_start":185,"line_end":185,"column_start":8,"column_end":33},"name":"perspective_infinite_z_vk","qualname":"::projection::lh_ydown::perspective_infinite_z_vk","value":"pub fn perspective_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":109268,"byte_end":109357,"line_start":172,"line_end":172,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":109358,"byte_end":109361,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":109362,"byte_end":109459,"line_start":174,"line_end":174,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":109460,"byte_end":109556,"line_start":175,"line_end":175,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":109557,"byte_end":109600,"line_start":176,"line_end":176,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":109601,"byte_end":109604,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":109605,"byte_end":109656,"line_start":178,"line_end":178,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":109657,"byte_end":109718,"line_start":179,"line_end":179,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":109719,"byte_end":109722,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":109723,"byte_end":109817,"line_start":181,"line_end":181,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":109818,"byte_end":109911,"line_start":182,"line_end":182,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":109912,"byte_end":110000,"line_start":183,"line_end":183,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110001,"byte_end":110010,"line_start":184,"line_end":184,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":111141,"byte_end":111171,"line_start":211,"line_end":211,"column_start":8,"column_end":38},"name":"perspective_infinite_z_wgpu_dx","qualname":"::projection::lh_ydown::perspective_infinite_z_wgpu_dx","value":"pub fn perspective_infinite_z_wgpu_dx(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110383,"byte_end":110483,"line_start":198,"line_end":198,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110484,"byte_end":110487,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110488,"byte_end":110585,"line_start":200,"line_end":200,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110586,"byte_end":110682,"line_start":201,"line_end":201,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110683,"byte_end":110726,"line_start":202,"line_end":202,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110727,"byte_end":110730,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110731,"byte_end":110782,"line_start":204,"line_end":204,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110783,"byte_end":110844,"line_start":205,"line_end":205,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110845,"byte_end":110848,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110849,"byte_end":110943,"line_start":207,"line_end":207,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":110944,"byte_end":111037,"line_start":208,"line_end":208,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":111038,"byte_end":111123,"line_start":209,"line_end":209,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":111124,"byte_end":111133,"line_start":210,"line_end":210,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":112519,"byte_end":112552,"line_start":240,"line_end":240,"column_start":8,"column_end":41},"name":"perspective_reversed_z_wgpu_dx_gl","qualname":"::projection::lh_ydown::perspective_reversed_z_wgpu_dx_gl","value":"pub fn perspective_reversed_z_wgpu_dx_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":111512,"byte_end":111616,"line_start":224,"line_end":224,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":111617,"byte_end":111620,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":111621,"byte_end":111708,"line_start":226,"line_end":226,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":111709,"byte_end":111813,"line_start":227,"line_end":227,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":111814,"byte_end":111904,"line_start":228,"line_end":228,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":111905,"byte_end":111908,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":111909,"byte_end":111960,"line_start":230,"line_end":230,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":111961,"byte_end":112022,"line_start":231,"line_end":231,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":112023,"byte_end":112026,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":112027,"byte_end":112121,"line_start":233,"line_end":233,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":112122,"byte_end":112215,"line_start":234,"line_end":234,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":112216,"byte_end":112301,"line_start":235,"line_end":235,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":112302,"byte_end":112305,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":112306,"byte_end":112424,"line_start":237,"line_end":237,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":112425,"byte_end":112501,"line_start":238,"line_end":238,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":112502,"byte_end":112511,"line_start":239,"line_end":239,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113772,"byte_end":113797,"line_start":272,"line_end":272,"column_start":8,"column_end":33},"name":"perspective_reversed_z_vk","qualname":"::projection::lh_ydown::perspective_reversed_z_vk","value":"pub fn perspective_reversed_z_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":112982,"byte_end":113066,"line_start":259,"line_end":259,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113067,"byte_end":113070,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113071,"byte_end":113158,"line_start":261,"line_end":261,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113159,"byte_end":113263,"line_start":262,"line_end":262,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113264,"byte_end":113354,"line_start":263,"line_end":263,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113355,"byte_end":113358,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113359,"byte_end":113410,"line_start":265,"line_end":265,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113411,"byte_end":113472,"line_start":266,"line_end":266,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113473,"byte_end":113476,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113477,"byte_end":113571,"line_start":268,"line_end":268,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113572,"byte_end":113665,"line_start":269,"line_end":269,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113666,"byte_end":113754,"line_start":270,"line_end":270,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":113755,"byte_end":113764,"line_start":271,"line_end":271,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":115557,"byte_end":115599,"line_start":313,"line_end":313,"column_start":8,"column_end":50},"name":"perspective_reversed_infinite_z_wgpu_dx_gl","qualname":"::projection::lh_ydown::perspective_reversed_infinite_z_wgpu_dx_gl","value":"pub fn perspective_reversed_infinite_z_wgpu_dx_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114219,"byte_end":114335,"line_start":291,"line_end":291,"column_start":1,"column_end":117}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114336,"byte_end":114339,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114340,"byte_end":114427,"line_start":293,"line_end":293,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114428,"byte_end":114532,"line_start":294,"line_end":294,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114533,"byte_end":114623,"line_start":295,"line_end":295,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114624,"byte_end":114627,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114628,"byte_end":114730,"line_start":297,"line_end":297,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114731,"byte_end":114827,"line_start":298,"line_end":298,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114828,"byte_end":114871,"line_start":299,"line_end":299,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114872,"byte_end":114875,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114876,"byte_end":114942,"line_start":301,"line_end":301,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114943,"byte_end":114946,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114947,"byte_end":114998,"line_start":303,"line_end":303,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":114999,"byte_end":115060,"line_start":304,"line_end":304,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":115061,"byte_end":115064,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":115065,"byte_end":115159,"line_start":306,"line_end":306,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":115160,"byte_end":115253,"line_start":307,"line_end":307,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":115254,"byte_end":115339,"line_start":308,"line_end":308,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":115340,"byte_end":115343,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":115344,"byte_end":115462,"line_start":310,"line_end":310,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":115463,"byte_end":115539,"line_start":311,"line_end":311,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":115540,"byte_end":115549,"line_start":312,"line_end":312,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":117075,"byte_end":117109,"line_start":349,"line_end":349,"column_start":8,"column_end":42},"name":"perspective_reversed_infinite_z_vk","qualname":"::projection::lh_ydown::perspective_reversed_infinite_z_vk","value":"pub fn perspective_reversed_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":115953,"byte_end":116050,"line_start":330,"line_end":330,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116051,"byte_end":116054,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116055,"byte_end":116142,"line_start":332,"line_end":332,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116143,"byte_end":116247,"line_start":333,"line_end":333,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116248,"byte_end":116338,"line_start":334,"line_end":334,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116339,"byte_end":116342,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116343,"byte_end":116445,"line_start":336,"line_end":336,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116446,"byte_end":116542,"line_start":337,"line_end":337,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116543,"byte_end":116586,"line_start":338,"line_end":338,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116587,"byte_end":116590,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116591,"byte_end":116657,"line_start":340,"line_end":340,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116658,"byte_end":116661,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116662,"byte_end":116713,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116714,"byte_end":116775,"line_start":343,"line_end":343,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116776,"byte_end":116779,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116780,"byte_end":116874,"line_start":345,"line_end":345,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116875,"byte_end":116968,"line_start":346,"line_end":346,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":116969,"byte_end":117057,"line_start":347,"line_end":347,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_ydown.rs","byte_start":117058,"byte_end":117067,"line_start":348,"line_end":348,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lh_yup","qualname":"::projection::lh_yup","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"decl_id":null,"docs":" Projection matrices that are intended to be used when the base coordinate\n system (i.e. the one used by the application code) is left-handed, with the\n x-axis pointing right, y-axis pointing *up*, and z-axis pointing *into the\n screen*.\n","sig":null,"attributes":[{"value":"/ Projection matrices that are intended to be used when the base coordinate","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":117462,"byte_end":117539,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/ system (i.e. the one used by the application code) is left-handed, with the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":117540,"byte_end":117619,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ x-axis pointing right, y-axis pointing *up*, and z-axis pointing *into the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":117620,"byte_end":117698,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ screen*.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":117699,"byte_end":117711,"line_start":4,"line_end":4,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":118043,"byte_end":118058,"line_start":15,"line_end":15,"column_start":8,"column_end":23},"name":"orthographic_gl","qualname":"::projection::lh_yup::orthographic_gl","value":"pub fn orthographic_gl(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with OpenGL.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":117752,"byte_end":117807,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":117808,"byte_end":117811,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":117812,"byte_end":117904,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ and the destination space is left-handed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":117905,"byte_end":117949,"line_start":12,"line_end":12,"column_start":1,"column_end":45}},{"value":"/ and y-up, with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":117950,"byte_end":118025,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":118026,"byte_end":118035,"line_start":14,"line_end":14,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":118818,"byte_end":118833,"line_start":36,"line_end":36,"column_start":8,"column_end":23},"name":"orthographic_vk","qualname":"::projection::lh_yup::orthographic_vk","value":"pub fn orthographic_vk(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with Vulkan.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":118525,"byte_end":118580,"line_start":30,"line_end":30,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":118581,"byte_end":118584,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":118585,"byte_end":118677,"line_start":32,"line_end":32,"column_start":1,"column_end":93}},{"value":"/ and the destination space is right-handed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":118678,"byte_end":118723,"line_start":33,"line_end":33,"column_start":1,"column_end":46}},{"value":"/ and y-down, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":118724,"byte_end":118800,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":118801,"byte_end":118810,"line_start":35,"line_end":35,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":119577,"byte_end":119597,"line_start":56,"line_end":56,"column_start":8,"column_end":28},"name":"orthographic_wgpu_dx","qualname":"::projection::lh_yup::orthographic_wgpu_dx","value":"pub fn orthographic_wgpu_dx(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with WebGPU or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":119276,"byte_end":119342,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":119343,"byte_end":119346,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":119347,"byte_end":119439,"line_start":52,"line_end":52,"column_start":1,"column_end":93}},{"value":"/ and the destination space is left-handed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":119440,"byte_end":119484,"line_start":53,"line_end":53,"column_start":1,"column_end":45}},{"value":"/ and y-up, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":119485,"byte_end":119559,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":119560,"byte_end":119569,"line_start":55,"line_end":55,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":120543,"byte_end":120557,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"perspective_gl","qualname":"::projection::lh_yup::perspective_gl","value":"pub fn perspective_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":120066,"byte_end":120129,"line_start":77,"line_end":77,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":120130,"byte_end":120133,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":120134,"byte_end":120185,"line_start":79,"line_end":79,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":120186,"byte_end":120247,"line_start":80,"line_end":80,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":120248,"byte_end":120251,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":120252,"byte_end":120344,"line_start":82,"line_end":82,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":120345,"byte_end":120438,"line_start":83,"line_end":83,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":120439,"byte_end":120525,"line_start":84,"line_end":84,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":120526,"byte_end":120535,"line_start":85,"line_end":85,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":121463,"byte_end":121482,"line_start":109,"line_end":109,"column_start":8,"column_end":27},"name":"perspective_wgpu_dx","qualname":"::projection::lh_yup::perspective_wgpu_dx","value":"pub fn perspective_wgpu_dx(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with WebGPU or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":120976,"byte_end":121050,"line_start":100,"line_end":100,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":121051,"byte_end":121054,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":121055,"byte_end":121106,"line_start":102,"line_end":102,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":121107,"byte_end":121168,"line_start":103,"line_end":103,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":121169,"byte_end":121172,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":121173,"byte_end":121265,"line_start":105,"line_end":105,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":121266,"byte_end":121359,"line_start":106,"line_end":106,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":121360,"byte_end":121445,"line_start":107,"line_end":107,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":121446,"byte_end":121455,"line_start":108,"line_end":108,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":122363,"byte_end":122377,"line_start":132,"line_end":132,"column_start":8,"column_end":22},"name":"perspective_vk","qualname":"::projection::lh_yup::perspective_vk","value":"pub fn perspective_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":121884,"byte_end":121947,"line_start":123,"line_end":123,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":121948,"byte_end":121951,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":121952,"byte_end":122003,"line_start":125,"line_end":125,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":122004,"byte_end":122065,"line_start":126,"line_end":126,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":122066,"byte_end":122069,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":122070,"byte_end":122162,"line_start":128,"line_end":128,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":122163,"byte_end":122256,"line_start":129,"line_end":129,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":122257,"byte_end":122345,"line_start":130,"line_end":130,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":122346,"byte_end":122355,"line_start":131,"line_end":131,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123526,"byte_end":123551,"line_start":159,"line_end":159,"column_start":8,"column_end":33},"name":"perspective_infinite_z_gl","qualname":"::projection::lh_yup::perspective_infinite_z_gl","value":"pub fn perspective_infinite_z_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":122780,"byte_end":122869,"line_start":146,"line_end":146,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":122870,"byte_end":122873,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":122874,"byte_end":122971,"line_start":148,"line_end":148,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":122972,"byte_end":123068,"line_start":149,"line_end":149,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123069,"byte_end":123112,"line_start":150,"line_end":150,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123113,"byte_end":123116,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123117,"byte_end":123168,"line_start":152,"line_end":152,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123169,"byte_end":123230,"line_start":153,"line_end":153,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123231,"byte_end":123234,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123235,"byte_end":123327,"line_start":155,"line_end":155,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123328,"byte_end":123421,"line_start":156,"line_end":156,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123422,"byte_end":123508,"line_start":157,"line_end":157,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123509,"byte_end":123518,"line_start":158,"line_end":158,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":124645,"byte_end":124670,"line_start":185,"line_end":185,"column_start":8,"column_end":33},"name":"perspective_infinite_z_vk","qualname":"::projection::lh_yup::perspective_infinite_z_vk","value":"pub fn perspective_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123897,"byte_end":123986,"line_start":172,"line_end":172,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123987,"byte_end":123990,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":123991,"byte_end":124088,"line_start":174,"line_end":174,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":124089,"byte_end":124185,"line_start":175,"line_end":175,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":124186,"byte_end":124229,"line_start":176,"line_end":176,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":124230,"byte_end":124233,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":124234,"byte_end":124285,"line_start":178,"line_end":178,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":124286,"byte_end":124347,"line_start":179,"line_end":179,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":124348,"byte_end":124351,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":124352,"byte_end":124444,"line_start":181,"line_end":181,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":124445,"byte_end":124538,"line_start":182,"line_end":182,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":124539,"byte_end":124627,"line_start":183,"line_end":183,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":124628,"byte_end":124637,"line_start":184,"line_end":184,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125767,"byte_end":125797,"line_start":211,"line_end":211,"column_start":8,"column_end":38},"name":"perspective_infinite_z_wgpu_dx","qualname":"::projection::lh_yup::perspective_infinite_z_wgpu_dx","value":"pub fn perspective_infinite_z_wgpu_dx(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125011,"byte_end":125111,"line_start":198,"line_end":198,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125112,"byte_end":125115,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125116,"byte_end":125213,"line_start":200,"line_end":200,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125214,"byte_end":125310,"line_start":201,"line_end":201,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125311,"byte_end":125354,"line_start":202,"line_end":202,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125355,"byte_end":125358,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125359,"byte_end":125410,"line_start":204,"line_end":204,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125411,"byte_end":125472,"line_start":205,"line_end":205,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125473,"byte_end":125476,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125477,"byte_end":125569,"line_start":207,"line_end":207,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125570,"byte_end":125663,"line_start":208,"line_end":208,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125664,"byte_end":125749,"line_start":209,"line_end":209,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":125750,"byte_end":125759,"line_start":210,"line_end":210,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":127142,"byte_end":127175,"line_start":240,"line_end":240,"column_start":8,"column_end":41},"name":"perspective_reversed_z_wgpu_dx_gl","qualname":"::projection::lh_yup::perspective_reversed_z_wgpu_dx_gl","value":"pub fn perspective_reversed_z_wgpu_dx_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126137,"byte_end":126241,"line_start":224,"line_end":224,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126242,"byte_end":126245,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126246,"byte_end":126333,"line_start":226,"line_end":226,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126334,"byte_end":126438,"line_start":227,"line_end":227,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126439,"byte_end":126529,"line_start":228,"line_end":228,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126530,"byte_end":126533,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126534,"byte_end":126585,"line_start":230,"line_end":230,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126586,"byte_end":126647,"line_start":231,"line_end":231,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126648,"byte_end":126651,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126652,"byte_end":126744,"line_start":233,"line_end":233,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126745,"byte_end":126838,"line_start":234,"line_end":234,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126839,"byte_end":126924,"line_start":235,"line_end":235,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126925,"byte_end":126928,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":126929,"byte_end":127047,"line_start":237,"line_end":237,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":127048,"byte_end":127124,"line_start":238,"line_end":238,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":127125,"byte_end":127134,"line_start":239,"line_end":239,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":128392,"byte_end":128417,"line_start":272,"line_end":272,"column_start":8,"column_end":33},"name":"perspective_reversed_z_vk","qualname":"::projection::lh_yup::perspective_reversed_z_vk","value":"pub fn perspective_reversed_z_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":127604,"byte_end":127688,"line_start":259,"line_end":259,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":127689,"byte_end":127692,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":127693,"byte_end":127780,"line_start":261,"line_end":261,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":127781,"byte_end":127885,"line_start":262,"line_end":262,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":127886,"byte_end":127976,"line_start":263,"line_end":263,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":127977,"byte_end":127980,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":127981,"byte_end":128032,"line_start":265,"line_end":265,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":128033,"byte_end":128094,"line_start":266,"line_end":266,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":128095,"byte_end":128098,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":128099,"byte_end":128191,"line_start":268,"line_end":268,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":128192,"byte_end":128285,"line_start":269,"line_end":269,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":128286,"byte_end":128374,"line_start":270,"line_end":270,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":128375,"byte_end":128384,"line_start":271,"line_end":271,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":130177,"byte_end":130219,"line_start":313,"line_end":313,"column_start":8,"column_end":50},"name":"perspective_reversed_infinite_z_wgpu_dx_gl","qualname":"::projection::lh_yup::perspective_reversed_infinite_z_wgpu_dx_gl","value":"pub fn perspective_reversed_infinite_z_wgpu_dx_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL, or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL, or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":128840,"byte_end":128957,"line_start":291,"line_end":291,"column_start":1,"column_end":118}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":128958,"byte_end":128961,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":128962,"byte_end":129049,"line_start":293,"line_end":293,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129050,"byte_end":129154,"line_start":294,"line_end":294,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129155,"byte_end":129245,"line_start":295,"line_end":295,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129246,"byte_end":129249,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129250,"byte_end":129352,"line_start":297,"line_end":297,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129353,"byte_end":129449,"line_start":298,"line_end":298,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129450,"byte_end":129493,"line_start":299,"line_end":299,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129494,"byte_end":129497,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129498,"byte_end":129564,"line_start":301,"line_end":301,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129565,"byte_end":129568,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129569,"byte_end":129620,"line_start":303,"line_end":303,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129621,"byte_end":129682,"line_start":304,"line_end":304,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129683,"byte_end":129686,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129687,"byte_end":129779,"line_start":306,"line_end":306,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129780,"byte_end":129873,"line_start":307,"line_end":307,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129874,"byte_end":129959,"line_start":308,"line_end":308,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129960,"byte_end":129963,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":129964,"byte_end":130082,"line_start":310,"line_end":310,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":130083,"byte_end":130159,"line_start":311,"line_end":311,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":130160,"byte_end":130169,"line_start":312,"line_end":312,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131692,"byte_end":131726,"line_start":349,"line_end":349,"column_start":8,"column_end":42},"name":"perspective_reversed_infinite_z_vk","qualname":"::projection::lh_yup::perspective_reversed_infinite_z_vk","value":"pub fn perspective_reversed_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":130572,"byte_end":130669,"line_start":330,"line_end":330,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":130670,"byte_end":130673,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":130674,"byte_end":130761,"line_start":332,"line_end":332,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":130762,"byte_end":130866,"line_start":333,"line_end":333,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":130867,"byte_end":130957,"line_start":334,"line_end":334,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":130958,"byte_end":130961,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":130962,"byte_end":131064,"line_start":336,"line_end":336,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131065,"byte_end":131161,"line_start":337,"line_end":337,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131162,"byte_end":131205,"line_start":338,"line_end":338,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131206,"byte_end":131209,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131210,"byte_end":131276,"line_start":340,"line_end":340,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131277,"byte_end":131280,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131281,"byte_end":131332,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131333,"byte_end":131394,"line_start":343,"line_end":343,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131395,"byte_end":131398,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131399,"byte_end":131491,"line_start":345,"line_end":345,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131492,"byte_end":131585,"line_start":346,"line_end":346,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131586,"byte_end":131674,"line_start":347,"line_end":347,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\lh_yup.rs","byte_start":131675,"byte_end":131684,"line_start":348,"line_end":348,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rh_ydown","qualname":"::projection::rh_ydown","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98}],"decl_id":null,"docs":" Projection matrices that are intended to be used when the base coordinate\n system (i.e. the one used by the application code) is right-handed, with the\n x-axis pointing right, y-axis pointing *down*, and z-axis pointing *into the\n screen*.\n","sig":null,"attributes":[{"value":"/ Projection matrices that are intended to be used when the base coordinate","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":132080,"byte_end":132157,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/ system (i.e. the one used by the application code) is right-handed, with the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":132158,"byte_end":132238,"line_start":2,"line_end":2,"column_start":1,"column_end":81}},{"value":"/ x-axis pointing right, y-axis pointing *down*, and z-axis pointing *into the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":132239,"byte_end":132319,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ screen*.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":132320,"byte_end":132332,"line_start":4,"line_end":4,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":132667,"byte_end":132682,"line_start":15,"line_end":15,"column_start":8,"column_end":23},"name":"orthographic_gl","qualname":"::projection::rh_ydown::orthographic_gl","value":"pub fn orthographic_gl(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with OpenGL.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":132373,"byte_end":132428,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":132429,"byte_end":132432,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":132433,"byte_end":132528,"line_start":11,"line_end":11,"column_start":1,"column_end":96}},{"value":"/ and the destination space is left-handed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":132529,"byte_end":132573,"line_start":12,"line_end":12,"column_start":1,"column_end":45}},{"value":"/ and y-up, with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":132574,"byte_end":132649,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":132650,"byte_end":132659,"line_start":14,"line_end":14,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":133446,"byte_end":133461,"line_start":36,"line_end":36,"column_start":8,"column_end":23},"name":"orthographic_vk","qualname":"::projection::rh_ydown::orthographic_vk","value":"pub fn orthographic_vk(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with OpenGL.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":133151,"byte_end":133206,"line_start":30,"line_end":30,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":133207,"byte_end":133210,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":133211,"byte_end":133306,"line_start":32,"line_end":32,"column_start":1,"column_end":96}},{"value":"/ and the destination space is left-handed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":133307,"byte_end":133351,"line_start":33,"line_end":33,"column_start":1,"column_end":45}},{"value":"/ and y-down, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":133352,"byte_end":133428,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":133429,"byte_end":133438,"line_start":35,"line_end":35,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":134208,"byte_end":134228,"line_start":56,"line_end":56,"column_start":8,"column_end":28},"name":"orthographic_wgpu_dx","qualname":"::projection::rh_ydown::orthographic_wgpu_dx","value":"pub fn orthographic_wgpu_dx(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with WebGPU or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":133904,"byte_end":133970,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":133971,"byte_end":133974,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":133975,"byte_end":134070,"line_start":52,"line_end":52,"column_start":1,"column_end":96}},{"value":"/ and the destination space is left-handed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":134071,"byte_end":134115,"line_start":53,"line_end":53,"column_start":1,"column_end":45}},{"value":"/ and y-up, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":134116,"byte_end":134190,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":134191,"byte_end":134200,"line_start":55,"line_end":55,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":135179,"byte_end":135193,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"perspective_gl","qualname":"::projection::rh_ydown::perspective_gl","value":"pub fn perspective_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":134699,"byte_end":134762,"line_start":77,"line_end":77,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":134763,"byte_end":134766,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":134767,"byte_end":134818,"line_start":79,"line_end":79,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":134819,"byte_end":134880,"line_start":80,"line_end":80,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":134881,"byte_end":134884,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":134885,"byte_end":134980,"line_start":82,"line_end":82,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":134981,"byte_end":135074,"line_start":83,"line_end":83,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":135075,"byte_end":135161,"line_start":84,"line_end":84,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":135162,"byte_end":135171,"line_start":85,"line_end":85,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":136104,"byte_end":136123,"line_start":109,"line_end":109,"column_start":8,"column_end":27},"name":"perspective_wgpu_dx","qualname":"::projection::rh_ydown::perspective_wgpu_dx","value":"pub fn perspective_wgpu_dx(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with WebGPU or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":135614,"byte_end":135688,"line_start":100,"line_end":100,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":135689,"byte_end":135692,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":135693,"byte_end":135744,"line_start":102,"line_end":102,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":135745,"byte_end":135806,"line_start":103,"line_end":103,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":135807,"byte_end":135810,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":135811,"byte_end":135906,"line_start":105,"line_end":105,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":135907,"byte_end":136000,"line_start":106,"line_end":106,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":136001,"byte_end":136086,"line_start":107,"line_end":107,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":136087,"byte_end":136096,"line_start":108,"line_end":108,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":137009,"byte_end":137023,"line_start":132,"line_end":132,"column_start":8,"column_end":22},"name":"perspective_vk","qualname":"::projection::rh_ydown::perspective_vk","value":"pub fn perspective_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":136527,"byte_end":136590,"line_start":123,"line_end":123,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":136591,"byte_end":136594,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":136595,"byte_end":136646,"line_start":125,"line_end":125,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":136647,"byte_end":136708,"line_start":126,"line_end":126,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":136709,"byte_end":136712,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":136713,"byte_end":136808,"line_start":128,"line_end":128,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":136809,"byte_end":136902,"line_start":129,"line_end":129,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":136903,"byte_end":136991,"line_start":130,"line_end":130,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":136992,"byte_end":137001,"line_start":131,"line_end":131,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":138175,"byte_end":138200,"line_start":159,"line_end":159,"column_start":8,"column_end":33},"name":"perspective_infinite_z_gl","qualname":"::projection::rh_ydown::perspective_infinite_z_gl","value":"pub fn perspective_infinite_z_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":137426,"byte_end":137515,"line_start":146,"line_end":146,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":137516,"byte_end":137519,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":137520,"byte_end":137617,"line_start":148,"line_end":148,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":137618,"byte_end":137714,"line_start":149,"line_end":149,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":137715,"byte_end":137758,"line_start":150,"line_end":150,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":137759,"byte_end":137762,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":137763,"byte_end":137814,"line_start":152,"line_end":152,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":137815,"byte_end":137876,"line_start":153,"line_end":153,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":137877,"byte_end":137880,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":137881,"byte_end":137976,"line_start":155,"line_end":155,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":137977,"byte_end":138070,"line_start":156,"line_end":156,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":138071,"byte_end":138157,"line_start":157,"line_end":157,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":138158,"byte_end":138167,"line_start":158,"line_end":158,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":139299,"byte_end":139324,"line_start":185,"line_end":185,"column_start":8,"column_end":33},"name":"perspective_infinite_z_vk","qualname":"::projection::rh_ydown::perspective_infinite_z_vk","value":"pub fn perspective_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":138548,"byte_end":138637,"line_start":172,"line_end":172,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":138638,"byte_end":138641,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":138642,"byte_end":138739,"line_start":174,"line_end":174,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":138740,"byte_end":138836,"line_start":175,"line_end":175,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":138837,"byte_end":138880,"line_start":176,"line_end":176,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":138881,"byte_end":138884,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":138885,"byte_end":138936,"line_start":178,"line_end":178,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":138937,"byte_end":138998,"line_start":179,"line_end":179,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":138999,"byte_end":139002,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":139003,"byte_end":139098,"line_start":181,"line_end":181,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":139099,"byte_end":139192,"line_start":182,"line_end":182,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":139193,"byte_end":139281,"line_start":183,"line_end":183,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":139282,"byte_end":139291,"line_start":184,"line_end":184,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140424,"byte_end":140454,"line_start":211,"line_end":211,"column_start":8,"column_end":38},"name":"perspective_infinite_z_wgpu_dx","qualname":"::projection::rh_ydown::perspective_infinite_z_wgpu_dx","value":"pub fn perspective_infinite_z_wgpu_dx(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":139665,"byte_end":139765,"line_start":198,"line_end":198,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":139766,"byte_end":139769,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":139770,"byte_end":139867,"line_start":200,"line_end":200,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":139868,"byte_end":139964,"line_start":201,"line_end":201,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":139965,"byte_end":140008,"line_start":202,"line_end":202,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140009,"byte_end":140012,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140013,"byte_end":140064,"line_start":204,"line_end":204,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140065,"byte_end":140126,"line_start":205,"line_end":205,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140127,"byte_end":140130,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140131,"byte_end":140226,"line_start":207,"line_end":207,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140227,"byte_end":140320,"line_start":208,"line_end":208,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140321,"byte_end":140406,"line_start":209,"line_end":209,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140407,"byte_end":140416,"line_start":210,"line_end":210,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141804,"byte_end":141837,"line_start":240,"line_end":240,"column_start":8,"column_end":41},"name":"perspective_reversed_z_wgpu_dx_gl","qualname":"::projection::rh_ydown::perspective_reversed_z_wgpu_dx_gl","value":"pub fn perspective_reversed_z_wgpu_dx_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140796,"byte_end":140900,"line_start":224,"line_end":224,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140901,"byte_end":140904,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140905,"byte_end":140992,"line_start":226,"line_end":226,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":140993,"byte_end":141097,"line_start":227,"line_end":227,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141098,"byte_end":141188,"line_start":228,"line_end":228,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141189,"byte_end":141192,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141193,"byte_end":141244,"line_start":230,"line_end":230,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141245,"byte_end":141306,"line_start":231,"line_end":231,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141307,"byte_end":141310,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141311,"byte_end":141406,"line_start":233,"line_end":233,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141407,"byte_end":141500,"line_start":234,"line_end":234,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141501,"byte_end":141586,"line_start":235,"line_end":235,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141587,"byte_end":141590,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141591,"byte_end":141709,"line_start":237,"line_end":237,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141710,"byte_end":141786,"line_start":238,"line_end":238,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":141787,"byte_end":141796,"line_start":239,"line_end":239,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":143059,"byte_end":143084,"line_start":272,"line_end":272,"column_start":8,"column_end":33},"name":"perspective_reversed_z_vk","qualname":"::projection::rh_ydown::perspective_reversed_z_vk","value":"pub fn perspective_reversed_z_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":142268,"byte_end":142352,"line_start":259,"line_end":259,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":142353,"byte_end":142356,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":142357,"byte_end":142444,"line_start":261,"line_end":261,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":142445,"byte_end":142549,"line_start":262,"line_end":262,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":142550,"byte_end":142640,"line_start":263,"line_end":263,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":142641,"byte_end":142644,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":142645,"byte_end":142696,"line_start":265,"line_end":265,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":142697,"byte_end":142758,"line_start":266,"line_end":266,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":142759,"byte_end":142762,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":142763,"byte_end":142858,"line_start":268,"line_end":268,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":142859,"byte_end":142952,"line_start":269,"line_end":269,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":142953,"byte_end":143041,"line_start":270,"line_end":270,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":143042,"byte_end":143051,"line_start":271,"line_end":271,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144847,"byte_end":144889,"line_start":313,"line_end":313,"column_start":8,"column_end":50},"name":"perspective_reversed_infinite_z_wgpu_dx_gl","qualname":"::projection::rh_ydown::perspective_reversed_infinite_z_wgpu_dx_gl","value":"pub fn perspective_reversed_infinite_z_wgpu_dx_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL, or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL, or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":143507,"byte_end":143624,"line_start":291,"line_end":291,"column_start":1,"column_end":118}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":143625,"byte_end":143628,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":143629,"byte_end":143716,"line_start":293,"line_end":293,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":143717,"byte_end":143821,"line_start":294,"line_end":294,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":143822,"byte_end":143912,"line_start":295,"line_end":295,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":143913,"byte_end":143916,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":143917,"byte_end":144019,"line_start":297,"line_end":297,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144020,"byte_end":144116,"line_start":298,"line_end":298,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144117,"byte_end":144160,"line_start":299,"line_end":299,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144161,"byte_end":144164,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144165,"byte_end":144231,"line_start":301,"line_end":301,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144232,"byte_end":144235,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144236,"byte_end":144287,"line_start":303,"line_end":303,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144288,"byte_end":144349,"line_start":304,"line_end":304,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144350,"byte_end":144353,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144354,"byte_end":144449,"line_start":306,"line_end":306,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144450,"byte_end":144543,"line_start":307,"line_end":307,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144544,"byte_end":144629,"line_start":308,"line_end":308,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144630,"byte_end":144633,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144634,"byte_end":144752,"line_start":310,"line_end":310,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144753,"byte_end":144829,"line_start":311,"line_end":311,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":144830,"byte_end":144839,"line_start":312,"line_end":312,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":146367,"byte_end":146401,"line_start":349,"line_end":349,"column_start":8,"column_end":42},"name":"perspective_reversed_infinite_z_vk","qualname":"::projection::rh_ydown::perspective_reversed_infinite_z_vk","value":"pub fn perspective_reversed_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145244,"byte_end":145341,"line_start":330,"line_end":330,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145342,"byte_end":145345,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145346,"byte_end":145433,"line_start":332,"line_end":332,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145434,"byte_end":145538,"line_start":333,"line_end":333,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145539,"byte_end":145629,"line_start":334,"line_end":334,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145630,"byte_end":145633,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145634,"byte_end":145736,"line_start":336,"line_end":336,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145737,"byte_end":145833,"line_start":337,"line_end":337,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145834,"byte_end":145877,"line_start":338,"line_end":338,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145878,"byte_end":145881,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145882,"byte_end":145948,"line_start":340,"line_end":340,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145949,"byte_end":145952,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":145953,"byte_end":146004,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":146005,"byte_end":146066,"line_start":343,"line_end":343,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":146067,"byte_end":146070,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":146071,"byte_end":146166,"line_start":345,"line_end":345,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":146167,"byte_end":146260,"line_start":346,"line_end":346,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":146261,"byte_end":146349,"line_start":347,"line_end":347,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_ydown.rs","byte_start":146350,"byte_end":146359,"line_start":348,"line_end":348,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rh_yup","qualname":"::projection::rh_yup","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114}],"decl_id":null,"docs":" Projection matrices that are intended to be used when the base coordinate\n system (i.e. the one used by the application code) is right-handed with the\n the x-axis pointing right, y-axis pointing *up*, and z-axis pointing *out of\n the screen*. This is reexported at the root of `projections` as it is the\n de-facto standard coordinate system for doing computer graphics programming.\n","sig":null,"attributes":[{"value":"/ Projection matrices that are intended to be used when the base coordinate","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":146755,"byte_end":146832,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/ system (i.e. the one used by the application code) is right-handed with the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":146833,"byte_end":146912,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ the x-axis pointing right, y-axis pointing *up*, and z-axis pointing *out of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":146913,"byte_end":146993,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ the screen*. This is reexported at the root of `projections` as it is the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":146994,"byte_end":147071,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"/ de-facto standard coordinate system for doing computer graphics programming.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":147072,"byte_end":147152,"line_start":5,"line_end":5,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":147534,"byte_end":147549,"line_start":16,"line_end":16,"column_start":8,"column_end":23},"name":"orthographic_gl","qualname":"::projection::rh_yup::orthographic_gl","value":"pub fn orthographic_gl(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with OpenGL.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":147193,"byte_end":147248,"line_start":10,"line_end":10,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":147249,"byte_end":147252,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":147253,"byte_end":147346,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space)and the destination space is left-handed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":147347,"byte_end":147440,"line_start":13,"line_end":13,"column_start":1,"column_end":94}},{"value":"/ and y-up, with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":147441,"byte_end":147516,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":147517,"byte_end":147526,"line_start":15,"line_end":15,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":148360,"byte_end":148375,"line_start":37,"line_end":37,"column_start":8,"column_end":23},"name":"orthographic_vk","qualname":"::projection::rh_yup::orthographic_vk","value":"pub fn orthographic_vk(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with Vulkan.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":148017,"byte_end":148072,"line_start":31,"line_end":31,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":148073,"byte_end":148076,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":148077,"byte_end":148170,"line_start":33,"line_end":33,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space)and the destination space is right-handed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":148171,"byte_end":148265,"line_start":34,"line_end":34,"column_start":1,"column_end":95}},{"value":"/ and y-down, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":148266,"byte_end":148342,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":148343,"byte_end":148352,"line_start":36,"line_end":36,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":149170,"byte_end":149190,"line_start":57,"line_end":57,"column_start":8,"column_end":28},"name":"orthographic_wgpu_dx","qualname":"::projection::rh_yup::orthographic_wgpu_dx","value":"pub fn orthographic_wgpu_dx(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with WebGPU or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":148819,"byte_end":148885,"line_start":51,"line_end":51,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":148886,"byte_end":148889,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":148890,"byte_end":148983,"line_start":53,"line_end":53,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space)and the destination space is left-handed","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":148984,"byte_end":149077,"line_start":54,"line_end":54,"column_start":1,"column_end":94}},{"value":"/ and y-up, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":149078,"byte_end":149152,"line_start":55,"line_end":55,"column_start":1,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":149153,"byte_end":149162,"line_start":56,"line_end":56,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":150138,"byte_end":150152,"line_start":87,"line_end":87,"column_start":8,"column_end":22},"name":"perspective_gl","qualname":"::projection::rh_yup::perspective_gl","value":"pub fn perspective_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":149660,"byte_end":149723,"line_start":78,"line_end":78,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":149724,"byte_end":149727,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":149728,"byte_end":149779,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":149780,"byte_end":149841,"line_start":81,"line_end":81,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":149842,"byte_end":149845,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":149846,"byte_end":149939,"line_start":83,"line_end":83,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":149940,"byte_end":150033,"line_start":84,"line_end":84,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":150034,"byte_end":150120,"line_start":85,"line_end":85,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":150121,"byte_end":150130,"line_start":86,"line_end":86,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":151060,"byte_end":151079,"line_start":110,"line_end":110,"column_start":8,"column_end":27},"name":"perspective_wgpu_dx","qualname":"::projection::rh_yup::perspective_wgpu_dx","value":"pub fn perspective_wgpu_dx(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with WebGPU or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":150572,"byte_end":150646,"line_start":101,"line_end":101,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":150647,"byte_end":150650,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":150651,"byte_end":150702,"line_start":103,"line_end":103,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":150703,"byte_end":150764,"line_start":104,"line_end":104,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":150765,"byte_end":150768,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":150769,"byte_end":150862,"line_start":106,"line_end":106,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":150863,"byte_end":150956,"line_start":107,"line_end":107,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":150957,"byte_end":151042,"line_start":108,"line_end":108,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":151043,"byte_end":151052,"line_start":109,"line_end":109,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":151962,"byte_end":151976,"line_start":133,"line_end":133,"column_start":8,"column_end":22},"name":"perspective_vk","qualname":"::projection::rh_yup::perspective_vk","value":"pub fn perspective_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":151482,"byte_end":151545,"line_start":124,"line_end":124,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":151546,"byte_end":151549,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":151550,"byte_end":151601,"line_start":126,"line_end":126,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":151602,"byte_end":151663,"line_start":127,"line_end":127,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":151664,"byte_end":151667,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":151668,"byte_end":151761,"line_start":129,"line_end":129,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":151762,"byte_end":151855,"line_start":130,"line_end":130,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":151856,"byte_end":151944,"line_start":131,"line_end":131,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":151945,"byte_end":151954,"line_start":132,"line_end":132,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153127,"byte_end":153152,"line_start":160,"line_end":160,"column_start":8,"column_end":33},"name":"perspective_infinite_z_gl","qualname":"::projection::rh_yup::perspective_infinite_z_gl","value":"pub fn perspective_infinite_z_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":152380,"byte_end":152469,"line_start":147,"line_end":147,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":152470,"byte_end":152473,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":152474,"byte_end":152571,"line_start":149,"line_end":149,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":152572,"byte_end":152668,"line_start":150,"line_end":150,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":152669,"byte_end":152712,"line_start":151,"line_end":151,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":152713,"byte_end":152716,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":152717,"byte_end":152768,"line_start":153,"line_end":153,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":152769,"byte_end":152830,"line_start":154,"line_end":154,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":152831,"byte_end":152834,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":152835,"byte_end":152928,"line_start":156,"line_end":156,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":152929,"byte_end":153022,"line_start":157,"line_end":157,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153023,"byte_end":153109,"line_start":158,"line_end":158,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153110,"byte_end":153119,"line_start":159,"line_end":159,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":154248,"byte_end":154273,"line_start":186,"line_end":186,"column_start":8,"column_end":33},"name":"perspective_infinite_z_vk","qualname":"::projection::rh_yup::perspective_infinite_z_vk","value":"pub fn perspective_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153499,"byte_end":153588,"line_start":173,"line_end":173,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153589,"byte_end":153592,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153593,"byte_end":153690,"line_start":175,"line_end":175,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153691,"byte_end":153787,"line_start":176,"line_end":176,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153788,"byte_end":153831,"line_start":177,"line_end":177,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153832,"byte_end":153835,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153836,"byte_end":153887,"line_start":179,"line_end":179,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153888,"byte_end":153949,"line_start":180,"line_end":180,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153950,"byte_end":153953,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":153954,"byte_end":154047,"line_start":182,"line_end":182,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":154048,"byte_end":154141,"line_start":183,"line_end":183,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":154142,"byte_end":154230,"line_start":184,"line_end":184,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":154231,"byte_end":154240,"line_start":185,"line_end":185,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":155372,"byte_end":155402,"line_start":212,"line_end":212,"column_start":8,"column_end":38},"name":"perspective_infinite_z_wgpu_dx","qualname":"::projection::rh_yup::perspective_infinite_z_wgpu_dx","value":"pub fn perspective_infinite_z_wgpu_dx(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":154615,"byte_end":154715,"line_start":199,"line_end":199,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":154716,"byte_end":154719,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":154720,"byte_end":154817,"line_start":201,"line_end":201,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":154818,"byte_end":154914,"line_start":202,"line_end":202,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":154915,"byte_end":154958,"line_start":203,"line_end":203,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":154959,"byte_end":154962,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":154963,"byte_end":155014,"line_start":205,"line_end":205,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":155015,"byte_end":155076,"line_start":206,"line_end":206,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":155077,"byte_end":155080,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":155081,"byte_end":155174,"line_start":208,"line_end":208,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":155175,"byte_end":155268,"line_start":209,"line_end":209,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":155269,"byte_end":155354,"line_start":210,"line_end":210,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":155355,"byte_end":155364,"line_start":211,"line_end":211,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156749,"byte_end":156782,"line_start":241,"line_end":241,"column_start":8,"column_end":41},"name":"perspective_reversed_z_wgpu_dx_gl","qualname":"::projection::rh_yup::perspective_reversed_z_wgpu_dx_gl","value":"pub fn perspective_reversed_z_wgpu_dx_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":155743,"byte_end":155847,"line_start":225,"line_end":225,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":155848,"byte_end":155851,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":155852,"byte_end":155939,"line_start":227,"line_end":227,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":155940,"byte_end":156044,"line_start":228,"line_end":228,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156045,"byte_end":156135,"line_start":229,"line_end":229,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156136,"byte_end":156139,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156140,"byte_end":156191,"line_start":231,"line_end":231,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156192,"byte_end":156253,"line_start":232,"line_end":232,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156254,"byte_end":156257,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156258,"byte_end":156351,"line_start":234,"line_end":234,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156352,"byte_end":156445,"line_start":235,"line_end":235,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156446,"byte_end":156531,"line_start":236,"line_end":236,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156532,"byte_end":156535,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156536,"byte_end":156654,"line_start":238,"line_end":238,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156655,"byte_end":156731,"line_start":239,"line_end":239,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":156732,"byte_end":156741,"line_start":240,"line_end":240,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":158001,"byte_end":158026,"line_start":273,"line_end":273,"column_start":8,"column_end":33},"name":"perspective_reversed_z_vk","qualname":"::projection::rh_yup::perspective_reversed_z_vk","value":"pub fn perspective_reversed_z_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157212,"byte_end":157296,"line_start":260,"line_end":260,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157297,"byte_end":157300,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157301,"byte_end":157388,"line_start":262,"line_end":262,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157389,"byte_end":157493,"line_start":263,"line_end":263,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157494,"byte_end":157584,"line_start":264,"line_end":264,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157585,"byte_end":157588,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157589,"byte_end":157640,"line_start":266,"line_end":266,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157641,"byte_end":157702,"line_start":267,"line_end":267,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157703,"byte_end":157706,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157707,"byte_end":157800,"line_start":269,"line_end":269,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157801,"byte_end":157894,"line_start":270,"line_end":270,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157895,"byte_end":157983,"line_start":271,"line_end":271,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":157984,"byte_end":157993,"line_start":272,"line_end":272,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159788,"byte_end":159830,"line_start":314,"line_end":314,"column_start":8,"column_end":50},"name":"perspective_reversed_infinite_z_wgpu_dx_gl","qualname":"::projection::rh_yup::perspective_reversed_infinite_z_wgpu_dx_gl","value":"pub fn perspective_reversed_infinite_z_wgpu_dx_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL, or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL, or DirectX.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":158450,"byte_end":158567,"line_start":292,"line_end":292,"column_start":1,"column_end":118}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":158568,"byte_end":158571,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":158572,"byte_end":158659,"line_start":294,"line_end":294,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":158660,"byte_end":158764,"line_start":295,"line_end":295,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":158765,"byte_end":158855,"line_start":296,"line_end":296,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":158856,"byte_end":158859,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":158860,"byte_end":158962,"line_start":298,"line_end":298,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":158963,"byte_end":159059,"line_start":299,"line_end":299,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159060,"byte_end":159103,"line_start":300,"line_end":300,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159104,"byte_end":159107,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159108,"byte_end":159174,"line_start":302,"line_end":302,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159175,"byte_end":159178,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159179,"byte_end":159230,"line_start":304,"line_end":304,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159231,"byte_end":159292,"line_start":305,"line_end":305,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159293,"byte_end":159296,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159297,"byte_end":159390,"line_start":307,"line_end":307,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159391,"byte_end":159484,"line_start":308,"line_end":308,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159485,"byte_end":159570,"line_start":309,"line_end":309,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159571,"byte_end":159574,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159575,"byte_end":159693,"line_start":311,"line_end":311,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159694,"byte_end":159770,"line_start":312,"line_end":312,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":159771,"byte_end":159780,"line_start":313,"line_end":313,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":161305,"byte_end":161339,"line_start":350,"line_end":350,"column_start":8,"column_end":42},"name":"perspective_reversed_infinite_z_vk","qualname":"::projection::rh_yup::perspective_reversed_infinite_z_vk","value":"pub fn perspective_reversed_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160184,"byte_end":160281,"line_start":331,"line_end":331,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160282,"byte_end":160285,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160286,"byte_end":160373,"line_start":333,"line_end":333,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160374,"byte_end":160478,"line_start":334,"line_end":334,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160479,"byte_end":160569,"line_start":335,"line_end":335,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160570,"byte_end":160573,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160574,"byte_end":160676,"line_start":337,"line_end":337,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160677,"byte_end":160773,"line_start":338,"line_end":338,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160774,"byte_end":160817,"line_start":339,"line_end":339,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160818,"byte_end":160821,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160822,"byte_end":160888,"line_start":341,"line_end":341,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160889,"byte_end":160892,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160893,"byte_end":160944,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":160945,"byte_end":161006,"line_start":344,"line_end":344,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":161007,"byte_end":161010,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":161011,"byte_end":161104,"line_start":346,"line_end":346,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":161105,"byte_end":161198,"line_start":347,"line_end":347,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":161199,"byte_end":161287,"line_start":348,"line_end":348,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection\\rh_yup.rs","byte_start":161288,"byte_end":161297,"line_start":349,"line_end":349,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rotor","qualname":"::rotor","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":1774},{"krate":0,"index":1784},{"krate":0,"index":1783},{"krate":0,"index":1781},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1786},{"krate":0,"index":1621},{"krate":0,"index":1639},{"krate":0,"index":1641},{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1651},{"krate":0,"index":1653},{"krate":0,"index":1656},{"krate":0,"index":1659},{"krate":0,"index":1661},{"krate":0,"index":1664},{"krate":0,"index":1667},{"krate":0,"index":1669},{"krate":0,"index":1788},{"krate":0,"index":1798},{"krate":0,"index":1797},{"krate":0,"index":1795},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1800},{"krate":0,"index":1672},{"krate":0,"index":1690},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1697},{"krate":0,"index":1699},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1707},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1715},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1802},{"krate":0,"index":1812},{"krate":0,"index":1811},{"krate":0,"index":1809},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1814},{"krate":0,"index":1723},{"krate":0,"index":1741},{"krate":0,"index":1743},{"krate":0,"index":1745},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1753},{"krate":0,"index":1755},{"krate":0,"index":1758},{"krate":0,"index":1761},{"krate":0,"index":1763},{"krate":0,"index":1766},{"krate":0,"index":1769},{"krate":0,"index":1771},{"krate":0,"index":1981},{"krate":0,"index":1991},{"krate":0,"index":1990},{"krate":0,"index":1988},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1993},{"krate":0,"index":1816},{"krate":0,"index":1838},{"krate":0,"index":1840},{"krate":0,"index":1842},{"krate":0,"index":1845},{"krate":0,"index":1847},{"krate":0,"index":1850},{"krate":0,"index":1852},{"krate":0,"index":1855},{"krate":0,"index":1858},{"krate":0,"index":1860},{"krate":0,"index":1863},{"krate":0,"index":1866},{"krate":0,"index":1868},{"krate":0,"index":1995},{"krate":0,"index":2005},{"krate":0,"index":2004},{"krate":0,"index":2002},{"krate":0,"index":1998},{"krate":0,"index":1999},{"krate":0,"index":2007},{"krate":0,"index":1871},{"krate":0,"index":1893},{"krate":0,"index":1895},{"krate":0,"index":1897},{"krate":0,"index":1900},{"krate":0,"index":1902},{"krate":0,"index":1905},{"krate":0,"index":1907},{"krate":0,"index":1910},{"krate":0,"index":1913},{"krate":0,"index":1915},{"krate":0,"index":1918},{"krate":0,"index":1921},{"krate":0,"index":1923},{"krate":0,"index":2009},{"krate":0,"index":2019},{"krate":0,"index":2018},{"krate":0,"index":2016},{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2021},{"krate":0,"index":1926},{"krate":0,"index":1948},{"krate":0,"index":1950},{"krate":0,"index":1952},{"krate":0,"index":1955},{"krate":0,"index":1957},{"krate":0,"index":1960},{"krate":0,"index":1962},{"krate":0,"index":1965},{"krate":0,"index":1968},{"krate":0,"index":1970},{"krate":0,"index":1973},{"krate":0,"index":1976},{"krate":0,"index":1978}],"decl_id":null,"docs":" Rotors, i.e. constructs that describe and perform rotations.","sig":null,"attributes":[{"value":"/ Rotors, i.e. constructs that describe and perform rotations.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":161694,"byte_end":161758,"line_start":1,"line_end":1,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":161759,"byte_end":161762,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A rotor is the geometric algebra analog of the Quaternion, and they","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":161763,"byte_end":161834,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ end up being mathematically equivalent. They are good for doing the same","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":161835,"byte_end":161911,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/ sorts of things, and for the most part you can use rotors just like you","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":161912,"byte_end":161987,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ would a quaternion, if you're already familiar with using those. However,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":161988,"byte_end":162065,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ they are significantly easier to derive yourself and build intuition for,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162066,"byte_end":162143,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ and they generalize to both lower and higher dimensions than just 3, which","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162144,"byte_end":162222,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ is the only space for which quaternions are valuable.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162223,"byte_end":162280,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162281,"byte_end":162284,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ A rotor can be thought of in multiple ways, the first of which","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162285,"byte_end":162351,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ is that a rotor is the result of the 'geometric product' of two vectors,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162352,"byte_end":162428,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ denoted for two vectors `u` and `v` as simply `uv`. This operation is","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162429,"byte_end":162502,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/ defined as","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162503,"byte_end":162517,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162518,"byte_end":162521,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ `uv = u · v + u ∧ v`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162522,"byte_end":162549,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162550,"byte_end":162553,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ As can be seen, this operation results in the addition of two different","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162554,"byte_end":162629,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ types of values: first, the dot product will result in a scalar, and second,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162630,"byte_end":162710,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ the exterior (wedge) product will result in a bivector. The addition of these two different","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162711,"byte_end":162806,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/ types is not defined, but can be understood in a similar way as complex numbers,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162807,"byte_end":162891,"line_start":21,"line_end":21,"column_start":1,"column_end":85}},{"value":"/ i.e. as a 'bundle' of two different kinds of values.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162892,"byte_end":162948,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162949,"byte_end":162952,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The reason we call this type of value a 'rotor' is that if you both left- and","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":162953,"byte_end":163034,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"/ right-multiply (using the geometric product) a rotor with a vector, you will","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163035,"byte_end":163115,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ rotate the sandwiched vector. For example, if you start with two vectors,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163116,"byte_end":163193,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/ `a` and `b`, and create a rotor `ab` from them, then rotate a vector `u` with this","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163194,"byte_end":163280,"line_start":27,"line_end":27,"column_start":1,"column_end":87}},{"value":"/ rotor by doing `ba u ab`, you will end up rotating the vector `u` by in the plane","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163281,"byte_end":163366,"line_start":28,"line_end":28,"column_start":1,"column_end":86}},{"value":"/ that corresponds to `a ∧ b` (i.e. the plane which is parallel with both vectors), by","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163367,"byte_end":163457,"line_start":29,"line_end":29,"column_start":1,"column_end":89}},{"value":"/ twice the angle between `a` and `b`, in the opposite direction of the one that would","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163458,"byte_end":163546,"line_start":30,"line_end":30,"column_start":1,"column_end":89}},{"value":"/ bring `a` towards `b` within that plane.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163547,"byte_end":163591,"line_start":31,"line_end":31,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163592,"byte_end":163595,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ In `ultraviolet`, the `Mul` trait is implemented for Rotors such that doing","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163596,"byte_end":163675,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163676,"byte_end":163679,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ `rotor * vec`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163680,"byte_end":163697,"line_start":35,"line_end":35,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163698,"byte_end":163701,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ will rotate the Vector `vec` by the Rotor `rotor`.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163702,"byte_end":163756,"line_start":37,"line_end":37,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163757,"byte_end":163760,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ To compose rotations, simply left-multiply the rotor by another one in the same","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163761,"byte_end":163844,"line_start":39,"line_end":39,"column_start":1,"column_end":84}},{"value":"/ way that matrix composition works. For example,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163845,"byte_end":163896,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163897,"byte_end":163900,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ `rotor_ab = rotor_b * rotor_a`","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163901,"byte_end":163935,"line_start":42,"line_end":42,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163936,"byte_end":163939,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Will result in the composition of `rotor_b` and `rotor_a` such that `rotor_ab` encodes","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":163940,"byte_end":164030,"line_start":44,"line_end":44,"column_start":1,"column_end":91}},{"value":"/ a rotation as though `rotor_a` was applied *and then* `rotor_b` was applied.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164031,"byte_end":164111,"line_start":45,"line_end":45,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164112,"byte_end":164115,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Note that *composition* of rotors is *more efficient*","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164116,"byte_end":164173,"line_start":47,"line_end":47,"column_start":1,"column_end":58}},{"value":"/ than composition of matrices, however, the operation of rotating a vector by a rotor, i.e. the","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164174,"byte_end":164272,"line_start":48,"line_end":48,"column_start":1,"column_end":99}},{"value":"/ `rotor * vec` product,  is *more expensive* to","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164273,"byte_end":164323,"line_start":49,"line_end":49,"column_start":1,"column_end":51}},{"value":"/ compute than the `matrix * vec` product. So, rotors are excellent for *building* and *interpolating*","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164324,"byte_end":164428,"line_start":50,"line_end":50,"column_start":1,"column_end":105}},{"value":"/ rotations, but it may be preferable to convert them into matrices before applying them to","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164429,"byte_end":164522,"line_start":51,"line_end":51,"column_start":1,"column_end":94}},{"value":"/ vectors/points, if the same rotation will be applied to many vectors.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164523,"byte_end":164596,"line_start":52,"line_end":52,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1774},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173125,"byte_end":173131,"line_start":337,"line_end":337,"column_start":5,"column_end":11},"name":"Rotor2","qualname":"::rotor::Rotor2","value":"Rotor2 { s, bv }","parent":null,"children":[{"krate":0,"index":1775},{"krate":0,"index":1776}],"decl_id":null,"docs":" A Rotor in 2d space.","sig":null,"attributes":[{"value":"/ A Rotor in 2d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164766,"byte_end":164790,"line_start":62,"line_end":62,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164799,"byte_end":164802,"line_start":63,"line_end":63,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on rotors!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164811,"byte_end":164888,"line_start":64,"line_end":64,"column_start":9,"column_end":86}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164946,"byte_end":164956,"line_start":66,"line_end":66,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1788},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173166,"byte_end":173174,"line_start":338,"line_end":338,"column_start":5,"column_end":13},"name":"Rotor2x4","qualname":"::rotor::Rotor2x4","value":"Rotor2x4 { s, bv }","parent":null,"children":[{"krate":0,"index":1789},{"krate":0,"index":1790}],"decl_id":null,"docs":" A Rotor in 2d space.","sig":null,"attributes":[{"value":"/ A Rotor in 2d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164766,"byte_end":164790,"line_start":62,"line_end":62,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164799,"byte_end":164802,"line_start":63,"line_end":63,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on rotors!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164811,"byte_end":164888,"line_start":64,"line_end":64,"column_start":9,"column_end":86}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164946,"byte_end":164956,"line_start":66,"line_end":66,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1802},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173217,"byte_end":173225,"line_start":339,"line_end":339,"column_start":5,"column_end":13},"name":"Rotor2x8","qualname":"::rotor::Rotor2x8","value":"Rotor2x8 { s, bv }","parent":null,"children":[{"krate":0,"index":1803},{"krate":0,"index":1804}],"decl_id":null,"docs":" A Rotor in 2d space.","sig":null,"attributes":[{"value":"/ A Rotor in 2d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164766,"byte_end":164790,"line_start":62,"line_end":62,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164799,"byte_end":164802,"line_start":63,"line_end":63,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on rotors!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164811,"byte_end":164888,"line_start":64,"line_end":64,"column_start":9,"column_end":86}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":164946,"byte_end":164956,"line_start":66,"line_end":66,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1981},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":187758,"byte_end":187764,"line_start":757,"line_end":757,"column_start":5,"column_end":11},"name":"Rotor3","qualname":"::rotor::Rotor3","value":"Rotor3 { s, bv }","parent":null,"children":[{"krate":0,"index":1982},{"krate":0,"index":1983}],"decl_id":null,"docs":" A Rotor in 3d space.","sig":null,"attributes":[{"value":"/ A Rotor in 3d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173574,"byte_end":173598,"line_start":352,"line_end":352,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173607,"byte_end":173610,"line_start":353,"line_end":353,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on rotors!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173619,"byte_end":173696,"line_start":354,"line_end":354,"column_start":9,"column_end":86}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173754,"byte_end":173764,"line_start":356,"line_end":356,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1995},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":187799,"byte_end":187807,"line_start":758,"line_end":758,"column_start":5,"column_end":13},"name":"Rotor3x4","qualname":"::rotor::Rotor3x4","value":"Rotor3x4 { s, bv }","parent":null,"children":[{"krate":0,"index":1996},{"krate":0,"index":1997}],"decl_id":null,"docs":" A Rotor in 3d space.","sig":null,"attributes":[{"value":"/ A Rotor in 3d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173574,"byte_end":173598,"line_start":352,"line_end":352,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173607,"byte_end":173610,"line_start":353,"line_end":353,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on rotors!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173619,"byte_end":173696,"line_start":354,"line_end":354,"column_start":9,"column_end":86}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173754,"byte_end":173764,"line_start":356,"line_end":356,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2009},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":187850,"byte_end":187858,"line_start":759,"line_end":759,"column_start":5,"column_end":13},"name":"Rotor3x8","qualname":"::rotor::Rotor3x8","value":"Rotor3x8 { s, bv }","parent":null,"children":[{"krate":0,"index":2010},{"krate":0,"index":2011}],"decl_id":null,"docs":" A Rotor in 3d space.","sig":null,"attributes":[{"value":"/ A Rotor in 3d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173574,"byte_end":173598,"line_start":352,"line_end":352,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173607,"byte_end":173610,"line_start":353,"line_end":353,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on rotors!","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173619,"byte_end":173696,"line_start":354,"line_end":354,"column_start":9,"column_end":86}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\rotor.rs","byte_start":173754,"byte_end":173764,"line_start":356,"line_end":356,"column_start":9,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"transform","qualname":"::transform","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":2173},{"krate":0,"index":2183},{"krate":0,"index":2182},{"krate":0,"index":2180},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2185},{"krate":0,"index":2023},{"krate":0,"index":2036},{"krate":0,"index":2039},{"krate":0,"index":2042},{"krate":0,"index":2045},{"krate":0,"index":2187},{"krate":0,"index":2197},{"krate":0,"index":2196},{"krate":0,"index":2194},{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":2199},{"krate":0,"index":2048},{"krate":0,"index":2061},{"krate":0,"index":2064},{"krate":0,"index":2067},{"krate":0,"index":2070},{"krate":0,"index":2201},{"krate":0,"index":2211},{"krate":0,"index":2210},{"krate":0,"index":2208},{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2213},{"krate":0,"index":2073},{"krate":0,"index":2086},{"krate":0,"index":2089},{"krate":0,"index":2092},{"krate":0,"index":2095},{"krate":0,"index":2215},{"krate":0,"index":2225},{"krate":0,"index":2224},{"krate":0,"index":2222},{"krate":0,"index":2218},{"krate":0,"index":2219},{"krate":0,"index":2227},{"krate":0,"index":2098},{"krate":0,"index":2111},{"krate":0,"index":2114},{"krate":0,"index":2117},{"krate":0,"index":2120},{"krate":0,"index":2229},{"krate":0,"index":2239},{"krate":0,"index":2238},{"krate":0,"index":2236},{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":2241},{"krate":0,"index":2123},{"krate":0,"index":2136},{"krate":0,"index":2139},{"krate":0,"index":2142},{"krate":0,"index":2145},{"krate":0,"index":2243},{"krate":0,"index":2253},{"krate":0,"index":2252},{"krate":0,"index":2250},{"krate":0,"index":2246},{"krate":0,"index":2247},{"krate":0,"index":2255},{"krate":0,"index":2148},{"krate":0,"index":2161},{"krate":0,"index":2164},{"krate":0,"index":2167},{"krate":0,"index":2170},{"krate":0,"index":2419},{"krate":0,"index":2430},{"krate":0,"index":2429},{"krate":0,"index":2427},{"krate":0,"index":2423},{"krate":0,"index":2424},{"krate":0,"index":2432},{"krate":0,"index":2257},{"krate":0,"index":2272},{"krate":0,"index":2275},{"krate":0,"index":2278},{"krate":0,"index":2281},{"krate":0,"index":2434},{"krate":0,"index":2445},{"krate":0,"index":2444},{"krate":0,"index":2442},{"krate":0,"index":2438},{"krate":0,"index":2439},{"krate":0,"index":2447},{"krate":0,"index":2284},{"krate":0,"index":2299},{"krate":0,"index":2302},{"krate":0,"index":2305},{"krate":0,"index":2308},{"krate":0,"index":2449},{"krate":0,"index":2460},{"krate":0,"index":2459},{"krate":0,"index":2457},{"krate":0,"index":2453},{"krate":0,"index":2454},{"krate":0,"index":2462},{"krate":0,"index":2311},{"krate":0,"index":2326},{"krate":0,"index":2329},{"krate":0,"index":2332},{"krate":0,"index":2335},{"krate":0,"index":2464},{"krate":0,"index":2475},{"krate":0,"index":2474},{"krate":0,"index":2472},{"krate":0,"index":2468},{"krate":0,"index":2469},{"krate":0,"index":2477},{"krate":0,"index":2338},{"krate":0,"index":2353},{"krate":0,"index":2356},{"krate":0,"index":2359},{"krate":0,"index":2362},{"krate":0,"index":2479},{"krate":0,"index":2490},{"krate":0,"index":2489},{"krate":0,"index":2487},{"krate":0,"index":2483},{"krate":0,"index":2484},{"krate":0,"index":2492},{"krate":0,"index":2365},{"krate":0,"index":2380},{"krate":0,"index":2383},{"krate":0,"index":2386},{"krate":0,"index":2389},{"krate":0,"index":2494},{"krate":0,"index":2505},{"krate":0,"index":2504},{"krate":0,"index":2502},{"krate":0,"index":2498},{"krate":0,"index":2499},{"krate":0,"index":2507},{"krate":0,"index":2392},{"krate":0,"index":2407},{"krate":0,"index":2410},{"krate":0,"index":2413},{"krate":0,"index":2416}],"decl_id":null,"docs":" Dedicated transformation types as the combination of primitives.","sig":null,"attributes":[{"value":"/ Dedicated transformation types as the combination of primitives.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190446,"byte_end":190514,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190515,"byte_end":190518,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Note that you may want to us these types over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190519,"byte_end":190594,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ homogeneous transformation matrix because they are faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190595,"byte_end":190676,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190677,"byte_end":190716,"line_start":5,"line_end":5,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2173},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196058,"byte_end":196067,"line_start":163,"line_end":163,"column_start":5,"column_end":14},"name":"Isometry2","qualname":"::transform::Isometry2","value":"Isometry2 { translation, rotation }","parent":null,"children":[{"krate":0,"index":2174},{"krate":0,"index":2175}],"decl_id":null,"docs":" An Isometry, aka a \"rigid body transformation\".","sig":null,"attributes":[{"value":"/ An Isometry, aka a \"rigid body transformation\".","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190870,"byte_end":190921,"line_start":13,"line_end":13,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190930,"byte_end":190933,"line_start":14,"line_end":14,"column_start":9,"column_end":12}},{"value":"/ Defined as the combination of a rotation *and then* a translation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190942,"byte_end":191012,"line_start":15,"line_end":15,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191021,"byte_end":191024,"line_start":16,"line_end":16,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191033,"byte_end":191096,"line_start":17,"line_end":17,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191105,"byte_end":191188,"line_start":18,"line_end":18,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191197,"byte_end":191236,"line_start":19,"line_end":19,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191294,"byte_end":191304,"line_start":21,"line_end":21,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2187},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196102,"byte_end":196113,"line_start":164,"line_end":164,"column_start":5,"column_end":16},"name":"Isometry2x4","qualname":"::transform::Isometry2x4","value":"Isometry2x4 { translation, rotation }","parent":null,"children":[{"krate":0,"index":2188},{"krate":0,"index":2189}],"decl_id":null,"docs":" An Isometry, aka a \"rigid body transformation\".","sig":null,"attributes":[{"value":"/ An Isometry, aka a \"rigid body transformation\".","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190870,"byte_end":190921,"line_start":13,"line_end":13,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190930,"byte_end":190933,"line_start":14,"line_end":14,"column_start":9,"column_end":12}},{"value":"/ Defined as the combination of a rotation *and then* a translation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190942,"byte_end":191012,"line_start":15,"line_end":15,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191021,"byte_end":191024,"line_start":16,"line_end":16,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191033,"byte_end":191096,"line_start":17,"line_end":17,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191105,"byte_end":191188,"line_start":18,"line_end":18,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191197,"byte_end":191236,"line_start":19,"line_end":19,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191294,"byte_end":191304,"line_start":21,"line_end":21,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2201},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196156,"byte_end":196167,"line_start":165,"line_end":165,"column_start":5,"column_end":16},"name":"Isometry2x8","qualname":"::transform::Isometry2x8","value":"Isometry2x8 { translation, rotation }","parent":null,"children":[{"krate":0,"index":2202},{"krate":0,"index":2203}],"decl_id":null,"docs":" An Isometry, aka a \"rigid body transformation\".","sig":null,"attributes":[{"value":"/ An Isometry, aka a \"rigid body transformation\".","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190870,"byte_end":190921,"line_start":13,"line_end":13,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190930,"byte_end":190933,"line_start":14,"line_end":14,"column_start":9,"column_end":12}},{"value":"/ Defined as the combination of a rotation *and then* a translation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190942,"byte_end":191012,"line_start":15,"line_end":15,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191021,"byte_end":191024,"line_start":16,"line_end":16,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191033,"byte_end":191096,"line_start":17,"line_end":17,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191105,"byte_end":191188,"line_start":18,"line_end":18,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191197,"byte_end":191236,"line_start":19,"line_end":19,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191294,"byte_end":191304,"line_start":21,"line_end":21,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2215},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196211,"byte_end":196220,"line_start":167,"line_end":167,"column_start":5,"column_end":14},"name":"Isometry3","qualname":"::transform::Isometry3","value":"Isometry3 { translation, rotation }","parent":null,"children":[{"krate":0,"index":2216},{"krate":0,"index":2217}],"decl_id":null,"docs":" An Isometry, aka a \"rigid body transformation\".","sig":null,"attributes":[{"value":"/ An Isometry, aka a \"rigid body transformation\".","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190870,"byte_end":190921,"line_start":13,"line_end":13,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190930,"byte_end":190933,"line_start":14,"line_end":14,"column_start":9,"column_end":12}},{"value":"/ Defined as the combination of a rotation *and then* a translation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190942,"byte_end":191012,"line_start":15,"line_end":15,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191021,"byte_end":191024,"line_start":16,"line_end":16,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191033,"byte_end":191096,"line_start":17,"line_end":17,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191105,"byte_end":191188,"line_start":18,"line_end":18,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191197,"byte_end":191236,"line_start":19,"line_end":19,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191294,"byte_end":191304,"line_start":21,"line_end":21,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2229},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196255,"byte_end":196266,"line_start":168,"line_end":168,"column_start":5,"column_end":16},"name":"Isometry3x4","qualname":"::transform::Isometry3x4","value":"Isometry3x4 { translation, rotation }","parent":null,"children":[{"krate":0,"index":2230},{"krate":0,"index":2231}],"decl_id":null,"docs":" An Isometry, aka a \"rigid body transformation\".","sig":null,"attributes":[{"value":"/ An Isometry, aka a \"rigid body transformation\".","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190870,"byte_end":190921,"line_start":13,"line_end":13,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190930,"byte_end":190933,"line_start":14,"line_end":14,"column_start":9,"column_end":12}},{"value":"/ Defined as the combination of a rotation *and then* a translation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190942,"byte_end":191012,"line_start":15,"line_end":15,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191021,"byte_end":191024,"line_start":16,"line_end":16,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191033,"byte_end":191096,"line_start":17,"line_end":17,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191105,"byte_end":191188,"line_start":18,"line_end":18,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191197,"byte_end":191236,"line_start":19,"line_end":19,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191294,"byte_end":191304,"line_start":21,"line_end":21,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2243},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196309,"byte_end":196320,"line_start":169,"line_end":169,"column_start":5,"column_end":16},"name":"Isometry3x8","qualname":"::transform::Isometry3x8","value":"Isometry3x8 { translation, rotation }","parent":null,"children":[{"krate":0,"index":2244},{"krate":0,"index":2245}],"decl_id":null,"docs":" An Isometry, aka a \"rigid body transformation\".","sig":null,"attributes":[{"value":"/ An Isometry, aka a \"rigid body transformation\".","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190870,"byte_end":190921,"line_start":13,"line_end":13,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190930,"byte_end":190933,"line_start":14,"line_end":14,"column_start":9,"column_end":12}},{"value":"/ Defined as the combination of a rotation *and then* a translation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":190942,"byte_end":191012,"line_start":15,"line_end":15,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191021,"byte_end":191024,"line_start":16,"line_end":16,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191033,"byte_end":191096,"line_start":17,"line_end":17,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191105,"byte_end":191188,"line_start":18,"line_end":18,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191197,"byte_end":191236,"line_start":19,"line_end":19,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":191294,"byte_end":191304,"line_start":21,"line_end":21,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2419},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":203407,"byte_end":203418,"line_start":363,"line_end":363,"column_start":5,"column_end":16},"name":"Similarity2","qualname":"::transform::Similarity2","value":"Similarity2 { translation, rotation, scale }","parent":null,"children":[{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2422}],"decl_id":null,"docs":" A Similarity, i.e. an Isometry but with an added uniform scaling.","sig":null,"attributes":[{"value":"/ A Similarity, i.e. an Isometry but with an added uniform scaling.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196851,"byte_end":196920,"line_start":186,"line_end":186,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196929,"byte_end":196932,"line_start":187,"line_end":187,"column_start":9,"column_end":12}},{"value":"/ Defined as a uniform scaling followed by a rotation followed by a translation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196941,"byte_end":197023,"line_start":188,"line_end":188,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197032,"byte_end":197035,"line_start":189,"line_end":189,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197044,"byte_end":197107,"line_start":190,"line_end":190,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197116,"byte_end":197199,"line_start":191,"line_end":191,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197208,"byte_end":197247,"line_start":192,"line_end":192,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197305,"byte_end":197315,"line_start":194,"line_end":194,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2434},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":203453,"byte_end":203466,"line_start":364,"line_end":364,"column_start":5,"column_end":18},"name":"Similarity2x4","qualname":"::transform::Similarity2x4","value":"Similarity2x4 { translation, rotation, scale }","parent":null,"children":[{"krate":0,"index":2435},{"krate":0,"index":2436},{"krate":0,"index":2437}],"decl_id":null,"docs":" A Similarity, i.e. an Isometry but with an added uniform scaling.","sig":null,"attributes":[{"value":"/ A Similarity, i.e. an Isometry but with an added uniform scaling.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196851,"byte_end":196920,"line_start":186,"line_end":186,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196929,"byte_end":196932,"line_start":187,"line_end":187,"column_start":9,"column_end":12}},{"value":"/ Defined as a uniform scaling followed by a rotation followed by a translation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196941,"byte_end":197023,"line_start":188,"line_end":188,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197032,"byte_end":197035,"line_start":189,"line_end":189,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197044,"byte_end":197107,"line_start":190,"line_end":190,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197116,"byte_end":197199,"line_start":191,"line_end":191,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197208,"byte_end":197247,"line_start":192,"line_end":192,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197305,"byte_end":197315,"line_start":194,"line_end":194,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2449},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":203509,"byte_end":203522,"line_start":365,"line_end":365,"column_start":5,"column_end":18},"name":"Similarity2x8","qualname":"::transform::Similarity2x8","value":"Similarity2x8 { translation, rotation, scale }","parent":null,"children":[{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2452}],"decl_id":null,"docs":" A Similarity, i.e. an Isometry but with an added uniform scaling.","sig":null,"attributes":[{"value":"/ A Similarity, i.e. an Isometry but with an added uniform scaling.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196851,"byte_end":196920,"line_start":186,"line_end":186,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196929,"byte_end":196932,"line_start":187,"line_end":187,"column_start":9,"column_end":12}},{"value":"/ Defined as a uniform scaling followed by a rotation followed by a translation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196941,"byte_end":197023,"line_start":188,"line_end":188,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197032,"byte_end":197035,"line_start":189,"line_end":189,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197044,"byte_end":197107,"line_start":190,"line_end":190,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197116,"byte_end":197199,"line_start":191,"line_end":191,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197208,"byte_end":197247,"line_start":192,"line_end":192,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197305,"byte_end":197315,"line_start":194,"line_end":194,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2464},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":203566,"byte_end":203577,"line_start":367,"line_end":367,"column_start":5,"column_end":16},"name":"Similarity3","qualname":"::transform::Similarity3","value":"Similarity3 { translation, rotation, scale }","parent":null,"children":[{"krate":0,"index":2465},{"krate":0,"index":2466},{"krate":0,"index":2467}],"decl_id":null,"docs":" A Similarity, i.e. an Isometry but with an added uniform scaling.","sig":null,"attributes":[{"value":"/ A Similarity, i.e. an Isometry but with an added uniform scaling.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196851,"byte_end":196920,"line_start":186,"line_end":186,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196929,"byte_end":196932,"line_start":187,"line_end":187,"column_start":9,"column_end":12}},{"value":"/ Defined as a uniform scaling followed by a rotation followed by a translation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196941,"byte_end":197023,"line_start":188,"line_end":188,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197032,"byte_end":197035,"line_start":189,"line_end":189,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197044,"byte_end":197107,"line_start":190,"line_end":190,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197116,"byte_end":197199,"line_start":191,"line_end":191,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197208,"byte_end":197247,"line_start":192,"line_end":192,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197305,"byte_end":197315,"line_start":194,"line_end":194,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2479},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":203612,"byte_end":203625,"line_start":368,"line_end":368,"column_start":5,"column_end":18},"name":"Similarity3x4","qualname":"::transform::Similarity3x4","value":"Similarity3x4 { translation, rotation, scale }","parent":null,"children":[{"krate":0,"index":2480},{"krate":0,"index":2481},{"krate":0,"index":2482}],"decl_id":null,"docs":" A Similarity, i.e. an Isometry but with an added uniform scaling.","sig":null,"attributes":[{"value":"/ A Similarity, i.e. an Isometry but with an added uniform scaling.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196851,"byte_end":196920,"line_start":186,"line_end":186,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196929,"byte_end":196932,"line_start":187,"line_end":187,"column_start":9,"column_end":12}},{"value":"/ Defined as a uniform scaling followed by a rotation followed by a translation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196941,"byte_end":197023,"line_start":188,"line_end":188,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197032,"byte_end":197035,"line_start":189,"line_end":189,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197044,"byte_end":197107,"line_start":190,"line_end":190,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197116,"byte_end":197199,"line_start":191,"line_end":191,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197208,"byte_end":197247,"line_start":192,"line_end":192,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197305,"byte_end":197315,"line_start":194,"line_end":194,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2494},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":203668,"byte_end":203681,"line_start":369,"line_end":369,"column_start":5,"column_end":18},"name":"Similarity3x8","qualname":"::transform::Similarity3x8","value":"Similarity3x8 { translation, rotation, scale }","parent":null,"children":[{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2497}],"decl_id":null,"docs":" A Similarity, i.e. an Isometry but with an added uniform scaling.","sig":null,"attributes":[{"value":"/ A Similarity, i.e. an Isometry but with an added uniform scaling.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196851,"byte_end":196920,"line_start":186,"line_end":186,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196929,"byte_end":196932,"line_start":187,"line_end":187,"column_start":9,"column_end":12}},{"value":"/ Defined as a uniform scaling followed by a rotation followed by a translation.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":196941,"byte_end":197023,"line_start":188,"line_end":188,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197032,"byte_end":197035,"line_start":189,"line_end":189,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197044,"byte_end":197107,"line_start":190,"line_end":190,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197116,"byte_end":197199,"line_start":191,"line_end":191,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197208,"byte_end":197247,"line_start":192,"line_end":192,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\transform.rs","byte_start":197305,"byte_end":197315,"line_start":194,"line_end":194,"column_start":9,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\mod.rs","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":155},{"krate":0,"index":184},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"decl_id":null,"docs":" Vectors and points, i.e. directed line segments and locations.\n","sig":null,"attributes":[{"value":"/ Vectors and points, i.e. directed line segments and locations.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\mod.rs","byte_start":204106,"byte_end":204172,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2854},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":226498,"byte_end":226502,"line_start":729,"line_end":729,"column_start":6,"column_end":10},"name":"Vec2","qualname":"::vec::vec2::Vec2","value":"Vec2 { x, y }","parent":null,"children":[{"krate":0,"index":2855},{"krate":0,"index":2856}],"decl_id":null,"docs":" A set of two coordinates which may be interpreted as a vector or point in 2d space.","sig":null,"attributes":[{"value":"/ A set of two coordinates which may be interpreted as a vector or point in 2d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204434,"byte_end":204521,"line_start":9,"line_end":9,"column_start":9,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204530,"byte_end":204533,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204542,"byte_end":204634,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204643,"byte_end":204726,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204735,"byte_end":204773,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204840,"byte_end":204850,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2868},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":226545,"byte_end":226551,"line_start":730,"line_end":730,"column_start":6,"column_end":12},"name":"Vec2x4","qualname":"::vec::vec2::Vec2x4","value":"Vec2x4 { x, y }","parent":null,"children":[{"krate":0,"index":2869},{"krate":0,"index":2870}],"decl_id":null,"docs":" A set of two coordinates which may be interpreted as a vector or point in 2d space.","sig":null,"attributes":[{"value":"/ A set of two coordinates which may be interpreted as a vector or point in 2d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204434,"byte_end":204521,"line_start":9,"line_end":9,"column_start":9,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204530,"byte_end":204533,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204542,"byte_end":204634,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204643,"byte_end":204726,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204735,"byte_end":204773,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204840,"byte_end":204850,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2882},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":226604,"byte_end":226610,"line_start":731,"line_end":731,"column_start":6,"column_end":12},"name":"Vec2x8","qualname":"::vec::vec2::Vec2x8","value":"Vec2x8 { x, y }","parent":null,"children":[{"krate":0,"index":2883},{"krate":0,"index":2884}],"decl_id":null,"docs":" A set of two coordinates which may be interpreted as a vector or point in 2d space.","sig":null,"attributes":[{"value":"/ A set of two coordinates which may be interpreted as a vector or point in 2d space.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204434,"byte_end":204521,"line_start":9,"line_end":9,"column_start":9,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204530,"byte_end":204533,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204542,"byte_end":204634,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204643,"byte_end":204726,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204735,"byte_end":204773,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":204840,"byte_end":204850,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3284},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":253100,"byte_end":253104,"line_start":828,"line_end":828,"column_start":12,"column_end":16},"name":"Vec3","qualname":"::vec::vec3::Vec3","value":"Vec3 { x, y, z }","parent":null,"children":[{"krate":0,"index":3285},{"krate":0,"index":3286},{"krate":0,"index":3287}],"decl_id":null,"docs":" A set of three coordinates which may be interpreted as a point or vector in 3d space,\n or as a homogeneous 2d vector or point.","sig":null,"attributes":[{"value":"/ A set of three coordinates which may be interpreted as a point or vector in 3d space,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227427,"byte_end":227516,"line_start":8,"line_end":8,"column_start":11,"column_end":100}},{"value":"/ or as a homogeneous 2d vector or point.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227525,"byte_end":227568,"line_start":9,"line_end":9,"column_start":9,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227577,"byte_end":227580,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227589,"byte_end":227681,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227690,"byte_end":227773,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227782,"byte_end":227820,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227887,"byte_end":227897,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3299},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":253149,"byte_end":253155,"line_start":829,"line_end":829,"column_start":14,"column_end":20},"name":"Vec3x4","qualname":"::vec::vec3::Vec3x4","value":"Vec3x4 { x, y, z }","parent":null,"children":[{"krate":0,"index":3300},{"krate":0,"index":3301},{"krate":0,"index":3302}],"decl_id":null,"docs":" A set of three coordinates which may be interpreted as a point or vector in 3d space,\n or as a homogeneous 2d vector or point.","sig":null,"attributes":[{"value":"/ A set of three coordinates which may be interpreted as a point or vector in 3d space,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227427,"byte_end":227516,"line_start":8,"line_end":8,"column_start":11,"column_end":100}},{"value":"/ or as a homogeneous 2d vector or point.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227525,"byte_end":227568,"line_start":9,"line_end":9,"column_start":9,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227577,"byte_end":227580,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227589,"byte_end":227681,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227690,"byte_end":227773,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227782,"byte_end":227820,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227887,"byte_end":227897,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3314},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":253208,"byte_end":253214,"line_start":830,"line_end":830,"column_start":14,"column_end":20},"name":"Vec3x8","qualname":"::vec::vec3::Vec3x8","value":"Vec3x8 { x, y, z }","parent":null,"children":[{"krate":0,"index":3315},{"krate":0,"index":3316},{"krate":0,"index":3317}],"decl_id":null,"docs":" A set of three coordinates which may be interpreted as a point or vector in 3d space,\n or as a homogeneous 2d vector or point.","sig":null,"attributes":[{"value":"/ A set of three coordinates which may be interpreted as a point or vector in 3d space,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227427,"byte_end":227516,"line_start":8,"line_end":8,"column_start":11,"column_end":100}},{"value":"/ or as a homogeneous 2d vector or point.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227525,"byte_end":227568,"line_start":9,"line_end":9,"column_start":9,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227577,"byte_end":227580,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227589,"byte_end":227681,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227690,"byte_end":227773,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227782,"byte_end":227820,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":227887,"byte_end":227897,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3695},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":277175,"byte_end":277179,"line_start":753,"line_end":753,"column_start":5,"column_end":9},"name":"Vec4","qualname":"::vec::vec4::Vec4","value":"Vec4 { x, y, z, w }","parent":null,"children":[{"krate":0,"index":3696},{"krate":0,"index":3697},{"krate":0,"index":3698},{"krate":0,"index":3699}],"decl_id":null,"docs":" A set of four coordinates which may be interpreted as a point or vector in 4d space,\n or as a homogeneous 3d vector or point.","sig":null,"attributes":[{"value":"/ A set of four coordinates which may be interpreted as a point or vector in 4d space,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254046,"byte_end":254134,"line_start":8,"line_end":8,"column_start":11,"column_end":99}},{"value":"/ or as a homogeneous 3d vector or point.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254143,"byte_end":254186,"line_start":9,"line_end":9,"column_start":9,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254195,"byte_end":254198,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254207,"byte_end":254299,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254308,"byte_end":254391,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254400,"byte_end":254438,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254505,"byte_end":254515,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3711},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":277204,"byte_end":277210,"line_start":754,"line_end":754,"column_start":5,"column_end":11},"name":"Vec4x4","qualname":"::vec::vec4::Vec4x4","value":"Vec4x4 { x, y, z, w }","parent":null,"children":[{"krate":0,"index":3712},{"krate":0,"index":3713},{"krate":0,"index":3714},{"krate":0,"index":3715}],"decl_id":null,"docs":" A set of four coordinates which may be interpreted as a point or vector in 4d space,\n or as a homogeneous 3d vector or point.","sig":null,"attributes":[{"value":"/ A set of four coordinates which may be interpreted as a point or vector in 4d space,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254046,"byte_end":254134,"line_start":8,"line_end":8,"column_start":11,"column_end":99}},{"value":"/ or as a homogeneous 3d vector or point.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254143,"byte_end":254186,"line_start":9,"line_end":9,"column_start":9,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254195,"byte_end":254198,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254207,"byte_end":254299,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254308,"byte_end":254391,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254400,"byte_end":254438,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254505,"byte_end":254515,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3727},"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":277241,"byte_end":277247,"line_start":755,"line_end":755,"column_start":5,"column_end":11},"name":"Vec4x8","qualname":"::vec::vec4::Vec4x8","value":"Vec4x8 { x, y, z, w }","parent":null,"children":[{"krate":0,"index":3728},{"krate":0,"index":3729},{"krate":0,"index":3730},{"krate":0,"index":3731}],"decl_id":null,"docs":" A set of four coordinates which may be interpreted as a point or vector in 4d space,\n or as a homogeneous 3d vector or point.","sig":null,"attributes":[{"value":"/ A set of four coordinates which may be interpreted as a point or vector in 4d space,","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254046,"byte_end":254134,"line_start":8,"line_end":8,"column_start":11,"column_end":99}},{"value":"/ or as a homogeneous 3d vector or point.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254143,"byte_end":254186,"line_start":9,"line_end":9,"column_start":9,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254195,"byte_end":254198,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254207,"byte_end":254299,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254308,"byte_end":254391,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254400,"byte_end":254438,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":254505,"byte_end":254515,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]}],"impls":[{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":223775,"byte_end":223781,"line_start":623,"line_end":623,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":224117,"byte_end":224123,"line_start":637,"line_end":637,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":224386,"byte_end":224392,"line_start":647,"line_end":647,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":224876,"byte_end":224882,"line_start":665,"line_end":665,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":249677,"byte_end":249683,"line_start":708,"line_end":708,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":250089,"byte_end":250095,"line_start":723,"line_end":723,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":250432,"byte_end":250438,"line_start":734,"line_end":734,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":251020,"byte_end":251026,"line_start":753,"line_end":753,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":273100,"byte_end":273106,"line_start":622,"line_end":622,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":273582,"byte_end":273588,"line_start":638,"line_end":638,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":273999,"byte_end":274005,"line_start":650,"line_end":650,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":274685,"byte_end":274691,"line_start":670,"line_end":670,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":5545,"byte_end":5550,"line_start":88,"line_end":88,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":24}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":5597,"byte_end":5603,"line_start":91,"line_end":91,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":30}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":5613,"byte_end":5616,"line_start":92,"line_end":92,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":42}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":5626,"byte_end":5636,"line_start":93,"line_end":93,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":50}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":102728,"byte_end":102736,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":51}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":102746,"byte_end":102752,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":67}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":102762,"byte_end":102770,"line_start":11,"line_end":11,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":83}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\projection.rs","byte_start":102780,"byte_end":102786,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":99}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":5646,"byte_end":5651,"line_start":94,"line_end":94,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":116}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":5661,"byte_end":5670,"line_start":95,"line_end":95,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":122}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\lib.rs","byte_start":5680,"byte_end":5683,"line_start":96,"line_end":96,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":127}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":223775,"byte_end":223781,"line_start":623,"line_end":623,"column_start":26,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2868},"to":{"krate":2,"index":2725}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":224117,"byte_end":224123,"line_start":637,"line_end":637,"column_start":26,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2868},"to":{"krate":2,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":224386,"byte_end":224392,"line_start":647,"line_end":647,"column_start":26,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2882},"to":{"krate":2,"index":2725}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec2.rs","byte_start":224876,"byte_end":224882,"line_start":665,"line_end":665,"column_start":26,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2882},"to":{"krate":2,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":249677,"byte_end":249683,"line_start":708,"line_end":708,"column_start":26,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3299},"to":{"krate":2,"index":2725}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":250089,"byte_end":250095,"line_start":723,"line_end":723,"column_start":26,"column_end":32},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3299},"to":{"krate":2,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":250432,"byte_end":250438,"line_start":734,"line_end":734,"column_start":26,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3314},"to":{"krate":2,"index":2725}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec3.rs","byte_start":251020,"byte_end":251026,"line_start":753,"line_end":753,"column_start":26,"column_end":32},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3314},"to":{"krate":2,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":273100,"byte_end":273106,"line_start":622,"line_end":622,"column_start":26,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3711},"to":{"krate":2,"index":2725}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":273582,"byte_end":273588,"line_start":638,"line_end":638,"column_start":26,"column_end":32},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3711},"to":{"krate":2,"index":2728}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":273999,"byte_end":274005,"line_start":650,"line_end":650,"column_start":26,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3727},"to":{"krate":2,"index":2725}},{"span":{"file_name":"C:\\Users\\Jason\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ultraviolet-0.7.5\\src\\vec\\vec4.rs","byte_start":274685,"byte_end":274691,"line_start":670,"line_end":670,"column_start":26,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3727},"to":{"krate":2,"index":2728}}]}